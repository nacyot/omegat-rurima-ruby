= class DL::Function < Fiddle::Function

Cの関数ポインタを表すクラスです。

[[lib:fiddle]] が利用可能な場合は [[c:Fiddle::Function]] の
サブクラスです。そうでない場合は [[c:Object]] のサブクラス
です。

[[c:DL::CFunc]] のラッパークラスです。DL::CFuncは
プラットフォームによってはうまく動かないため、DL::CFuncを直接使わずに
このクラスを通してCの関数を呼び出すべきです。

Cの関数の引数と返り値の型を保持し、[[m:DL::Function#call]] を呼び出した
ときには、その型に従い引数を変換してCの関数に渡し、返り値を
Rubyのオブジェクトに変換します。


== Class Methods

--- new(cfunc, argtypes)                  -> DL::Function
--- new(cfunc, argtypes){|*arg| ... }     -> DL::Function

指定された [[c:DL::CFunc]] オブジェクト cfunc をラップする
DL::Function オブジェクトを生成して返します。

@param cfunc [[c:DL::CFunc]] オブジェクトを指定します。

@param argtypes cfunc の引数の型を[[c:DL]]に定義された定数の配列で指定します。                unsigned char など unsigned を指定したい場合は - を付けて
//emlist{
    - TYPE_CHAR
//}
                を使います。

예:

 require 'dl/import'

 h = DL::Handle.new
 addr = h.sym('strncmp')
 cfunc = DL::CFunc.new(addr, DL::TYPE_INT)
 func = DL::Function.new(cfunc, [DL::TYPE_VOIDP, DL::TYPE_VOIDP, DL::TYPE_INT])
 
 p func.call("abcd", "abcz", 3)    #=> 0

@see [[m:DL::TYPE_INT]]


== Instance Methods

--- bind{|*args| ... }

自身に指定されたブロックをバインドします。
自身に対して call メソッドが呼ばれたとき、生成時に与えられた [[c:DL::CFunc]] オブジェクトではなく
このブロックが呼ばれます。

예:

 require 'dl/import'

 cfunc = DL::CFunc.new(0, DL::TYPE_INT)
 func  = DL::Function.new(cfunc, [DL::TYPE_INT])
 func.bind{|i| i + 3  }
 p func.call(2)             #=> 5


--- call(*arg)              -> DL::CPtr | Integer | Float | nil
--- call(*arg){|*v| ... }   -> DL::CPtr | Integer | Float | nil

自身が表す関数を呼び、返り値を Ruby のオブジェクトに変換して返します。

返り値と引数は [[m:DL::Function.new]] で指定したものが使われます。
より詳しくいうと、
  * 返り値は [[c:DL::CFunc]] オブジェクトに指定された型
  * 引数は new の argtypes 引数で指定した型
を用います。

#@include(callargs)  

ブロックを与えた場合、引数の中に [[c:DL::Function]] オブジェクトが
もしあれば与えられたブロックをバインドし、その後上と同じように関数を呼びます。
複数の DL::Function オブジェクトを引数に渡した場合は、前にある
ほうにバインドされます。


@param arg 関数に与える引数を指定します。           
예:
 require 'dl/import' 
 
 h = DL::Handle.new
 addr = h.sym('fread')
 cfunc = DL::CFunc.new(addr, DL::TYPE_INT)
 func = DL::Function.new(cfunc, [DL::TYPE_VOIDP, DL::TYPE_LONG, DL::TYPE_LONG, DL::TYPE_VOIDP])
 io = File.open('s.txt')
 s = " " * 8
 func.call(s, 4, 1, io)
 p s                    #=> "hoge    "

예:
 require 'dl/import' 

 h = DL::Handle.new
 addr = h.sym('strdup')
 cfunc = DL::CFunc.new(addr, DL::TYPE_VOIDP)
 func = DL::Function.new(cfunc, [DL::TYPE_VOIDP])
 s = 'abc'
 ptr = func.call(s)
 p ptr.to_s              #=> "abc"


--- name  -> String

自身が表す関数の名前を文字列で返します。

 require 'dl/import'

 h = DL::Handle.new
 addr = h.sym('strncmp')
 cfunc = DL::CFunc.new(addr, DL::TYPE_INT, 'strncmp')
 func = DL::Function.new(cfunc, [DL::TYPE_VOIDP, DL::TYPE_VOIDP, DL::TYPE_INT])
 
 p func.name    #=> "strncmp"


--- to_i  -> Integer

自身が表す関数のアドレスを整数で返します。

 require 'dl/import'

 h = DL::Handle.new
 addr = h.sym('strncmp')
 cfunc = DL::CFunc.new(addr, DL::TYPE_INT)
 func = DL::Function.new(cfunc, [DL::TYPE_VOIDP, DL::TYPE_VOIDP, DL::TYPE_INT])

 p func.to_i    #=>  3084587680

--- unbind    -> ()

自身から関数をアンバインドします。

1.9.x では [[m:DL::Function#bind]] で Ruby の block を bind した場合には
このメソッドは正しく動作しません。
2.0以降では修正されています。

#@# https://bugs.ruby-lang.org/issues/7543

--- bound?-> bool
関数がバインドされているならば真を返します。  
  # 0 をアドレスとする DL::Function オブジェクトを作ると、それには関数が
  # バインドされていないとみなされる
  func = DL::Function.new(DL::CFunc.new(0, DL::TYPE_INT), [DL::TYPE_INT])
  func.bound?# => false

1.9.x では [[m:DL::Function#bind]] で Ruby の block を bind した場合には
このメソッドは正しく動作しません。
2.0以降では修正されています。

#@# https://bugs.ruby-lang.org/issues/7543

@see [[m:DL::Function#unbind]]

#@# For internal use
#@# --- bind_at_call
#@# --- unbind_at_call
#@# この2つは DL::Function オブジェクトが DL::Function.call の引数になった場合に
#@# 呼び出される。
#@# --- wrap_result 
#@# 返り値をその型に応じて変換するために使われる

#@# = class DL::TempFunction < DL::Function
#@# 
#@# DL::Function とほぼ同じですが、[[m:DL::Function#call]] を
#@# 経由したCの関数呼出の callback として渡すことを想定した
#@# クラスです。
#@# 
#@# [[lib:fiddle]] が利用可能な場合は [[c:DL::Function]] とまったく
#@# 同じように動作します。

#@# なにをしたいクラスなのかよくわからない、ので comment out
#@# = class DL::CarriedFunction < DL::Function
#@# == Class Methods
#@# --- new(cfunc, argtypes, n)
#@# == Instance Methods
#@# --- create_carrier(data)
