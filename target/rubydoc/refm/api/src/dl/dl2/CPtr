= class DL::CPtr < Object

メモリ領域を表すクラスです。C 言語のポインタに相当します。 

== Singleton Methods

--- new(addr, size = 0, free = nil)   -> DL::CPtr

与えられた addr が指すメモリ領域を表す CPtr オブジェクトを生成して返します。

size を指定した場合、アドレス addr に確保されているメモリ領域のサイズは
size であると仮定されます。GC は free 関数を使用してメモリを解放します。

@param addr 生成する CPtr オブジェクトが指すアドレスを整数で指定します。

@param size 生成する CPtr オブジェクトが指すメモリ領域のサイズを整数で指定します。

@param free GC 時に呼ばれる free 関数を [[c:DL::CFunc]] オブジェクトか整数で指定します。

--- malloc(size, free = nil)   -> DL::CPtr

与えられた長さ size のメモリ領域を確保し、それを表す CPtr オブジェクトを生成して返します。

@param size 確保したいメモリ領域のサイズを整数で指定します。

@param free GC 時に呼ばれる CPtr オブジェクトの free 関数を [[c:DL::CFunc]] オブジェクトか整数で指定します。

--- [](val)       -> DL::CPtr
--- to_ptr(val)   -> DL::CPtr

与えられた val と関連した CPtr オブジェクトを生成して返します。

val が文字列の場合は文字列が格納されているメモリ領域を指す CPtr オブジェクトを返します。
IO オブジェクトの場合は FILE ポインタを表す CPtr オブジェクトを返します。
val に to_ptr メソッドが定義されている場合は、val.to_ptr を呼びます。
上以外の場合は、整数に変換しそれをアドレスとする CPtr オブジェクトを返します。


@param val Ruby オブジェクトを指定します。

@raise DL::DLError to_ptr の返り値が CPtr オブジェクトでない場合に発生します
@raise TypeError 上記のいずれの変換も不可能であった場合に発生します

예:

 require 'dl'
 s = "abc"
 p DL::CPtr[s].to_i                 #=> 136186388
 p [s].pack('p*').unpack('l!*')[0]  #=> 136186388


== Instance Methods

--- +(n)   -> DL::CPtr

自身のアドレスに n バイトを足した新しい CPtr オブジェクトを返します。

この返り値には、free 関数がセットされていません。

@param n アドレスの増分を整数で指定します。

예:
 require 'dl'
 
 s = 'abc'
 cptr = DL::CPtr[s]
 p cptr[0,1]         #=> "a"
 cptr += 1
 p cptr[0,1]         #=> "b"

--- ptr   -> DL::CPtr
--- +@    -> DL::CPtr

自身の指す値を CPtr にして返します。
自身の指す値はポインタであると仮定します。
C 言語におけるポインタのポインタに対する間接参照 *p と同じです。 

この返り値には、free 関数がセットされていません。

예:

 require 'dl/import'
 
 s = 'abc'
 cptr = DL::CPtr[s]
 cref = cptr.ref
 p cref.to_s(4).unpack('l*')[0]  #=> 136121648
 p cptr.to_i                     #=> 136121648
 p cref.ptr.to_s                 #=> "abc"

--- -(n)   -> DL::CPtr

自身のアドレスから n バイトを引いた新しい CPtr オブジェクトを返します。

この返り値には、free 関数がセットされていません。

@param n アドレスの差分を整数で指定します。

예:
 require 'dl' 
 
 s = 'abc'
 cptr = DL::CPtr[s]
 cptr += 1
 p cptr[0,1]         #=> "b"
 cptr -= 1
 p cptr[0,1]         #=> "a"

--- ref   -> DL::CPtr
--- -@    -> DL::CPtr

自身を指す CPtr オブジェクトを返します。
C 言語におけるポインタへのアドレス演算子の適用 &p と同じです。

この返り値には、free 関数がセットされていません。

예:

 require 'dl/import'
 
 s = 'abc'
 cptr = DL::CPtr[s]
 cref = cptr.ref
 p cref.to_s(4).unpack('l*')[0]  #=> 136121648
 p cptr.to_i                     #=> 136121648
 p cref.ptr.to_s                 #=> "abc"


--- <=>(other)    -> Integer

ポインタの指すアドレスの大小を比較します。

@param other 比較対象の CPtr オブジェクト

--- eql?(other)     -> bool
--- ==(other)       -> bool

ポインタの指すアドレスが同一かどうかを判定します。

@param other 比較対象の CPtr オブジェクト

예:

 require 'dl' 
 
 s = 'abc'
 cptr  = DL::CPtr[s]
 cptr0 = DL::CPtr[s]
 cptr1 = cptr + 1
 
 p cptr == cptr1     #=> false
 p cptr == cptr0     #=> true

--- [](offset)            -> Integer

自身の指すアドレスに offset バイトを足したメモリ領域の先頭を整数として返します。

@param offset 値を得たい領域のアドレスまでのオフセット
@raise DL::DLError self の保持するポインタが NULL である場合に発生します

예:

 require 'dl'
 
 s = 'abc'
 cptr  = DL::CPtr[s]
 p cptr[0]            #=> 97           
 p cptr[1]            #=> 98

--- [](offset, len)       -> String

自身の指すアドレスに offset バイトを足したメモリ領域の先頭 len バイトを複製し、
文字列として返します。

(self + offset).to_s(len) と同等です。
offset + len が自身のサイズより小さいかを検証しません。

@param offset 値を得たい領域の先頭のアドレスまでのオフセットを整数で与えます。

@param len 値を得たい領域のサイズを指定します。
@raise DL::DLError self の保持するポインタが NULL である場合に発生します

예:

 require 'dl'
 
 s = 'abc'
 cptr  = DL::CPtr[s]
 p cptr[0, 1]            #=> "a"
 p cptr[1, 2]            #=> "bc"

--- []=(offset, n)

自身の指すアドレスに offset バイトを足したメモリ領域を指定された n に書き換えます。

@param n 整数を指定します。
@raise DL::DLError self の保持するポインタが NULL である場合に発生します

예:

 require 'dl'

 s = 'abc'
 cptr  = DL::CPtr[s]
 cptr[0] = 65
 p cptr.to_s         #=> "Bbc"


--- []=(offset, len, v) 

自身の指すアドレスに offset バイトを足したメモリ領域の先頭 len バイトに
文字列 str をコピーします。

str のサイズが len より小さい場合は、残りの領域を 0 で埋めます。
コピー先の領域が len より大きいか検証しません。

@param offset 書き換えたいメモリ領域のオフセットを整数で与えます。

@param len 書き換えたいメモリ領域のサイズを整数で指定します。

@param v メモリ領域にセットしたいバイト列を文字列で指定します。

@raise DL::DLError self の保持するポインタが NULL である場合に発生します

예:

 require 'dl'
 
 s = 'abc'
 cptr  = DL::CPtr[s]
 p cptr[1,2] = "AA"
 p cptr.to_s         #=> "aAA"


--- free     -> DL::CFunc

GC がメモリを解放するのに使用する [[c:DL::CFunc]] オブジェクトを返します。

これは普通 [[m:DL::CPtr#free=]] や [[m:DL::CPtr.new]] によって設定されます。

--- free=(cfunc)

GC が自身を解放するのに使う関数を [[c:DL::CFunc]] で指定します。

@param cfunc 自身を解放するのに使われる関数を [[c:DL::CFunc]] か整数で指定します。

--- null?-> bool

自身が NULL なら true を返します。그렇지 않으면 false를 리턴합니다.

--- size        -> Integer
自身の指す領域のサイズを返します。

基本的には [[m:DL::CPtr.new]] で指定したサイズが返されます。
[[m:DL::CPtr.to_ptr]] で文字列を変換したときは、そのバイト数が返されます。
[[m:DL::CPtr#size=]] でこの値を変更することができます。

--- size=(s)

自身の指す領域のサイズを変えます。

変更してもメモリの再割り当てはしません。単にオブジェクトが記録している
size の情報が変更されるだけです。

@param s 自身が指すメモリのサイズを整数で指定します。

--- to_i    -> Integer
--- to_int  -> Integer

自身が指すアドレスを整数で返します。

--- to_s         -> String
--- to_s(len)    -> String

自身が指す領域から長さ len の文字列を複製して返します。

len を省略した場合は、文字列の終りは '\0' であると仮定して、
[[man:strlen(3)]] を使って長さを算出します。

@param len 文字列の長さを整数で指定します。

--- to_str         -> String
--- to_str(len)    -> String

自身が指す領域から長さ len の文字列を複製して返します。

len を省略した場合は、self.size をその代わりに使います。

@param len 文字列の長さを整数で指定します。

--- to_value    -> object

自身はヒープに確保された Ruby のオブジェクトを指すポインタであると仮定して、
自身が指すオブジェクトを返します。

예:

 require 'dl'
 
 s = 'abc'
 i = DL.dlwrap(s)
 cptr = DL::CPtr.new(i)
 p cptr.to_value   #=> "abc"

