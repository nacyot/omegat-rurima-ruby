= module DL

UNIX の [[man:dlopen(3)]] や Windows の LoadLibrary() 
などのダイナミックリンカへの低レベルなインターフェースを提供するモジュールです。

== Singleton Methods
--- fiddle?-> bool
DL 内部で [[lib:fiddle]] を利用するならば真を返します。


== Module Functions

--- dlopen(lib)                    -> DL::Handle
--- dlopen(lib) {|handle| ... }    -> DL::Handle

ダイナミックライブラリ lib をロードし、
[[c:DL::Handle]] として返します。

ブロックが与えられている場合は、[[c:DL::Handle]] 引数として
与えられたブロックを実行します。[[c:DL::Handle]] を返します。

[[m:DL::Handle.new]](lib) と等価です。

@param lib ロードしたいライブラリを文字列で与えます。

@raise RuntimeError [[man:dlopen(3)]] に失敗した時に発生します。

--- malloc(size)    -> Integer

size バイトのメモリ領域を確保し、その領域を指す整数を返します。

メモリを確保できなかった場合、例外 NoMemoryError が発生するか、あるいは ruby インタプリタが強制終了します。

@param size 必要なメモリ領域のサイズを整数で指定します。

--- realloc(addr, size)   -> Integer

addr で指定したメモリ領域を size バイトにリサイズし、その領域を指す整数
を返します。

addr には [[m:DL.malloc]] で確保したメモリ領域を渡します。
また、リサイズの結果、返り値が addr と異なる場合があります。

@param addr リサイズしたいメモリアドレス整数
@param size リサイズ後のバイト数
@see [[m:DL.malloc]]

--- free(addr)      -> nil

指定された addr が指すメモリ領域を開放します。

必ず [[m:DL.#malloc]] が返した整数を addr に与えなければいけません。
そうでない場合、ruby インタプリタが異常終了します。

@param addr [[m:DL.#malloc]] で確保されたメモリ領域を指す整数を指定します。

예:
  require 'dl'
  addr = DL.malloc(10)
  p addr               #=> 136942800
  DL.free(addr)

--- dlwrap(obj)    -> Integer

指定されたオブジェクト obj のアドレスを表す整数を返します。

@param obj Ruby のオブジェクトを指定します。

예:

  require 'dl'
  s = 'abc'
  p addr = DL.dlwrap(s)   #=> 136122440
  p DL.dlunwrap(addr)     #=> "abc"

--- dlunwrap(addr)  -> object

指定されたアドレスの Ruby オブジェクトを返します。

@param addr [[m:DL.#dlwrap]] が返した Ruby オブジェクトのアドレス(整数)を指定します。

예:

  require 'dl'
  s = 'abc'
  p addr = DL.dlwrap(s)   #=> 136122440
  p DL.dlunwrap(addr)     #=> "abc"

#@#== Constants

#@# Constants for internal use
#@# --- CdeclCallbackProcs
#@# 
#@# --- CdeclCallbackAddrs
#@# 
#@# --- StdcallCallbackProcs
#@# 
#@# --- StdcallCallbackAddrs

--- ALIGN_CHAR -> Integer
C の構造体における char のアライメントの値。

--- ALIGN_DOUBLE -> Integer
C の構造体における double のアライメントの値。

--- ALIGN_FLOAT -> Integer
C の構造体における float のアライメントの値。

--- ALIGN_INT -> Integer
C の構造体における int のアライメントの値。

--- ALIGN_LONG -> Integer
C の構造体における long のアライメントの値。

--- ALIGN_LONG_LONG -> Integer
C の構造体における long long のアライメントの値。

--- ALIGN_SHORT -> Integer
C の構造体における short のアライメントの値。

--- ALIGN_VOIDP -> Integer
C の構造体における void* のアライメントの値。

--- BUILD_RUBY_PLATFORM -> String
ビルドに用いた ruby のプラットフォームを表す文字列。

通常、[[m:Object::RUBY_PLATFORM]] と同じ。

--- BUILD_RUBY_VERSION -> String
ビルドに用いた ruby のバージョンを表す文字列。

通常、[[m:Object::RUBY_VERSION]] と同じ。

#@# --- DLSTACK_SIZE
#@# DL での C の関数での関数呼び出しで用意されるスタックのサイズ。
#@# 
#@# [[lib:fiddle]] を併用するときはこの値は利用されない
#@# 
#@# --- MAX_CALLBACK
#@# 
#@# たぶん使われていない


--- NULL -> DL::CPtr
C の NULL ポインタ

--- RTLD_GLOBAL -> Integer
dlopen のフラグ RTLD_GLOBAL を表す定数です。

[[m:DL::Handle.new]] の flags として用います。

詳しくは [[man:dlopen(3)]] を見てください。

--- RTLD_LAZY -> Integer
dlopen のフラグ RTLD_LAZY を表す定数です。

[[m:DL::Handle.new]] の flags として用います。

詳しくは [[man:dlopen(3)]] を見てください。

--- RTLD_NOW -> Integer
dlopen のフラグ RTLD_NOW を表す定数です。

[[m:DL::Handle.new]] の flags として用います。

詳しくは [[man:dlopen(3)]] を見てください。


--- RUBY_FREE -> Integer
ruby_xfree の関数ポインタのアドレスの値。

--- SIZEOF_CHAR -> Integer
Cでの sizeof(char) の値

--- SIZEOF_DOUBLE -> Integer
Cでの sizeof(double) の値

--- SIZEOF_FLOAT -> Integer
Cでの sizeof(float) の値

--- SIZEOF_INT -> Integer
Cでの sizeof(int) の値

--- SIZEOF_LONG -> Integer
Cでの sizeof(long) の値

--- SIZEOF_LONG_LONG -> Integer
Cでの sizeof(long long) の値

--- SIZEOF_SHORT -> Integer
Cでの sizeof(short) の値

--- SIZEOF_VOIDP -> Integer
Cでの sizeof(void*) の値

--- TYPE_CHAR -> Integer
C の char 型を表す定数。

unsigned char を表すには符号を逆転させます。         
--- TYPE_DOUBLE -> Integer
C の double 型を表す定数。

--- TYPE_FLOAT -> Integer
C の float 型を表す定数。

--- TYPE_INT -> Integer
C の int 型を表す定数。

unsigned int を表すには符号を逆転させます。

--- TYPE_LONG -> Integer
C の long 型を表す定数。

unsigned long を表すには符号を逆転させます。

--- TYPE_LONG_LONG -> Integer
C の long long 型を表す定数。

unsigned long long を表すには符号を逆転させます。

--- TYPE_SHORT -> Integer
C の short 型を表す定数。

unsigned short を表すには符号を逆転させます。

--- TYPE_VOID -> Integer
C の void を表す定数。

--- TYPE_VOIDP -> Integer
C の void* 型を表す定数。

= class DL::DLError < StandardError
DL のエラー全般を表すクラス。

= class DL::DLTypeError < StandardError
DL の型変換エラーを表すクラス。