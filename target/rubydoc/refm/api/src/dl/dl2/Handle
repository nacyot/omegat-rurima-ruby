= class DL::Handle < Object

열려있는 동적 라이브러리를 나타내는 클래스입니다.
[[man:dlopen(3)]] が返すハンドラーのラッパーです。


== Class Methods

--- new(lib, flags=DL::RTLD_LAZY|DL::RTLD_GLOBAL) -> DL::Handle
--- new(lib, flags=DL::RTLD_LAZY|DL::RTLD_GLOBAL) {|handle| ... }    -> DL::Handle

ライブラリ lib をオープンし、Handle オブジェクトとして返します。

ブロックを指定すれば、生成した Handle を引数としてブロックを実行します。
Handle はブロックの終りで自動的にクローズされます。

flags で [[man:dlopen(3)]] の第2引数として渡すフラグを指定できます。
[[m:DL::RTLD_LAZY]]、[[m:DL::RTLD_NOW]] のどちらか一方を指定する必要があり、
またそれに [[m:DL::RTLD_GLOBAL]] と OR を取ることができます。
詳しい意味は manpage([[man:dlopen(3)]]) を参照してください。

@param lib ライブラリを文字列で指定します。
@param flags フラグ
@raise DL::DLError ライブラリのオープンに失敗した場合に発生します

예:

 require 'dl'

 h = DL::Handle.new('libc.so.6')
 i = h.sym('strlen') #=> 3085201584
 cfunc = DL::CFunc.new(i, DL::TYPE_INT, 'strlen')
 p cfunc.call(['abcde'].pack('p*').unpack('l!*'))   #=> 5

--- sym(func) -> Integer
--- [](func) -> Integer

ライブラリのデフォルトの検索順序に従い、現在のライブラリ以降の
シンボルを探します。

DL::Handle::NEXT.sym(func) と同じです。詳しくは [[man:dlsym(3)]] の
RTLD_NEXT を見てください。

@raise DL::DLError シンボルが見つからなかった時に発生します。


== Instance Methods

--- close    -> Integer

自身をクローズします。成功した場合は 0 を返します。そうでない場合は、
0 以外の整数を返します。

@see [[man:dlclose(3)]]

--- enable_close     -> nil
GC によるオブジェクトの回収時に self をクローズする([[m:DL::Handle#close]])
ように設定します。

デフォルトでは close しません。

@see [[m:DL::Handle#disable_close]], [[m:DL::Handle#close_enabled?]]

--- disable_close    -> nil

GC によるオブジェクトの回収時に self をクローズしない([[m:DL::Handle#close]])
ように設定します。

デフォルトでは close しません。

@see [[m:DL::Handle#enable_close]], [[m:DL::Handle#close_enabled?]]

--- close_enabled?-> bool 

GC によるオブジェクトの回収時に self をクローズする([[m:DL::Handle#close]])
かどうかを真偽値で返します。


@see [[m:DL::Handle#enable_close]], [[m:DL::Handle#disable_close]]

--- sym(func) -> Integer
--- [](func)  -> Integer

関数やグローバル変数 func へのポインタを取得し、整数として返します。

@param func 得たいシンボルの名前を文字列で与えます。

@raise DL::DLError シンボルが見つからなかった時に発生します。

예:

 require 'dl'

 h = DL::Handle.new('libc.so.6')
 i = h.sym('strlen') 
 p i                                                #=> 3085201584
 cfunc = DL::CFunc.new(i, DL::TYPE_INT, 'strlen')
 p cfunc.call(['abcde'].pack('p*').unpack('l!*'))   #=> 5

--- to_i    -> Integer

自身が表すハンドル([[man:dlopen(3)]] が返したもの)のアドレスを返します。

== Constants
--- NEXT -> DL::Handle
RTLD_NEXT で表わされる疑似ハンドルを表します。

詳しくは [[man:dlsym(3)]] を参照してください。

--- DEFAULT -> DL::Handle
RTLD_DEFAULT で表わされる疑似ハンドルを表します。

詳しくは [[man:dlsym(3)]] を参照してください。
