= class WEBrick::HTTPAuth::DigestAuth < Object
include WEBrick::HTTPAuth::Authenticator

HTTP の Digest 認証のためのクラスです。

[[RFC:2617]] も参照してください。

예:
  config = { :Realm => 'DigestAuth example realm' }

  htdigest = WEBrick::HTTPAuth::Htdigest.new 'my_password_file'
  htdigest.set_passwd config[:Realm], 'username', 'password'
  htdigest.flush

  config[:UserDB] = htdigest

  digest_auth = WEBrick::HTTPAuth::DigestAuth.new config

サーブレットの initialize メソッドの中でこのクラスのインスタンスを作成
しないようにしてください。デフォルトでは WEBrick はリクエストのたびにサー
ブレットのインスタンスを生成しますが、
[[c:WEBrick::HTTPAuth::DigestAuth]] のオブジェクトはリクエストをまたい
で利用しなければならないためです。


== Class Methods

--- make_passwd(realm, user, pass) -> String

与えられた情報を使用してハッシュ化したパスワードを生成します。

@param realm レルムを指定します。

@param user 사용자명을 지정합니다.

@param pass 패스워드를 지정합니다.

--- new(config, default = WEBrick::Config::DigestAuth) -> WEBrick::HTTPAuth::DigestAuth

객체를 초기화합니다.

認証を実行するために、リクエスト間で状態を保存し、複数のリクエストに対
して同一のインスタンスを使用してください。

@param config 設定を保持しているハッシュを指定します。              :Realm と :UserDB は必ず指定しなければなりません。

@param default デフォルトは [[m:WEBrick::Config::DigestAuth]] です。

@see [[m:WEBrick::Config::DigestAuth]]


== Instance Methods

--- algorithm -> String

アルゴリズムを表す文字列を返します。

--- authenticate(request, response) -> true

クライアントから送られてきたユーザ名とパスワードを認証します。
認証に失敗した場合は challenge を呼びます。

@param request [[c:WEBrick::HTTPRequest]] のインスタンスを指定します。

@param response [[c:WEBrick::HTTPResponse]] のインスタンスを指定します。

@raise WEBrick::HTTPStatus::Unauthorized 認証に失敗した場合に発生します。

--- challenge(request, response, stale = false)

クライアントにパスワードを要求するためにレスポンスに WWW-Authenticate ヘッダを
設定し、例外 WEBrick::HTTPStatus::Unauthorized を発生させます。

@param request [[c:WEBrick::HTTPRequest]] のインスタンスを指定します。

@param response [[c:WEBrick::HTTPResponse]] のインスタンスを指定します。

@raise WEBrick::HTTPStatus::Unauthorized このメソッドを呼ぶと必ず発生します。

--- qop -> String

Qop キーの値を返します。


