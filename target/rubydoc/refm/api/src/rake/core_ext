
= reopen Module

== Public Instance Methods

--- rake_extension(method){ ... } -> ()

与えられたブロック内で既に存在するメソッドを再定義しようとした場合に
警告を表示します。この場合、ブロックは評価されません。

@param method ブロック内で再定義する予定のメソッド名を指定します。

예:
   class String
     rake_extension("xyz") do
       def xyz
         ...
       end
     end
   end


= reopen String

== Public Instance Methods

--- ext(newext = '') -> String

自身の拡張子を与えられた拡張子で置き換えます。

自身に拡張子が無い場合は、与えられた拡張子を追加します。
与えられた拡張子が空文字列の場合は、自身の拡張子を削除します。

@param newext 新しい拡張子を指定します。

--- pathmap(spec = nil){ ... } -> String

与えられた書式指定文字列に応じてパス(自身)を変換します。

与えられた書式指定文字列は変換の詳細を制御します。
指定できる書式指定文字列は以下の通りです。

: %p
  完全なパスを表します。: %f
  拡張子付きのファイル名を表します。ディレクトリ名は含まれません。: %n
  拡張子なしのファイル名を表します。: %d
  パスに含まれるディレクトリのリストを表します。: %x
  パスに含まれるファイルの拡張子を表します。拡張子が無い場合は空文字列を表します。: %X
  拡張子以外すべてを表します。: %s
  定義されていれば、代替のファイルセパレータを表します。  定義されてい無い場合は、標準のファイルセパレータを表します。: %%
  パーセント自身を表します。


%d は数値のプレフィクスを取ることができます。

예:
   'a/b/c/d/file.txt'.pathmap("%2d")   => 'a/b'
   'a/b/c/d/file.txt'.pathmap("%-2d")  => 'c/d'

また、%d, %p, %f, %n, %x, %X には単純な文字列置換を行うための
置換パターンを表すパラメータを指定することが出来ます。
パターンと置換文字列はコンマで区切り全体を中括弧でくくります。
置換指定は、% と指示子の間に置きます。(例: "%{old,new}d")
複数の置換を行う場合はパターンをセミコロンで区切ってください。
(例: "%{old,new;src,bin}d")

正規表現や後方参照をパターンとして使用することがあるかもしれません。
中括弧、コンマ、セミコロンはパターンと置換文字列に使用しないでください。

예:
    "src/org/onestepback/proj/A.java".pathmap("%{^src,bin}X.class")
    #=> "bin/org/onestepback/proj/A.class"

置換文字列に '*' を指定した場合は、置換文字列を計算するためにブロックを評価します。

예:

   "/path/to/file.TXT".pathmap("%X%{.*,*}x") { |ext| ext.downcase }
   #=> "/path/to/file.txt"


== Protected Instance Methods

--- pathmap_explode -> Array

自身をパスを表す部分ごとに分解して配列にして返します。

@see [[m:String#pathmap]]

--- pathmap_partial(n) -> String

自身から与えられた階層分パスを抜粋します。

与えられた数値が正である場合は左から、負である場合は右から抜粋します。

--- pathmap_replace(patterns){ ... } -> String

与えられたパスを前もって置き換えます。

@param patterns 'pat1,rep1;pat2,rep2;...' のような形式で置換パターンを指定します。


= reopen Kernel
include RakeFileUtils

== Private Instance Methods

--- task(*args){ ... } -> Rake::Task

Rake タスクを定義します。

@param args タスク名と依存タスクを指定します。

예:
  task :clobber => [:clean] do
    rm_rf "html"
  end

@see [[m:Rake::Task.define_task]]


--- file(*args){ ... } -> Rake::FileTask

ファイルタスクを定義します。

@param args ファイル名と依存ファイル名を指定します。

예:
   file "config.cfg" => ["config.template"] do
     open("config.cfg", "w") do |outfile|
       open("config.template") do |infile|
         while line = infile.gets
           outfile.puts line
         end
       end
     end
   end

@see [[m:Rake::Task.define_task]]

--- file_create(*args){ ... } -> Rake::FileCreationTask

ファイルを作成するタスクを定義します。

主に [[m:Kernel.#directory]] を定義するために使用します。

--- directory(dir) -> ()

与えられたディレクトリを作成するタスクを定義します。

@param dir 作成するディレクトリを指定します。

예:
  directory 'testdata/doc'


--- multitask(args){ ... } -> Rake::MultiTask

事前タスクを並列実行するタスクを定義します。

与えられた事前タスクを実行する順序は不定です。

예:
  multitask :deploy => [:deploy_gem, :deploy_rdoc]

--- namespace(name = nil){ ... } -> Rake::NameSpace

新しい名前空間を作成します。

与えられたブロックを評価する間は、その名前空間を使用します。

예:
   ns = namespace "nested" do
     task :run
   end
   task_run = ns[:run] # find :run in the given namespace.

@see [[m:Rake::TaskManager#in_namespace]]

--- rule(*args){|t| ... } -> Rake::Task

自動的に作成するタスクのためのルールを定義します。

@param args ルールに与えるパラメータを指定します。

예:
  rule '.o' => '.c' do |t|
    sh %{cc -o #{t.name} #{t.source}}
  end

--- desc(description) -> String

直後の Rake タスクの説明を登録します。

@param description 直後のタスクの説明を指定します。

예:
   desc "Run the Unit Tests"
   task :test => [:build]
     runtests
   end

--- import(*filenames)

分割された Rakefile をインポートします。

インポートされたファイルは、現在のファイルが完全にロードされた後でロードされます。
このメソッドはインポートするファイルのどこで呼び出されてもかまいません。
また、インポートされるファイル内に現れるオブジェクトはインポートするファイル内で定義
されているオブジェクトに依存していてもかまいません。

このメソッドは依存関係を定義したファイルを読み込むのによく使われます。

@param filenames インポートする Rakefile を指定します。

예:
   import ".depend", "my_rules"


= reopen FileUtils

== Public Instance Methods

--- sh(*cmd){|result, status| ... }

与えられたコマンドを実行します。

与えられた引数が複数の場合、シェルを経由しないでコマンドを実行します。

@param cmd 引数の解釈に関しては [[m:Kernel.#exec]] を参照してください。


예:
   sh %{ls -ltr}
   
   sh 'ls', 'file with spaces'
   
   # check exit status after command runs
   sh %{grep pattern file} do |ok, res|
     if !ok
       puts "pattern not found (status = #{res.exitstatus})"
     end
   end

@see [[m:Kernel.#exec]], [[m:Kernel.#system]]


--- ruby(*args){|result, status| ... }

与えられた引数で Ruby インタプリタを実行します。

@param args Ruby インタプリタに与える引数を指定します。

예:
   ruby %{-pe '$_.upcase!' <README}

@see [[m:Kernel.#sh]]

--- safe_ln(*args)

安全にリンクを作成します。

リンクの作成に失敗した場合はファイルをコピーします。

@param args [[m:FileUtils.#cp]], [[m:FileUtils.#ln]] に渡す引数を指定します。

@see [[m:FileUtils.#cp]], [[m:FileUtils.#ln]]

--- split_all(path) -> Array

与えられたパスをディレクトリごとに分割します。

@param path 分割するパスを指定します。

예:
   split_all("a/b/c") =>  ['a', 'b', 'c']

