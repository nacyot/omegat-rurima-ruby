= module Rake::TaskManager

タスクを管理するためのモジュールです。

== Public Instance Methods

--- [](task_name, scopes = nil) -> Rake::Task

与えられたタスク名にマッチするタスクを検索します。

@param task_name タスク名を指定します。

@param scopes スコープを指定します。

--- clear

全てのタスクとルールをクリアします。

--- create_rule(*args){ ... }

与えられたパラメータに従ってルールを作成します。

@param args ルールに与えるパラメータを指定します。

--- current_scope -> Array

現在のスコープを返します。

--- define_task(task_class, *args){ ... } -> Rake::Task

태스크를 정의합니다.

@param task_class タスククラスを指定します。

@param args タスクに渡すパラメータを指定します。

--- enhance_with_matching_rule(task_name, level = 0) -> Rake::Task | nil

与えられたタスク名にマッチしたルールが存在する場合は、そのタスクに見つかったルールの
事前タスクとアクションを追加して返します。

@param task_name タスクの名前を指定します。

@param level 現在のルール解決のネストの深さを指定します。

@raise RuntimeError ルールの解決時にオーバーフローした場合に発生します。

--- in_namespace(name){|name_space| ... } -> Array

与えられた名前の名前空間でブロックを評価します。

@param name 名前を指定します。


--- intern(task_class, task_name) -> Rake::Task

タスクを検索します。

タスクが見つかれば見つかったタスクを返します。
見つからなければ、与えられた型のタスクを作成して返します。

@param task_class タスクのクラスを指定します。

@param task_name タスクの名前を指定します。

--- last_description -> String
--- last_comment -> String

Rakefile 内の最新の詳細説明を追跡するためのメソッドです。

--- last_description=(description)

最新の詳細説明をセットします。

--- lookup(task_name, initial_scope = nil) -> Rake::Task | nil

与えられたタスク名にマッチするタスクを検索します。

このメソッドは、ファイルタスクやルールを合成せずにタスクを探します。
特別なスコープ ('^' など) が存在します。スコープが省略された場合は
現在のスコープを使用します。

@param task_name タスク名を指定します。

@param initial_scope 検索するスコープを指定します。

--- resolve_args(args) -> Array

タスクやルールに与えられたパラメータを解釈します。

@param args パラメータを指定します。

@return [task_name, arg_name_list, prerequisites] を返します。

--- synthesize_file_task(task_name) -> Rake::FileTask | nil

与えられたタスク名をもとにファイルタスクを合成します。

@param task_name タスク名を指定します。

@return 与えられたタスク名と同名のファイルが存在する場合は、ファイルタスクを作成して返します。        그렇지 않으면 nil을 리턴합니다.

@raise RuntimeError タスクを合成できなかった場合に発生します。

--- tasks -> Array

全てのタスクリストを返します。
