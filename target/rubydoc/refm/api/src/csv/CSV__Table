#@since 1.9.1
= class CSV::Table < Object
extend Forwardable
include Enumerable

[[c:CSV::Table]] は CSV ドキュメントを表す二次元のデータ構造です。
行単位や列単位の操作を行うことが出来ます。また必要であれば CSV に
戻すこともできます。

ヘッダ行の処理が有効である場合、[[c:CSV]] から返されるテーブルは全てこのクラスから
構築されます。

以下のメソッドを [[c:Array]] に委譲します。

  * [[m:Array#empty?]]
  * [[m:Array#length]]
  * [[m:Array#size]]

=== 접근 모드

以下の三種類のモードがあります。

: :col_or_row
  기본값은 이 모드입니다.このマニュアル内ではミックスモードと呼んでいます。  行単位でアクセスするか列単位でアクセスするか自動的に判断します。: :row
  행 모드テーブルに行単位でアクセスします。: column
  열 모드テーブルに列単位でアクセスします。

== Singleton Methods

--- new(array_of_rows) -> CSV::Table

객체를 초기화합니다.

全ての行が同じヘッダを持つことを仮定しています。

@param array_of_rows [[c:CSV::Row]] のインスタンスの配列を指定します。


== Instance Methods

--- <<(row_or_array) -> self

自身の最後に新しい行を追加します。

@param row_or_array [[c:CSV::Row]] のインスタンスか配列を指定します。                    配列を指定した場合は [[c:CSV::Row]] に変換されます。

@return メソッドチェーンのために自身を返します。

--- ==(other) -> bool

自身の全ての行が比較対象と同じである場合は真を返します。그렇지 않으면 false를 리턴합니다.

@param other [[c:CSV::Table]] を指定します。

--- [](index_or_header) -> object

ミックスモードでは、このメソッドは引数に行番号を指定すれば行単位で動作
し、ヘッダの名前を指定すれば列単位で動作します。

このメソッドを呼び出す前に [[m:CSV::Table#by_col!]] を呼び出すとカラム
モードになります。また [[m:CSV::Table#by_row!]] を呼び出すとロウモード
になります。

@param index_or_header 行番号かヘッダの名前を指定します。

@return 値の配列を返します。この配列を変更しても元のデータには何の影響
        もありません。

--- []=(index_or_header, value)

ミックスモードでは、このメソッドは引数に行番号を指定すれば行単位で動作
し、ヘッダの名前を指定すれば列単位で動作します。

このメソッドを呼び出す前に [[m:CSV::Table#by_col!]] を呼び出すとカラム
モードになります。また [[m:CSV::Table#by_row!]] を呼び出すとロウモード
になります。

行には配列か [[c:CSV::Row]] のインスタンスを指定します。

列に値を一つだけ指定した場合は、全ての行にその値をコピーします。配列を
指定した場合は、上から順に値を割り当てます。余分な値は無視します。また、
値が不足している場合は nil を割り当てます。

既存の行または列のデータを上書きします。
新しい列を追加する場合は、右端に列を追加します。

@param index_or_header 行番号かヘッダの名前を指定します。

@param value 값을 지정합니다.

--- by_col -> CSV::Table

カラムモードになっている新しい [[c:CSV::Table]] オブジェクトを返します。

元のテーブルモードを変更せずにメソッドチェーンできるので便利です。しか
し、大きなデータセットに対しても同じだけメモリを消費するので気をつけて
ください。

このメソッドは複製したテーブルを返すので、破壊的なメソッドはメソッド
チェーンに組込まないようにしてください。

--- by_col!-> self

自身をカラムモードに変更します。

再びモードが変更されるまで、いくつかのメソッドはカラム単位で動きます。

@return 必ず自身を返すので安全にメソッドチェーンできます。

--- by_col_or_row -> CSV::Table

ミックスモードになっている新しい [[c:CSV::Table]] オブジェクトを返します。

元のテーブルモードを変更せずにメソッドチェーンできるので便利です。しか
し、大きなデータセットに対しても同じだけメモリを消費するので気をつけて
ください。

このメソッドは複製したテーブルを返すので、破壊的なメソッドはメソッド
チェーンに組込まないようにしてください。

--- by_col_or_row!-> self

自身をミックスモードに変更します。

再びモードが変更されるまで、いくつかのメソッドはミックスモードで動きます。

デフォルトのミックスモードではインデックスによるアクセスは行単位での参
照であると見なします。しかし、他の方法ではヘッダによる列単位での参照で
あると見なします。

@return 必ず自身を返すので安全にメソッドチェーンできます。

--- by_row -> CSV::Table

ロウモードになっている新しい [[c:CSV::Table]] オブジェクトを返します。

元のテーブルモードを変更せずにメソッドチェーンできるので便利です。しか
し、大きなデータセットに対しても同じだけメモリを消費するので気をつけて
ください。

このメソッドは複製したテーブルを返すので、破壊的なメソッドはメソッド
チェーンに組込まないようにしてください。

--- by_row!-> self

自身をロウモードに変更します。

再びモードが変更されるまで、いくつかのメソッドは行単位で動きます。

@return 必ず自身を返すので安全にメソッドチェーンできます。

--- delete(index_or_header) -> object

指定された行か列を削除して返します。

デフォルトのミックスモードではインデックスによるアクセスは行単位での参
照であると見なします。しかし、他の方法ではヘッダによる列単位での参照で
あると見なします。

探索方法を変更したい場合は [[m:CSV::Table#by_col!]],
[[m:CSV::Table#by_row!]] を使用してください。

@see [[m:CSV::Table#by_col!]], [[m:CSV::Table#by_row!]]

--- delete_if{|row| ... } -> self
--- delete_if{|column_name, values| ... } -> self

ブロックを評価した結果が真である行か列を削除します。

デフォルトのミックスモードかロウモードでは、行単位で繰り返します。カラ
ムモードでは、ブロックに列名と対応する値の配列を与え、列単位で繰り返し
ます。

--- each{|header, field| ... } -> self
--- each{|column_name, values| ... } -> self

デフォルトのミックスモードかロウモードでは、行単位で繰り返します。カラ
ムモードでは、ブロックに列名と対応する値の配列を与え、列単位で繰り返し
ます。

--- empty?-> bool

[[m:Array#empty?]] に委譲します。

--- headers -> Array

自身のヘッダ行を返します。

テーブルが空である場合は空の配列を返します。

--- inspect -> String

モードとサイズを US-ASCII な文字列で返します。

예:
  require 'csv'
  csv = CSV.new("a,b,c\n1,2,3", headers: true)
  table = csv.read
  table.inspect # => "#<CSV::Table mode:col_or_row row_count:2>"


--- length -> Fixnum
--- size -> Fixnum

[[m:Array#length]], [[m:Array#size]] に委譲します。

--- mode -> Symbol

현재 접근 모드를 리턴합니다.

--- push(*rows) -> self

複数の行を追加するためのショートカットです。

@param rows [[c:CSV::Rows]] のインスタンスか配列を指定します。

아래와 같이 사용합니다.
  csv = CSV.new("a,b,c\n,1,2,3", headers: true)
  table = csv.read
  rows = [[4, 5, 6], [7, 8, 9]]
  rows.each{|row| table << row }

--- to_a -> [Array]

配列の配列を返します。

一番目の要素はヘッダで、残りの要素はデータを表わします。

--- to_csv(options = Hash.new) -> String
--- to_s(options = Hash.new) -> String

CSV の文字列に変換して返します。

ヘッダを一行目に出力します。その後に残りのデータを出力します。

デフォルトでは、ヘッダを出力します。オプションに :write_headers =>
false を指定するとヘッダを出力しません。

예:
  csv = CSV.new("a,b,c\n,1,2,3", headers: true)
  table = csv.read
  table.to_csv                       # => "a,b,c\n1,2,3\n"
  table.to_csv(write_headers: false) # => "1,2,3\n"

--- values_at(indices_or_headers) -> Array

デフォルトのミックスモードでは、インデックスのリストを与えると行単位の
参照を行い、行の配列を返します。他の方法は列単位の参照と見なします。行
単位の参照では、返り値は行ごとの配列を要素に持つ配列です。

探索方法を変更したい場合は [[m:CSV::Table#by_col!]],
[[m:CSV::Table#by_row!]] を使用してください。

アクセスモードを混在させることはできません。

@see [[m:CSV::Table#by_col!]], [[m:CSV::Table#by_row!]]

== Protected Instance Methods

--- table -> Array

同値性を比較するために内部的に使用します。

#@end
