= class Vector < Object
#@since 1.9.2
include Enumerable
#@end
#@# [2002-04-03]  by [[unknown:すす|URL:mailto:sugawah@attglobal.net]]

数 [[c:Numeric]] を要素とするベクトルを扱うクラスです。
[[c:Vector]] オブジェクトは [[c:Matrix]] オブジェクトとの演算においては列ベクトルとして扱われます。

ベクトルの要素のインデックスは 0 から始まることに注意してください。

#@# ((-Vectorクラスには英語のドキュメントがほとんどないので、英語の方も補ってみました。とりあえず対訳にしておいて、そのうち、英語版を分離します。-))

#@#=== 使い方　Usage

#@#Vectorクラスを使うためには、require 'matrix'する必要があります。

#@#  require 'matrix'

=== Complexクラスとの併用 Working with Complex class

require 'complex' することによって、
Vector オブジェクトの要素は [[c:Complex]] クラスに拡張されます。
多くのメソッドは、この拡張されたVectorクラスでも、期待通りに動作します。

次の例は、各要素を共役複素数に置換するメソッド (Vector#conjugate)です。

  require 'matrix'
  require 'complex'
  
  class Vector
    def conjugate
      collect{|e| e.conjugate }
    end
  end
  
  v1 = Vector[Complex(1,1),Complex(2,2),Complex(3,3)]
  v2 = v1.conjugate
  p v2 #=> Vector[Complex(1,-1),Complex(2,-2),Complex(3,-3)]
  v3 = v1+v2
  p v3 #=> Vector[Complex(1,0),Complex(2,0),Complex(3,0)]


しかし、Complex 要素に拡張された Vector クラスで、
期待通りに動作しないメソッドもあります。
例えば、ベクトルの絶対値を求める [[m:Vector#r]] メソッドは、
各要素の2乗和の平方根 [[m:Math.#sqrt]] を求めますが、
このとき例外を発生させる可能性があります。

複素数を要素とするベクトルの絶対値を求めるためには、
各要素の絶対値の2乗和をとらなくてはなりません(次の例 Vector#absメソッド）。

  require 'matrix'
  require 'complex'
  
  class Vector
    def abs
      r=0
      @elements.each{|e| r += e.abs2 }
      Math.sqrt(r)
    end
  end
  
  v = Vector[Complex(1,1),Complex(2,2),Complex(3,3)}
  p v.abs #=> 5.291502622 # Math.sqrt(28)
  p v.r   #=> 'sqrt': undefined method `Rational'

#@#=== ChangeLog
#@#
#@#  *[2002-04-03] by [[unknown:すす|URL:mailto:sugawah@attglobal.net]]
#@#    * 使い方の節を追加
#@#    * Working with Complex classの節を追加
#@#    * []=メソッドを追加
#@#    * イテレータ関係を同じ節にまとめた collect, map, each2, collect2, map2
#@#    * 誤りを訂正し、説明を直した。 とくにeach2, collect2, map2
#@#    * 他クラスへのリンクを追加 Numeric, Matrix
#@#  *[2002-04-02] 初版 by [[unknown:すす|URL:mailto:sugawah@attglobal.net]]


== Class Methods

--- [](*a) -> Vector

可変個引数を要素とするベクトルを生成します。

Vector[a1, a2, a3, ... ]としたとき、 引数a1, a2, a3, ... を要素とするベクトルを生成します。

@param a ベクトルの要素

예:

  v1 = Vector[1, 3, 5, 7]
  v2 = Vector[5.25, 10.5]
  p v1   #=> Vector[1, 3, 5, 7]
  p v2   #=> Vector[5.25, 10.5]

--- elements(a, copy = true) -> Vector

配列 a を要素とするベクトルを生成します。
ただし、オプション引数 copy が偽 (false) ならば、複製を行いません。

@param a     [[c:Vector]]を生成する際の要素の配列
@param copy  引数の配列 a のコピーをするかどうかのフラグ

예:

  a = [1, 2, 3, 4]
  v1 = Vector.elements(a, true)
  v2 = Vector.elements(a, false)
  p v1        #=> Vector[1, 2, 3, 4]
  p v2        #=> Vector[1, 2, 3, 4]
  a[0] = -1
  p v1        #=> Vector[1, 2, 3, 4]
  p v2        #=> Vector[-1, 2, 3, 4]


== Instance Methods

--- [](i) -> object | nil
#@if (version >= "1.9.1")
--- element(i) -> object | nil
--- component(i) -> object | nil
#@end
i 番目の要素を返します。インデックスは 0 から開始します。
要素が存在しないインデックスを指定した時には nil を返します。

@param i 取得する要素のインデックスを整数値で指定します。         インデックスは 0 から始めます。

#@# for internal use
#@# --- init_elements(array, copy) -> Array
#@# ベクトルの要素を引数 array で初期化します。
#@# 
#@# @param array ベクトルとして初期化する Array を指定します。
#@# @param copy  引数array で渡された配列をコピーするかをtrue/falseで指定します。
#@#              true の場合はコピーします。

--- size() -> Fixnum

ベクトルの要素数(次元)を返します。

#@#--- []=(i, x)
#@#
#@#i 番目の要素を x に変更します。#@#
#@#このメソッドは、matrix.rb に定義されていません。#@#以下に、その定義と使用例を示します。#@#
#@#  require 'matrix'
#@#  
#@#  class Vector
#@#    def []=(i,x)
#@#      @elements[i]=x
#@#    end
#@#  end
#@#  
#@#  v=Vector[1,2,3]
#@#  v[2]=-1
#@#  p v #=> Vector[1,2,-1]

--- ==(v) -> bool
--- eql?(v) -> bool

自分自身と引数 v を比較し、true/false を返します。

@param v 比較対象ベクトル


#@# for internal use
#@# --- compare_by(elements) -> bool
#@# 
#@# 自分自身と引数 elements を配列として比較します。
#@# 
#@# @param elements 比較する配列。
#@# @return 比較結果が(配列として)同じものあったときは true をそれ以外は false を返します。

--- *(other) -> Vector

self の各要素に数 other を乗じたベクトルを返します。

@param other self の各要素に掛ける [[c:Numeric]] オブジェクトを指定します。

예:

  a = [1, 2, 3.5, 100]
  v1 = Vector.elements(a)
  p v1.*(2)     #=> Vector[2, 4, 7.0, 200]
  p v1.*(-1.5)  #=> Vector[-1.5, -3.0, -5.25, -150.0]

--- *(m) -> Matrix

自分自身を列ベクトル(行列)に変換して (実際には [[m:Matrix.column_vector]](self) を適用) から、行列 m を右から乗じた行列 ([[c:Matrix]] クラス) を返します。

@param m 右から乗算を行う行列
@raise ExceptionForMatrix::ErrDimensionMismatch 次元が合わない場合に発生します

===== 주의

引数の行列 m は自分自身を列ベクトルとした場合に乗算が定義できる行列である必要があります。

예:
  require 'matrix'

  v = Vector[1, 2]
  a = [4, 5, 6]
  m = Matrix[a]

  p v * m #=> Matrix[[4, 5, 6], [8, 10, 12]]

--- +(v) -> Vector | Matrix

self にベクトル v を加えたベクトルを返します。

v には column_size が 1 の [[c:Matrix]] オブジェクトも指定できます。
その場合は返り値も [[c:Matrix]] オブジェクトになります。

@param v 加算するベクトル。加算可能な行列やベクトルを指定します。

@raise ExceptionForMatrix::ErrDimensionMismatch 自分自身と引数のベクト
       ルの要素の数(次元)が異なっていたときに発生します。

--- -(v) -> Vector | Matrix

self からベクトル v を減じたベクトルを返します。

v には column_size が 1 の [[c:Matrix]] オブジェクトも指定できます。
その場合は返り値も [[c:Matrix]] オブジェクトになります。

@param v 減算するベクトル。減算可能な行列やベクトルを指定します。

@raise ExceptionForMatrix::ErrDimensionMismatch 自分自身と引数のベクト
       ルの要素の数(次元)が異なっていたときに発生します。

--- inner_product(v) -> Float

ベクトル v との内積を返します。

@param v 内積を求めるベクトル

@raise ExceptionForMatrix::ErrDimensionMismatch 自分自身と引数のベクト
       ルの要素の数(次元)が異なっていたときに発生します。

#@since 1.9.2
--- /(other) -> Vector

self の各要素を数 other で割った行列を返します。

@param other self の各要素を割る [[c:Numeric]] オブジェクトを指定します。
@raise ExceptionForMatrix::ErrOperationNotDefined other が Vector や Matrix 
       の場合に発生します
#@end

--- r -> Float
#@since 1.9.3
--- magnitude -> Float
--- norm -> Float
#@end

ベクトルの大きさ（ノルム）を返します。 
ただし、要素の自乗和の平方根（Math.sqrt）を計算しているので、
複素ベクトルの場合は一般に正しい値（要素の絶対値自乗の和の平方根）
を返しません。

 Vector[3, 4].r # => 5.0
 Vector[Complex(0, 1), 0].r # => Complex(0.0, 1.0)   正しくは 1.0

要素が複素数の場合にも対応したメソッドは以下のように定義できます。

  class Vector
    def norm
      Math.sqrt @elements.inject(0){|sum, z| sum+(z*z).abs}
    end
  end
  
  Vector[Complex(0, 1), 0].norm # => 1.0

#@# 2.0 以降ではC^nの場合でも正しい norm を返す予定(2012-10-07)

#@since 1.9.3
--- normalize -> Vector
自身を [[m:Vector#norm]] で正規化したベクトルを返します。

[[m:Vector#norm]] を使うため複素ベクトルでは一般に正しい値を返しません。

@raise Vector::ZeroVectorError ベクトルが0である場合に発生します。

#@end

--- collect {|x| ... } -> Vector
--- map {|x| ... } -> Vector
#@since 1.9.2
--- collect -> Enumerator
--- map -> Enumerator
#@end

ベクトルの各要素に対してブロックを評価した結果を、要素として持つベクトルを生成します。

#@since 1.9.2
ブロックを省略した場合は [[c:Enumerator]] を返します。#@end

예:

  a = [1, 2, 3.5, -10]
  v1 = Vector.elements(a)
  p v1 #=> Vector[1, 2, 3.5, -10]
  v2 =  v1.map{|x|
    x * -1
  }
  p v2 #=> Vector[-1, -2, -3.5, 10]

#@since 1.9.2
--- each{|e| ... } -> self
--- each -> Enumerator
ベクトルの各要素をブロックの引数として順にブロックを呼び出します。

このクラスは [[c:Enumerable]] を include しているため、
このメソッドを経由して Enumerable の各メソッドを使うことができます。

ブロックを省略した場合は [[c:Enumerator]] を返します。

#@end

--- each2(v) {|x, y| ... } -> self
#@since 1.9.2
--- each2(v) -> Enumerator
#@end

ベクトルの各要素と、それに対応するインデックスを持つ引数 v の要素との組に対して (2引数の) ブロックを繰返し評価します。

v は配列互換(size メソッドと [] メソッドを持つ)オブジェクトです。
[[c:Vector]] も使えます。

#@since 1.9.2
ブロックを省略した場合は [[c:Enumerator]] を返します。#@end

@param v 各要素と組を取るためのオブジェクト
@raise ExceptionForMatrix::ErrDimensionMismatch 自分自身と引数のベクト
       ルの要素の数(次元)が異なっていたときに発生します。@see [[m:Array#zip]]

--- collect2(v) {|x, y| ... } -> Array
#@since 1.9.2
--- collect2(v) -> Enumerator
#@end

ベクトルの各要素と引数 v の要素との組に対してブロックを評価し、その結果を要素として持つ配列を返します。

ベクトルの各要素と、それに対応するインデックスを持つ引数 v (ベクトル or 配列)の要素との組に対して (2引数の) ブロックを評価し、その結果を要素として持つ配列を返します。

#@since 1.9.2
ブロックを省略した場合は [[c:Enumerator]] を返します。#@end

@param v ブロック内で評価される(ベクトル or 配列)

@raise ExceptionForMatrix::ErrDimensionMismatch 自分自身と引数のベクト
       ルの要素の数(次元)が異なっていたときに発生します。

@see [[m:Vector#map2]]

次の例は、２つのベクトルの要素毎の積を要素とする配列を生成します。

예:

  require 'matrix'
  
  v1 = Vector[2, 3, 5]
  v2 = Vector[7, 9, 11]
  a = Array[7, 9, 11]

  z = v1.collect2(v2){|x, y| x * y }
  p z #=> [14, 27, 55]

  z = v1.collect2(a) {|x, y| x * y } # ArrayでもOK
  p z #=> [14, 27, 55]

--- map2(v) {|x, y| ... } -> Vector

ベクトルの各要素と引数 v の要素との組に対してブロックを評価し、その結果を要素として持つベクトルを返します。

ベクトルの各要素と、それに対応するインデックスを持つ引数 (ベクトル or 配列) の要素との組に対して (2引数の) ブロックを評価した結果を、要素として持つベクトルを返します。

#@since 1.9.2
ブロックを省略した場合は [[c:Enumerator]] を返します。#@end

@param v ブロック内で評価される(ベクトル or 配列)

@raise ExceptionForMatrix::ErrDimensionMismatch 自分自身と引数のベクト
       ルの要素の数(次元)が異なっていたときに発生します。

@see [[m:Vector#collect2]]

次の例は、２つのベクトルの要素毎の積を要素として持つベクトルを生成します。

예:

  require 'matrix'
  
  v1 = Vector[2, 3, 5]
  v2 = Vector[7, 9, 11]
  a = Array[7, 9, 11]

  z = v1.map2(v2) {|x, y| x * y }
  p z #=> Vector[14, 27, 55]

  z = v1.map2(a) {|x, y| x * y } # ArrayでもOK
  p z #=> Vector[14, 27, 55]

--- covector -> Matrix
[[c:Matrix]] オブジェクトへ変換します。

列ベクトル (行列)、すなわち、(n, 1) 型の行列に変換します。
実際には [[m:Matrix.row_vector]](self) を適用します。

예:

  require 'matrix'

  v = Vector[2, 3, 5]
  p v #=> Vector[2, 3, 5]
  m = v.covector
  p m #=> Matrix[[2, 3, 5]]

--- to_a -> Array

ベクトル([[c:Vector]])から配列 ([[c:Array]]) に変換します。

예:

  require 'matrix'

  v = Vector[2, 3, 5, 7, 9]
  a = v.to_a
  p a #=> [2, 3, 5, 7, 9]

--- to_s -> String

ベクトル([[c:Vector]])から文字列 ([[c:String]]) に変換します。

예:

  require 'matrix'

  v = Vector[2, 3, 5, 7, 9]
  s = v.to_s
  p s #=> "Vector[2, 3, 5, 7, 9]"

#@since 1.9.1
--- elements_to_f -> Vector
ベクトルの各成分を[[c:Float]]に変換したベクトルを返します。

#@since 1.9.2
このメソッドは deprecated です。map(&:to_f) を使ってください。#@end

예:
  require 'matrix'

  v = Vector.elements([2, 3, 5, 7, 9])
  vf = v.elements_to_f
  p vf #=> "Vector[2.0, 3.0, 5.0, 7.0, 9.0]"

--- elements_to_i -> Vector
ベクトルの各成分を[[c:Integer]]に変換したベクトルを返します。

#@since 1.9.2
このメソッドは deprecated です。map(&:to_i) を使ってください。#@end

예:
  require 'matrix'

  v = Vector.elements([2.5, 3.0, 5.01, 7])
  vi = v.elements_to_i
  p vi #=> "Vector[2, 3, 5, 7]"

--- elements_to_r -> Vector
ベクトルの各成分を[[c:Rational]]に変換したベクトルを返します。

#@since 1.9.2
このメソッドは deprecated です。map(&:to_r) を使ってください。#@end

예:

  require 'matrix'

  v = Vector.elements([2.5, 3.0, 5.75, 7])
  vr = v.elements_to_r
  p vr #=> "Vector[Rational(5, 2), Rational(3, 1), Rational(23, 4), Rational(7, 1)]"

#@end

--- hash() -> Fixnum

自分自身のハッシュ値を返します。

--- clone() -> Vector

自分自身をコピーしたベクトルを返します。

--- inspect() -> String 

オブジェクトの内容を文字列化します。

= class ExceptionForMatrix::ErrDimensionMismatch < StandardError
= class ExceptionForMatrix::ErrNotRegular < StandardError
= class ExceptionForMatrix::ErrOperationNotDefined < StandardError

#@since 1.9.3
= class Vector::ZeroVectorError < StandardError
ベクトルが 0 でエラーとなる([[m:Vector#normalize]] など)場合に
発生する例外です。#@end