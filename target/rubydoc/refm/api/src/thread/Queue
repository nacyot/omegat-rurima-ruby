= class Queue < Object

Queue はスレッド間の FIFO(first in first out) の通信路です。ス
レッドが空のキューを読み出そうとすると停止します。キューになんら
かの情報が書き込まれると実行は再開されます。

最大サイズが指定できる Queue のサブクラス [[c:SizedQueue]] も提供されています。

=== 예

  require 'thread'

  q = Queue.new

  th1 = Thread.start do
    while resource = q.pop
      puts resource
    end
  end

  [:resource1, :resource2, :resource3, nil].each{|r|
    q.push(r)
  }

  th1.join

実行すると以下のように出力します。

  $ ruby que.rb
  resource1
  resource2
  resource3


== Class Methods

--- new -> Queue

新しいキューオブジェクトを生成します。

== Instance methods

--- clear -> ()

キューを空にします。返り値は不定です。

--- empty?-> bool

キューが空の時、真を返します。

--- length -> Fixnum
--- size -> Fixnum

キューの長さを返します。

--- num_waiting -> Fixnum

キューを待っているスレッドの数を返します。

--- pop(non_block = false) -> object
--- shift(non_block = false) -> object
--- deq(non_block = false) -> object

キューからひとつ値を取り出します。キューが空の時、呼出元のスレッドは停止します。

@param non_block true を与えると、キューが空の時に例外 [[c:ThreadError]] が発生します。

--- push(value) -> ()
--- <<(value)   -> ()
--- enq(value)  -> ()

キューの値を追加します。待っているスレッドがいれば実行を再開
させます。返り値は不定です。
