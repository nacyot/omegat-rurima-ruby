= module MiniTest::Assertions

各種 assert メソッドを提供します。

== Public Instance Methods

--- _assertions -> Fixnum

アサーション数を返します。

--- _assertions=(count)

アサーション数をセットします。

@param count 件数を指定します。

--- assert(test, message = nil) -> true

与えられた式の評価結果が真である場合、検査にパスしたことになります。

@param test 真偽値を返す式を指定します。

@param message 検査に失敗した場合に表示するメッセージを指定します。               文字列か [[c:Proc]] を指定します。[[c:Proc]] である場合は [[m:Proc#call]] した
               結果を使用します。

@raise MiniTest::Assertion 与えられた式が偽である場合に発生します。

--- assert_block(message = nil){ ... } -> true

与えられたブロックの評価結果が真である場合、検査にパスしたことになります。

@param message 検査に失敗した場合に表示するメッセージを指定します。               文字列か [[c:Proc]] を指定します。[[c:Proc]] である場合は [[m:Proc#call]] した
               結果を使用します。

@raise MiniTest::Assertion 与えられたブロックの評価結果が偽である場合に発生します。

--- assert_empty(object, message = nil) -> true

与えられたオブジェクトが空である場合、検査にパスしたことになります。

@param object 任意のオブジェクトを指定します。

@param message 検査に失敗した場合に表示するメッセージを指定します。               文字列か [[c:Proc]] を指定します。[[c:Proc]] である場合は [[m:Proc#call]] した
               結果を使用します。

@raise MiniTest::Assertion 与えられたオブジェクトが empty?메소드가 없는 경우 발생하며,                           また、与えられたオブジェクトが空でない場合にも発生します。

--- assert_equal(expected, actual, message = nil) -> true

与えられた期待値と実際の値が等しい場合、検査にパスしたことになります。

@param expected 예상값을 지정합니다.

@param actual 실제 값을 지정합니다.

@param message 検査に失敗した場合に表示するメッセージを指定します。               文字列か [[c:Proc]] を指定します。[[c:Proc]] である場合は [[m:Proc#call]] した
               結果を使用します。

@raise MiniTest::Assertion 주어진 값과 실제 값이 같지 않은 경우 발생합니다.

@see [[m:Object#==]]

--- assert_in_delta(expected, actual, delta = 0.001, message = nil) -> true

期待値と実際の値の差の絶対値が与えられた絶対誤差以下である場合、検査にパスしたことになります。

@param expected 예상값을 지정합니다.

@param actual 실제 값을 지정합니다.

@param delta 허용 오차범위를 지정합니다.

@param message 検査に失敗した場合に表示するメッセージを指定します。               文字列か [[c:Proc]] を指定します。[[c:Proc]] である場合は [[m:Proc#call]] した
               結果を使用します。

@raise MiniTest::Assertion 예상값과 실제 값의 차이가 허용 오차 범위를 벗어났을 때 발생합니다.

--- assert_in_epsilon(actual, expected, epsilon = 0.001, message = nil) -> true
#@# 使っている用語が正しくないかもしれない。
与えられた期待値と実際の値の相対誤差が許容範囲内である場合、検査にパスしたことになります。

言い換えると以下の式が真である場合、検査をパスします。

  [expected, actual].min * epsilon >= (extected - actual).abs

@param expected 예상값을 지정합니다.

@param actual 실제 값을 지정합니다.

@param epsilon 허용 상대 오차를 지정합니다.

@param message 検査に失敗した場合に表示するメッセージを指定します。               文字列か [[c:Proc]] を指定します。[[c:Proc]] である場合は [[m:Proc#call]] した
               結果を使用します。

@raise MiniTest::Assertion 테스트가 실패하면 발생합니다.

--- assert_includes(collection, object, message = nil) -> true

与えられたコレクションにオブジェクトが含まれている場合、検査にパスしたことになります。

@param collection 任意のコレクションを指定します。

@param object 任意のオブジェクトを指定します。

@param message 検査に失敗した場合に表示するメッセージを指定します。               文字列か [[c:Proc]] を指定します。[[c:Proc]] である場合は [[m:Proc#call]] した
               結果を使用します。

@raise MiniTest::Assertion 第一引数のオブジェクトが include?메소드가 없는 경우 발생하며,                           与えられたコレクションにオブジェクトが含まれていない場合に発生します。

--- assert_instance_of(klass, object, message = nil) -> true

与えられたオブジェクトが与えられたクラスの直接のインスタンスである場合、検査にパスしたことになります。

@param klass オブジェクトが直接のインタンスであることを期待するクラスを指定します。

@param object 任意のオブジェクトを指定します。

@param message 検査に失敗した場合に表示するメッセージを指定します。               文字列か [[c:Proc]] を指定します。[[c:Proc]] である場合は [[m:Proc#call]] した
               結果を使用します。

@raise MiniTest::Assertion 与えられたオブジェクトが与えられたクラスの直接のインスタンスでない
                           場合に発生します。

@see [[m:Module#===]], [[m:MiniTest::Assertions#assert_kind_of]]

--- assert_kind_of(klass, object, message) -> true

与えられたオブジェクトが与えられたクラスまたはそのサブクラスのインスタンス
である場合、検査にパスしたことになります。

@param klass オブジェクトが所属することを期待するクラスを指定します。

@param object 任意のオブジェクトを指定します。

@param message 検査に失敗した場合に表示するメッセージを指定します。               文字列か [[c:Proc]] を指定します。[[c:Proc]] である場合は [[m:Proc#call]] した
               結果を使用します。

@raise MiniTest::Assertion 与えられたオブジェクトが与えられたクラスまたはそのサブクラスの
                           インスタンスではない場合に発生します。

@see [[m:Object#kind_of?]], [[m:MiniTest::Assertions#assert_instance_of]]

--- assert_match(regexp, str, message = nil) -> true

与えられた文字列が与えられた正規表現にマッチした場合、検査にパスしたことになります。

@param regexp 正規表現か文字列を指定します。文字列を指定した場合は正規表現に変換してから
              使用します。

@param str 検査対象の文字列を指定します。

@param message 検査に失敗した場合に表示するメッセージを指定します。               文字列か [[c:Proc]] を指定します。[[c:Proc]] である場合は [[m:Proc#call]] した
               結果を使用します。

@raise MiniTest::Assertion 与えられた文字列が与えられた正規表現にマッチしなかった場合に発生します。

--- assert_nil(object, message = nil) -> true

与えられたオブジェクトが nil である場合、検査にパスしたことになります。

@param object 任意のオブジェクトを指定します。

@param message 検査に失敗した場合に表示するメッセージを指定します。               文字列か [[c:Proc]] を指定します。[[c:Proc]] である場合は [[m:Proc#call]] した
               結果を使用します。

@raise MiniTest::Assertion 与えられたオブジェクトが nil でない場合に発生します。

--- assert_operator(operand1, operator, operand2, message = nil) -> true

与えられたオブジェクトから作成する式を評価した結果が真を返す場合、検査にパスしたことになります。

@param operand1 任意のオブジェクトを指定します。

@param operator 真偽値を返すメソッドを指定します。

@param operand2 任意のオブジェクトを指定します。

@param message 検査に失敗した場合に表示するメッセージを指定します。               文字列か [[c:Proc]] を指定します。[[c:Proc]] である場合は [[m:Proc#call]] した
               結果を使用します。

@raise MiniTest::Assertion 与えられたオブジェクトから作成する式を評価した結果が真でない場合に発生します。

예:
   # 以下の二つは同じ
   assert_operator('aaa', :==, 'aaa', 'message')
   assert('aaa'.__send__(:==, 'aaa'), 'message')


--- assert_raises(*args){ ... } -> true

与えられたブロックを評価中に与えられた例外が発生する場合、検査にパスしたことになります。

@param args 与えられたブロックを評価中に発生する可能性のある例外クラスを一つ以上指定します。            最後の引数は、メッセージを指定することができます。

@raise MiniTest::Assertion 与えられたブロックを評価した結果、例外が発生しない場合に発生します。                           また、与えられたブロックを評価中に発生した例外が、与えられた例外
                           またはそのサブクラスでない場合に発生します。


--- assert_respond_to(object, method_name, message = nil) -> true

与えられたオブジェクトが与えられたメソッドを持つ場合、検査にパスしたことになります。

@param object 任意のオブジェクトを指定します。

@param method_name メソッド名を指定します。

@param message 検査に失敗した場合に表示するメッセージを指定します。               文字列か [[c:Proc]] を指定します。[[c:Proc]] である場合は [[m:Proc#call]] した
               結果を使用します。

@raise MiniTest::Assertion 与えられたオブジェクトが与えられたメソッドを持たない場合に発生します。

@see [[m:Object#respond_to?]]

--- assert_same(expected, actual, message = nil) -> true

与えられた二つのオブジェクトの [[m:Object#object_id]] が同じ場合、検査にパスしたことになります。

@param expected 任意のオブジェクトを指定します。

@param actual 任意のオブジェクトを指定します。

@param message 検査に失敗した場合に表示するメッセージを指定します。               文字列か [[c:Proc]] を指定します。[[c:Proc]] である場合は [[m:Proc#call]] した
               結果を使用します。

@raise MiniTest::Assertion 与えられた二つのオブジェクトが異なる場合に発生します。

@see [[m:Object#equal?]]

--- assert_send(array, message = nil) -> true

引数から、式を取り出して評価した結果が真の場合、検査にパスしたことになります。

@param array 第一要素にレシーバとなる任意のオブジェクト、第二要素にメソッド名、
             第三要素にパラメータをそれぞれ指定した配列を指定します。

@param message 検査に失敗した場合に表示するメッセージを指定します。               文字列か [[c:Proc]] を指定します。[[c:Proc]] である場合は [[m:Proc#call]] した
               結果を使用します。

@raise MiniTest::Assertion 取り出した式が偽を返す場合に発生します。

예:
  assert_send([%w[foo bar baz], :include?, 'baz'])

--- assert_throws(tag, message = nil){ ... } -> true

与えられたブロックを評価中に、与えられたタグが [[m:Kernel.#throw]] された場合、検査にパスしたことになります。

@param tag 与えられたブロック評価中に [[m:Kernel.#throw]] されるタグを任意のオブジェクトとして指定します。

@param message 検査に失敗した場合に表示するメッセージを指定します。               文字列か [[c:Proc]] を指定します。[[c:Proc]] である場合は [[m:Proc#call]] した
               結果を使用します。

@raise MiniTest::Assertion 与えられたタグが [[m:Kernel.#throw]] されなかった場合に発生します。

@see [[m:Kernel.#throw]]

--- capture_io{ ... } -> Array

与えられたブロックを評価中の標準出力と標準エラー出力を [[c:StringIO]] に
変更します。

@return ブロック評価中に出力された文字列を標準出力を第一要素、標準エラー出力を第二要素とした
        配列にして返します。

--- exception_details(exception, message) -> String

与えられた例外の詳細を文字列として返します。

@param exception 例外を指定します。

@param message メッセージを指定します。

--- flunk(message = nil)

必ず失敗するメソッドです。

@param message メッセージを指定します。

@raise MiniTest::Assertion 必ず発生します。

--- message(message){ ... } -> Proc

与えられたブロックを評価した結果と与えられたメッセージを連結して返します。

@param message メッセージを指定します。

--- mu_pp(object) -> String

[[m:Object#inspect]] した結果のエンコーディングを変更して返します。

エンコーディングは [[m:Encoding.default_external]] に変更されます。

@param object 任意のオブジェクトを指定します。

--- pass(message = nil) -> true

アサーション数をカウントするために使用します。

@param message 無視されます。

--- skip(message = nil, backtrace = caller)

このメソッドを呼び出したテストメソッドをスキップします。

@param message メッセージを指定します。

@param backtrace 例外発生時のスタックトレースで、[[m:Kernel.#caller]] の戻り値と同じ
                 形式で指定しなければいけません。

@raise MiniTest::Skip 必ず発生します。

@see [[m:Kernel.#raise]]
