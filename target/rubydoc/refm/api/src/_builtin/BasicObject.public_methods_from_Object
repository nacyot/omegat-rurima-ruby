--- instance_eval(expr, filename = "(eval)", lineno = 1) -> object
--- instance_eval {|obj| ... }                           -> object

オブジェクトのコンテキストで文字列 expr またはオブジェクト自身をブロックパラメータとするブロックを
評価してその結果を返します。

オブジェクトのコンテキストで評価するとは評価中の self をそのオブジェクトにして実行するということです。
また、文字列 expr やブロック中でメソッドを定義すればそのオブジェクトの特異メソッドが定義されます。

ただし、ローカル変数だけは、文字列 expr の評価では instance_eval の外側のスコープと、ブロックの評価ではそのブロックの外側のスコープと、共有します。

メソッド定義の中で instance_eval でメソッドを定義した場合は、囲むメソッドが実行されたときに
初めて instance_eval 内のメソッドが定義されます。これはメソッド定義のネストと同じです。[[ref:d:spec/def#nest_method]]를 참조해주세요.

@param expr  평가하려는 문자열입니다.

@param filename 문자열을 지정합니다.ファイル filename に文字列 expr が
                書かれているかのように実行されます。スタックトレースの
                表示などを差し替えることができます。

@param lineno 文字列を指定します。行番号 lineno から文字列 expr が書かれているかのように実行されます。              スタックトレースの表示などを差し替えることができます。

예:

  class Foo
    def initialize data
      @key = data
    end
    private
    def do_fuga
      p 'secret'
    end
  end
  
  some = Foo.new 'XXX'
  some.instance_eval{p @key} #=> "XXX"
  some.instance_eval{do_fuga } #=> "secret" # private 메소드도 호출할 수 있습니다.
  
  some.instance_eval 'raise' # ..:10: (eval):1:  (RuntimeError)
  messg = 'unknown'
  some.instance_eval 'raise messg','file.rb',999 # file.rb:999: unknown (RuntimeError)

@see [[m:Module#module_eval]], [[m:Kernel.#eval]]

#@since 1.8.7
--- instance_exec(*args) {|*vars| ... } -> object

与えられたブロックをレシーバのコンテキストで実行します。

ブロック実行中は、 self がレシーバのコンテキストになるので
レシーバの持つインスタンス変数にアクセスすることができます。

@param args ブロックパラメータに渡す値です。

   class KlassWithSecret
     def initialize
       @secret = 99
     end
   end
   k = KlassWithSecret.new
   # 以下で x には 5 が渡される
   k.instance_exec(5) {|x| @secret + x }   #=> 104

#@since 1.9.1
@see [[m:Module#class_exec]], [[m:Module#module_exec]], [[m:BasicObject#instance_eval]]
#@else
@see [[m:Module#class_exec]], [[m:Module#module_exec]], [[m:Object#instance_eval]]
#@end
#@end
