= object main

톱 레벨의 self를 나타내는 객체입니다.

main으로 접근 할 수 없습니다.톱레벨에서 self라는 이름으로 접근할 수 있습니다.

톱 레벨에서 정의한 메소드는 main 객체의 private 메소드로 정의됩니다.

--- public(*name) -> Object

메소드를 public으로 설정합니다.

引数なしのときは今後このクラスまたはモジュール定義内で新規に定義さ
れるメソッドをどんな形式でも呼び出せるように(public)設定します。

引数が与えられた時には引数によって指定されたメソッドを public に設
定します。

@param name [[c:String]] 혹은 [[c:Symbol]]를 0개 이상 지정합니다.

@raise NameError 존재하지 않은 메소드 이름을 지정하면 발생합니다.

@see [[m:Module#public]]

--- private(*name) -> Object

메소드를 private로 설정합니다.

引数が与えられた時には引数によって指定されたメソッドを private に
設定します。

引数なしのときは今後このクラスまたはモジュール定義内で新規に定義さ
れるメソッドを関数形式でだけ呼び出せるように(private)設定します。

@param name [[c:String]] 혹은 [[c:Symbol]]를 0개 이상 지정합니다.

@raise NameError 존재하지 않은 메소드 이름을 지정하면 발생합니다.

@see [[m:Module#private]]

--- to_s    -> "main"
#@since 2.0.0
--- inspect -> "main"
#@end

"main"을 리턴합니다.

#@since 2.0.0
--- include(*modules) -> self

引数 modules で指定したモジュールを後ろから順番をインクルードします。

@param mod [[c:Module]] のインスタンス( [[c:Enumerable]] など)を指定します。

@raise ArgumentError 継承関係が循環してしまうような include を行った場
                     合に発生します。

@see [[m:Module#include]]

--- using(module) -> self

引数で指定したモジュールで定義された拡張を有効にします。

有効にした拡張の有効範囲については以下を参照してください。

 * [[url:http://bugs.ruby-lang.org/projects/ruby-trunk/wiki/RefinementsSpec#Scope-of-refinements]]

@param module 有効にするモジュールを指定します。

@see [[m:Module#refine]]

[注意] refinements は 2.0 現在、実験的な機能として提供されています。以
降のバージョンで仕様が変更になる可能性があります。使用すると必ず警告が
表示されます。#@end
