= class File < IO
#@if (version < "1.8.0")
include File::Constants
#@end

파일에 접근하기 위한 클래스입니다.

일반적으로 [[m:Kernel.#open]] 또는 [[m:File.open]]을 사용해 생성합니다.
#@since 1.8.0
[[c:IO]] 클래스를 include하고 있는 [[c:File::Constants]]는 File 클래스에 관계된 상수를 저장하고 있는 모듈입니다.
#@end
[[c:File::Stat]]은 stat구조체( [[man:stat(2)]] 참조)를 나타내는 클래스입니다.


== Class Methods

--- atime(filename)    -> Time

파일에 마지막으로 접근한 시각을 리턴합니다.

@param filename 파일명을 나타내는 문자열이나 IO 객체를 지정합니다.

@raise Errno::EXXX 시각을 얻어오지 못 하면 발생합니다.

--- ctime(filename)    -> Time

마지막으로 상태가 변경된 시각을 리턴합니다.
상태의 변경이란 chmod를 통한 권한 변경과 같은 것을 이야기합니다.

@param filename 파일명을 나타내는 문자열이나 IO 객체를 지정합니다.

@raise Errno::EXXX 시각을 얻어오지 못 하면 발생합니다.

--- mtime(filename)    -> Time

마지막 갱신 시각을 리턴합니다.

@param filename 파일명을 나타내는 문자열이나 IO 객체를 지정합니다.

@raise Errno::EXXX 시각을 얻어오지 못 하면 발생합니다.

--- basename(filename, suffix = "")     -> String

filename의 맨 뒤에 있는 슬래시 뒤로 따라오는 문자열을 리턴합니다.suffix가 있는 경우엔 filename의 맨 뒤와 suffix가 일치하는지 확인하고
일치하면 일치하는 부분을 빼고 리턴합니다.

  p File.basename("ruby/ruby.c")          #=> "ruby.c"
  p File.basename("ruby/ruby.c", ".c")    #=> "ruby""
  p File.basename("ruby/ruby.c", ".*")    #=> "ruby"
  p File.basename("ruby/ruby.exe", ".*")  #=> "ruby"
  p File.basename("ruby/y.tab.c", ".*")   #=> "y.tab"

#@since 1.8.0
File.basename의 작동은 [[man:basename(3)]] 
#@#[[url:http://www.unix-systems.org/version3/online.html]]
에 따릅니다.
  p File.basename("foo/bar/")      # => "bar"
#@end

@param filename 파일명을 나타내는 문자열을 지정합니다.

@param suffix 문자열로 지정합니다.'.*'를 지정하면 '*'는 와일드 카드가 되고
              '.'을 포함하지 않는 임의의 문자열에 들어맞습니다.

@see [[m:File.dirname]], [[m:File.extname]]

--- chmod(mode, *filename)    -> Integer

파일 권한을 mode로 바꿉니다.권한이 변경된 파일 수를 리턴합ㄴ디ㅏ.

@param filename 파일명을 나타내는 문자열을 지정합니다.

@param mode [[man:chmod(2)]]와 같이 정수로 지정합니다.

@raise Errno::EXXX 권한 변경에 실패하면 발생합니다.

--- lchmod(mode, *filename)    -> Integer

[[m:File.chmod]] 메소드와 같지만 @@@

@param filename 파일명을 나타내는 문자열을 지정합니다.

@param mode [[man:chmod(2)]]와 같이 정수로 지정합니다.

@raise NotImplementedError [[man:lchmod(2)]]이 구현되어있지 않은 시스템에서 메소드를 호출하면 발생합니다.

@raise Errno::EXXX 권한 변경에 실패하면 발생합니다.

--- chown(owner, group, *filename)    -> Integer

파일의 소유자와 그룹을 변경합니다.시스템 관리자만이
파일의 소유자와 그룹을 변경할 수 있습니다.변경된 파일의 수를 리턴합니다.

@param filename 파일명을 나타내는 문자열을 지정합니다.

@param owner [[man:chown(2)]]와 마찬가지로 숫자로 지정합니다.nil이나 -1을 지정하면 소유자는 그대로 유지됩니다.

@param group [[man:chown(2)]]와 마찬가지로 숫자로 지정합니다.nil이나 -1을 지정하면 그룹은 그대로 유지됩니다.

@raise Errno::EXXX 변경에 실패하면 발생합니다.

--- lchown(owner, group, *filename)    -> Integer

[[m:File#chown]] 메소드와 같지만, @@@

@param filename 파일명을 나타내는 문자열을 지정합니다.

@param owner [[man:chown(2)]]와 마찬가지로 숫자로 지정합니다.nil이나 -1을 지정하면 소유자는 그대로 유지됩니다.

@param group [[man:chown(2)]]와 마찬가지로 숫자로 지정합니다.nil이나 -1을 지정하면 그룹은 그대로 유지됩니다.

@raise NotImplementedError [[man:lchown(2)]]가 구현되어 있지 않은 시스템에서 메소드를 호출하면 발생합니다.

--- delete(*filename)    -> Integer
--- unlink(*filename)    -> Integer

파일을 삭제합니다.삭제한 파일수를 리턴합니다.
삭제하지 못 하면 [[c:Errno::EXXX]]가 발생합니다.

일반적으로 이 메소드는 파일 삭제에 사용되고 디렉토리 삭제에는
[[m:Dir.rmdir]] 메소드를 사용합니다.

@param filename 파일명을 나타내는 문자열을 지정합니다.

@raise Errno::EXXX 작업에 실패하면 발생합니다.

--- dirname(filename)    -> String

filename의 맨 뒤에 있는 슬래시 앞의
문자열을 리턴합니다.슬래시를 포함하지 않는 파일명의 경우에는
"."(현재 디렉토리)를 리턴합니다.

    p File.dirname("dir/file.ext")    # => "dir"
    p File.dirname("file.ext")        # => "."

#@if (version >= "1.8.0")
File.dirname 메소드는 [[man:dirname(3)]]
#@#[[url:http://www.unix-systems.org/version3/online.html]] 
에 따릅니다.
    p File.dirname("foo/bar/")      # => "foo"
    p File.dirname("foo//bar")      # => "foo"
#@end

@param filename 파일명을 나타내는 문자열을 지정합니다.

@see [[m:File.basename]], [[m:File.extname]]

--- expand_path(path, default_dir = '.')    -> String

path를 절대 경로로 전개한 문자열을 리턴합니다.
path가 상대 경로이면 default_dir을 기준으로 삼습니다.

맨 앞의 ~는 홈 디렉토리(환경변수 HOME)으로 
~USER은 해당 유저의 홈 디렉토리로 치환됩니다.

  p Dir.getwd                      #=> "/home/matz/work/foo"
  p ENV["HOME"]                    #=> "/home/matz"
  p File.expand_path("..")         #=> "/home/matz/work"
  p File.expand_path("..", "/tmp") #=> "/"
  p File.expand_path("~")          #=> "/home/matz"
  p File.expand_path("~foo")       #=> "/home/foo"

@param path 경로명을 나타내는 문자열을 지정합니다.

@param default_dir path가 상대경로 이면 default_dir을 기준으로 전개합니다.

#@since 1.9.2
--- absolute_path(file_name, dir_string=nil) -> String

file_name을 절대경로로 변환한 문자열을 리턴합니다.

상대 경로이면 현재 디렉토리를 기준으로 삼습니다.
dir_string 인자가 지정되면 이 디렉토리를 기준으로 삼습니다.

[[m:File.expand_path]]와 달리 file_name 맨 앞에 ~가 있어도 전개되지 않고디렉토리 이름으로 처리됩니다.

  p Dir.getwd                      #=> "/home/matz/work/bar"
  p ENV["HOME"]                    #=> "/home/matz"
  p File.absolute_path("..")         #=> "/home/matz/work"
  p File.absolute_path("..", "/tmp") #=> "/"
  p File.absolute_path("~")          #=> "/home/matz/work/bar/~"
  p File.absolute_path("~foo")       #=> "/home/matz/work/bar/~foo"

@see [[m:File.expand_path]]

#@end

--- extname(filename)    -> String

filename의 확장자 부분을 리턴합니다.디렉토리 명에 포함된 "."이나 파일명 맨 뒤에 있는 "."이 아닌 경우에는 확장자로 보지 않습니다.filename이 확장자 부분을 포함하지 않으면
빈 문자열을 리턴합니다.

  p File.extname("foo/foo.txt")     # => ".txt"
  p File.extname("foo/foo.tar.gz")  # => ".gz"
  p File.extname("foo/bar")         # => ""
  p File.extname("foo/.bar")        # => ""
  p File.extname("foo.txt/bar")     # => ""
  p File.extname(".foo")            # => ""

@param filename 파일명을 나타내는 문자열을 지정합니다.

@see [[m:File.basename]], [[m:File.dirname]]

--- fnmatch(pattern, path, flags = 0)     -> bool 
--- fnmatch?(pattern, path, flags = 0)    -> bool

파일명이 패턴에 들어맞는지 [[man:fnmatch(3)]]로 확인합니다.
path가 pattern에 들어맞으면 true를 리턴합니다.그렇지 않으면 false를 리턴합니다.

#@since 2.0.0
@param pattern 패턴을 문자열로 리턴합니다.와일드 카드 문자로는 '*',
               '?', '[]', '{}'가 사용됩니다.
               [[m:Dir.glob]]와 달리 '**/' 문자는 사용할 수 없습니다.
#@else
@param pattern 패턴 문자열을 지정합니다.와일드 카드 문자로는 '*',
               `?', `[]'를 사용할 수 있습니다.
               [[m:Dir.glob]]와 달리 '{}'이나 `**/' 문자는 사용할 수 없습니다.
#@end
//emlist{
    %w(foo foobar bar).each {|f|
      p File.fnmatch("foo*", f)
    }
    # => true
         true
         false
//}

@param path 경로명을 나타내는 문자열을 지정합니다.

@param flags 패턴이 들어맞는지 확인할 때 사용할 옵션을 아래 상수의 논리합으로 지정합니다.
             flags 기본 설정값은 아무것도 옵션도 없는 상태인 0입니다.

인수 flags에 지정가능한 상수는 아래와 같습니다.
이 상수들은 [[c:File::Constants]]에 정의되어있습니다만
[[c:File]] 클래스의 부모 클래스인 IO가 [[c:File::Constants]]를 include하고 있으므로
이 상수들은 File::FNM_NOESCAPE와 같이 참조할 수 있습니다.

: FNM_NOESCAPE
 이스케이프 문자 '\'을 다른 문자와 같이 취급합니다.

 기본적으로 \에 따라오는 문자는 따라오는 문자에 들어맞지만
 이 플래그를 설정하면 \가 일반적인 문자와 같이 취급됩니다.
//emlist{
  p File.fnmatch('\a', 'a')                       # => true
  p File.fnmatch('\a', '\a', File::FNM_NOESCAPE)  # => true
//}
 앞의 *은 이스케이프되어 * 문자 자체에 일치
 합니다.
//emlist{
  p File.fnmatch('\*', 'a')                       # => false
  p File.fnmatch('\*', '\a', File::FNM_NOESCAPE)  # => true
//}
  \ 단일 문자는 이 옵션에 관계 없이 \에 일치합니다.
  (홑따옴표 문자열에산 \\에 \임에 주의가 필요합니다.
  p File.fnmatch('\\', '\\')                      # => true
  p File.fnmatch('\\', '\\', File::FNM_NOESCAPE)  # => true
//}

: FNM_PATHNAME
 ワイルドカード `*', `?', `[]' が `/' にマッチしなくなります。 シェルのパターンマッチにはこのフラグが使用されています。//emlist{
  p File.fnmatch('*', '/', File::FNM_PATHNAME)   # => false
  p File.fnmatch('?', '/', File::FNM_PATHNAME)   # => false
  p File.fnmatch('[/]', '/', File::FNM_PATHNAME) # => false
//}

: FNM_CASEFOLD
 アルファベットの大小文字を区別せずにパターンマッチを行います。//emlist{
  p File.fnmatch('A', 'a', File::FNM_CASEFOLD)   # => true
//}

: FNM_DOTMATCH
 ワイルドカード `*', `?', `[]' が先頭の `.' にマッチするようになります。//emlist{
  p File.fnmatch('*', '.', File::FNM_DOTMATCH)           # => true
  p File.fnmatch('?', '.', File::FNM_DOTMATCH)           # => true
  p File.fnmatch('[.]', '.', File::FNM_DOTMATCH)         # => true
  p File.fnmatch('foo/*', 'foo/.', File::FNM_DOTMATCH)   # => true
//}

#@since 2.0.0
: FNM_EXTGLOB
 {} 内のコンマで区切られた文字列の組合せにマッチするようになります。 例えば、foo{a,b,c} は fooa, foob, fooc に展開されそれぞれに対してマッ
 チ判定を行います。

 중괄호는 중첩해서 사용할 수 있습니다.예를 들어 {foo,bar{foo,bar}}는 foo,
 barfoo, barbar のそれぞれにマッチします。//emlist{
  p File.fnmatch('foo{a,b,c}', 'fooa', File::FNM_EXTGLOB)           # => true
  p File.fnmatch('{foo,bar{foo,bar}}', 'barfoo', File::FNM_EXTGLOB) # => true
//}
#@end

--- ftype(filename)    -> String

ファイルのタイプを表す文字列を返します。

文字列は以下のうちのいずれかです。File.lstat(filename).ftype と同じです。
シンボリックリンクに対して "link" を返します。

 * "file"
 * "directory"
 * "characterSpecial"
 * "blockSpecial"
 * "fifo"
 * "link"
 * "socket"
 * "unknown"

@param filename 파일명을 나타내는 문자열을 지정합니다. 

@raise Errno::EXXX 情報の取得に失敗した場合に発生します。

--- join(*item)    -> String

File::SEPARATORを間に入れて文字列を連結します。

  [item, item, ...].join(File::SEPARATOR)

와 같습니다.[[d:platform/DOSISH-support]]で環境依存になる予定です。

@param item 連結したいディレクトリ名やファイル名を文字列で与えます。

--- link(old, new)    -> 0

old を指す new という名前のハードリンクを
生成します。old はすでに存在している必要があります。
ハードリンクに成功した場合は 0 を返します。

失敗した場合は例外 [[c:Errno::EXXX]] が発生します。

@param old ファイル名を表す文字列を指定します。 

@param new ファイル名を表す文字列を指定します。 

@raise Errno::EXXX 작업에 실패하면 발생합니다.

--- new(path, mode = "r", perm = 0666)                -> File 
--- open(path, mode = "r", perm = 0666)               -> File 
--- open(path, mode = "r", perm = 0666) {|file| ... } -> object

path で指定されるファイルをオープンし、[[c:File]] オブジェクトを生成して
返します。

path が整数の場合はファイルディスクリプタとして扱い、それに対応する
[[c:File]] オブジェクトを生成して返します。[[m:IO.open]] と同じです。ブロックを指定して呼び出した場合は、File オブジェクトを引数として
ブロックを実行します。ブロックの実行が終了すると、ファイルは自動的に
クローズされます。블록을 평가하고 그 결과를 리턴합니다.

@param path ファイルを文字列で指定します。整数を指定した場合はファイルディスクリプタとして扱います。

@param mode モードを文字列か定数の論理和で指定します。[[m:Kernel.#open]] と同じです。

@param perm ファイルを生成する場合のファイルのパーミッションを整数で指定します。[[m:Kernel.#open]] と同じです。

@raise Errno::EXXX ファイルのオープンに失敗した場合に発生します。

#@since 1.9.1
--- path(filename)    -> String

指定されたファイル名を文字列で返します。filename が文字列でない場合は、to_path メソッドを呼びます。

@param filename ファイル名を表す文字列か to_path メソッドが定義されたオブジェクトを指定します。#@end

--- readlink(path)    -> String

シンボリックリンクのリンク先のパスを文字列で返します。

@param path シンボリックリンクを表す文字列を指定します。

@raise Errno::EXXX 指定された path がシンボリックリンクでない場合や、リンクの読み取りに失敗した場合に発生します。

#@since 1.9.2
--- realpath(pathname, basedir = nil) -> String

与えられた pathname に対応する絶対パスを返します。

pathname の全てのコンポーネントは存在しなければなりません。

@param pathname ファイル名を指定します。

@param basedir ベースディレクトリを指定します。省略するとカレントディレクトリを使用します。

@raise Errno::ENOENT ファイルが存在しない場合に発生します。

--- realdirpath(pathname, basedir = nil) -> String

与えられた pathname に対応する絶対パスを返します。

pathname の最後のコンポーネントは存在していなくても例外は発生しません。

@param pathname ファイル名を指定します。

@param basedir ベースディレクトリを指定します。省略するとカレントディレクトリを使用します。

@raise Errno::ENOENT ファイルが存在しない場合に発生します。

#@end

--- rename(from, to)    -> 0

ファイルの名前を変更します。ディレクトリが異なる場合には移動も行い
ます。[[man:rename(2)]] を参照してください。移動先のファ
イルが存在する時には上書きされます。

ファイルの移動に成功した場合 0 を返します。실패하면
[[c:Errno::EXXX]] 에러가 발생합니다.

@param from ファイルの名前を文字列で与えます。

@param to 新しいファイル名を文字列で与えます。

@raise Errno::EXXX 작업에 실패하면 발생합니다.

--- split(pathname)    -> [String]

pathname を dirname とbasename に分割して、2 要
素の配列を返します。

  [File.dirname(pathname), File.basename(pathname)]

와 같습니다.

@param pathname パス名を表す文字列を指定します。 

--- stat(filename)    -> File::Stat

filename の情報を含む [[c:File::Stat]] オブジェクトを生成し
て返します。

@param filename 파일명을 나타내는 문자열을 지정합니다. 

@raise Errno::EXXX 情報の取得に失敗した場合に発生します。

@see [[m:IO#stat]], [[m:File#lstat]]

--- lstat(filename)   -> File::Stat

[[m:File.stat]]と同様ですが、シンボリックリンクに関してリンクそのものの
情報を File::Stat として返します。[[man:lstat(2)]] を実装していないシステムでは、File.stat と同じです。

@param filename 파일명을 나타내는 문자열을 지정합니다. 

@raise Errno::EXXX 情報の取得に失敗した場合に発生します。

@see [[m:IO#stat]], [[m:File#lstat]]

--- symlink(old, new)    -> 0

old への new という名前のシンボリックリンクを生成します。

シンボリックリンクの作成に成功すれば 0 を返します。失敗した場合は
例外 [[c:Errno::EXXX]] が発生します。

@param old ファイル名を表す文字列を指定します。 

@param new シンボリックリンクを表す文字列を指定します。 

@raise Errno::EXXX 작업에 실패하면 발생합니다.

--- truncate(path, length)    -> 0

path で指定されたファイルのサイズを最大 length バイト
にします。

사이즈 변경에 성공하면 0을 리턴합니다.실패하면
[[c:Errno::EXXX]] 에러가 발생합니다.

@param path 경로명을 나타내는 문자열을 지정합니다.

@param length 変更したいサイズを整数で与えます。

@raise Errno::EXXX 작업에 실패하면 발생합니다.

--- umask           -> Integer

現在の umask の値を返します。

@see [[man:umask(2)]]

--- umask(umask)    -> Integer

umask を変更します。変更前の umask の値を返します。

@param umask 設定したい umask の値を整数で指定します。

@see [[man:umask(2)]]

--- utime(atime, mtime, *filename)    -> Integer

ファイルの最終アクセス時刻と更新時刻を変更します。変更したファイル
の数を返します。変更に失敗した場合は例外 [[c:Errno::EXXX]] が発生
します。

@param filename 파일명을 나타내는 문자열을 지정합니다. 

@param atime 最終アクセス時刻を [[c:Time]] か、起算時からの経過秒数を数値で指定します。

@param utime 更新時刻を [[c:Time]] か、起算時からの経過秒数を数値で指定します。

@raise Errno::EXXX 변경에 실패하면 발생합니다.

--- blockdev?(path)    -> bool

[[m:FileTest.#blockdev?]] と同じです。

@param path パスを表す文字列か IO オブジェクトを指定します。

--- chardev?(path)    -> bool

[[m:FileTest.#chardev?]] と同じです。

@param path パスを表す文字列か IO オブジェクトを指定します。

--- directory?(path)    -> bool

[[m:FileTest.#directory?]] と同じです。

@param path パスを表す文字列か IO オブジェクトを指定します。

--- executable?(path)    -> bool

[[m:FileTest.#executable?]] と同じです。

@param path 경로명을 나타내는 문자열을 지정합니다.

--- executable_real?(path)    -> bool

[[m:FileTest.#executable_real?]] と同じです。

@param path 경로명을 나타내는 문자열을 지정합니다.

--- exist?(path)    -> bool
--- exists?(path)    -> bool

[[m:FileTest.#exist?]] と同じです。

@param path パスを表す文字列か IO オブジェクトを指定します。

--- file?(path)    -> bool

[[m:FileTest.#file?]] と同じです。

@param path パスを表す文字列か IO オブジェクトを指定します。

--- grpowned?(path)    -> bool

[[m:FileTest.#grpowned?]] と同じです。

@param path パスを表す文字列か IO オブジェクトを指定します。

--- owned?(path)    -> bool

[[m:FileTest.#owned?]] と同じです。

@param path パスを表す文字列か IO オブジェクトを指定します。

--- identical?(filename1, filename2)    -> bool

[[m:FileTest.#identical?]] と同じです。

@param filename1 パスを表す文字列か IO オブジェクトを指定します。

@param filename2 パスを表す文字列か IO オブジェクトを指定します。

--- pipe?(path)    -> bool

[[m:FileTest.#pipe?]]와 같음.

@param path パスを表す文字列か IO オブジェクトを指定します。

--- readable?(path)    -> bool

[[m:FileTest.#readable?]] と同じです。

@param path パスを表す文字列か IO オブジェクトを指定します。

--- readable_real?(path)    -> bool

[[m:FileTest.#readable_real?]]와 같음.

@param path パスを表す文字列か IO オブジェクトを指定します。

--- setgid?(path)    -> bool

[[m:FileTest.#setgid?]]와 같음.

@param path パスを表す文字列か IO オブジェクトを指定します。

--- setuid?(path)    -> bool

[[m:FileTest.#setuid?]]와 같음

@param path パスを表す文字列か IO オブジェクトを指定します。

--- size(path)    -> Integer

[[m:FileTest.#size]]와 같음

@param path パスを表す文字列か IO オブジェクトを指定します。

--- size?(path)    -> bool

[[m:FileTest.#size?]]와 같음.

@param path パスを表す文字列か IO オブジェクトを指定します。

--- socket?(path)    -> bool

[[m:FileTest.#socket?]]와 같음.

@param path パスを表す文字列か IO オブジェクトを指定します。

--- sticky?(path)    -> bool

[[m:FileTest.#sticky?]]와 같음.

@param path パスを表す文字列か IO オブジェクトを指定します。

--- symlink?(path)    -> bool

[[m:FileTest.#symlink?]]와 같음.

@param path パスを表す文字列か IO オブジェクトを指定します。

--- writable?(path)    -> bool

[[m:FileTest.#writable?]]와 같음.

@param path 경로명을 나타내는 문자열을 지정합니다.

--- writable_real?(path)    -> bool

[[m:FileTest.#writable_real?]]와 같음.

@param path 경로명을 나타내는 문자열을 지정합니다.

--- zero?(path)    -> bool

[[m:FileTest.#zero?]]와 같음.

@param path パスを表す文字列か IO オブジェクトを指定します。

#@since 1.9.1
--- world_readable?(path)    -> Integer | nil

path が全てのユーザから読めるならばそのファイルのパーミッションを表す
整数を返します。그렇지 않으면 nil을 리턴합니다.

整数の意味はプラットフォームに依存します。

@param path パスを表す文字列か IO オブジェクトを指定します。

예:

   m = File.world_readable?("/etc/passwd")
   "%o" % m                               # => "644"

--- world_writable?(path)    -> bool

path が全てのユーザから書き込めるならば、そのファイルのパーミッションを表す
整数を返します。그렇지 않으면 nil을 리턴합니다.

整数の意味はプラットフォームに依存します。

@param path パスを表す文字列か IO オブジェクトを指定します。

예:

   m = File.world_writable?("/tmp")
   "%o" % m                               #=> "777"
#@end


== Instance Methods

--- atime    -> Time

最終アクセス時刻を Time オブジェクトとして返します。

@raise IOError self가 닫혀있으면 발생합니다.

@raise Errno::EXXX 시각을 얻어오지 못 하면 발생합니다.

@see [[m:File#lstat]], [[m:File#ctime]], [[m:File#mtime]]

--- ctime    -> Time

状態が最後に変更された時刻を Time オブジェクトとして返します。상태의 변경이란 chmod를 통한 권한 변경과 같은 것을 이야기합니다.

@raise IOError self가 닫혀있으면 발생합니다.

@raise Errno::EXXX 시각을 얻어오지 못 하면 발생합니다.

@see [[m:File#lstat]], [[m:File#atime]], [[m:File#mtime]]

--- mtime    -> Time

最終更新時刻を Time オブジェクトとして返します。

@raise IOError self가 닫혀있으면 발생합니다.

@raise Errno::EXXX 시각을 얻어오지 못 하면 발생합니다.

@see [[m:File#lstat]], [[m:File#atime]], [[m:File#ctime]]

#@since 1.9.2
--- size     -> Integer

파일의 사이지를 리턴합니다.

예:

   File.open("/dev/null") do |f|
     f.size   #=> 0
   end

@raise IOError self가 닫혀있으면 발생합니다.

@raise Errno::EXXX 작업에 실패하면 발생합니다.

@see [[m:File#lstat]]

#@end
--- chmod(mode)    -> 0

ファイルのモードを指定された mode に変更します。

モードの変更に成功した場合は 0 を返します。失敗した場合は例外 [[c:Errno::EXXX]] が発生し
ます。

@param mode [[man:chmod(2)]]와 같이 정수로 지정합니다.

@raise IOError self가 닫혀있으면 발생합니다.

@raise Errno::EXXX 작업에 실패하면 발생합니다.

예:

   f = File.new("out", "w");
   f.chmod(0644)   #=> 0

--- chown(owner, group)    -> 0

파일의 소유자와 그룹을 변경합니다.

適切な権限があればファイルのオーナーとグループを変更できます。
所有者の変更に成功した場合は 0 を返します。変更に失敗した場合は
例外 [[c:Errno::EXXX]] が発生します。

@param owner [[man:chown(2)]]와 마찬가지로 숫자로 지정합니다.nil이나 -1을 지정하면 소유자는 그대로 유지됩니다.

@param group [[man:chown(2)]]와 마찬가지로 숫자로 지정합니다.nil이나 -1을 지정하면 그룹은 그대로 유지됩니다.

@raise IOError self가 닫혀있으면 발생합니다.

@raise Errno::EXXX 변경에 실패하면 발생합니다.

--- flock(operation)    -> 0 | false

ファイルをロックします。

ロックを取得するまでブロックされます。
ロックの取得に成功した場合は 0 を返します。
File::LOCK_NB (ノンブロッキング) を指定すると、本来ならブロックされる場合に
ブロックされずに false を返すようになります。

@param operation ロックに対する操作の種類を示す定数を指定します。                 どのような定数が利用可能かは以下を参照して下さい。

@raise IOError self가 닫혀있으면 발생합니다.

@raise Errno::EXXX operation に不正な整数を与えた場合などに発生します。

引数 operation に有効な定数は以下の通りです。定数は [[c:File::Constants]] で定義されていますが、
[[c:File]] クラスの親クラスの IO が [[c:File::Constants]] をインクルードしているので、
これらの定数は File::LOCK_SH などとして参照可能です。

: LOCK_SH
 공유록複数のプロセスが同時にロックを共有できます。 システムによってはロック対象のファイルは読み込みモード
 ("r", "r+" など)でオープンされている必要があります。そのよ
 うなシステムでは読み込み可能でないファイルに対するロックは例外
 [[c:Errno::EXXX]] が発生するかもしれません。: LOCK_EX
 排他ロック。同時にはただひとつのプロセスだけがロックを保持できます。 システムによってはロック対象のファイルは書き込みモード
 ("w", "r+" など)でオープンされている必要があります。そのよ
 うなシステムでは書き込み可能でないファイルに対するロックは例外
 [[c:Errno::EXXX]] が発生するかもしれません。: LOCK_UN
 アンロック。 この明示的なアンロック以外に、ファイルのcloseやRubyインタプリタの終了
 (プロセスの終了)によっても自動的にロック状態は解除されます。: LOCK_NB
 ノンブロックモード。 File::LOCK_SH | File::LOCK_NB のように他の指定と or することで指
 定します。この指定がない場合、ブロックされる条件での flock
 の呼び出しはロックが解除されるまでブロックされます。

File::LOCK_NB の指定がある場合、ブロックされる条件での
flock は false を返します。

「ブロックされる条件」とは以下のいずれかです。  * 他のプロセスが排他ロックをすでに行っている場合にロックを行う
  * 他のプロセスがロックしている状態で排他ロックを行う

예1:

    # 書き込みロック(write lock)を使用してカウンタを更新。    # ロック前にファイルを切り詰めてしまうので、
    # モードに"w"を使ってはいけません。    File.open("counter", File::RDWR|File::CREAT, 0644) {|f|
      f.flock(File::LOCK_EX)
      value = f.read.to_i + 1
      f.rewind
      f.write("#{value}\n")
      f.flush
      f.truncate(f.pos)
    }

    # 読み込みロック(read lock)を使用してカウンタを読み込み。    File.open("counter", "r") {|f|
      f.flock(File::LOCK_SH)
      p f.read
    }

예2:

    f = File.open("/tmp/foo", "w")

    f.flock(File::LOCK_EX)
    puts "locked by process1"

    fork {
      f = File.open("/tmp/foo", "r")
      f.flock(File::LOCK_SH)
      puts "locked by process2"
      sleep 5
      puts "unlocked by process2"
    }

    sleep 5

    f.flock(File::LOCK_UN)
    puts "unlocked by process1"
    sleep 1 # <- 子プロセスが確実に先にロックするための sleep
    f.flock(File::LOCK_EX)
    puts "re-locked by process1"

    => locked by process1
       unlocked by process1
       locked by process2
       unlocked by process2
       re-locked by process1

--- path    -> String
#@since 1.9.1
--- to_path -> String
#@end

オープン時に使用したパスを文字列で返します。

   File.new("testfile").path               #=> "testfile"
   File.new("/tmp/../tmp/yyy", "w").path   #=> "/tmp/../tmp/yyy"

--- lstat    -> File::Stat

ファイルの状態を含む [[c:File::Stat]] オブジェクトを生成して返します。
シンボリックリンクに関してリンクそのものの情報を返します。
[[man:lstat(2)]] を実装していないシステムでは、[[m:IO#stat]]と同じです。

@raise Errno::EXXX 작업에 실패하면 발생합니다.

@raise IOError self가 닫혀있으면 발생합니다.

@see [[m:IO#stat]], [[m:File.stat]], [[m:File.lstat]]

--- truncate(length)    -> 0

ファイルのサイズを最大 length バイトにします。

사이즈 변경에 성공하면 0을 리턴합니다.실패하면
[[c:Errno::EXXX]] 에러가 발생합니다.

@raise IOError 自身が書き込み用にオープンされていなければ発生します。

@raise Errno::EXXX サイズの変更に失敗した場合に発生します。

#@#== Constants

--- ALT_SEPARATOR -> "\\" | nil

システムのファイルパスのセパレータが SEPARATOR と異なる場合
に設定されます。MS-DOS 에선 "\\"입니다.UNIX와 Cygwin에선 nil입니다.

--- PATH_SEPARATOR -> ";" | "," | ":"

PATH 환경변수의 구분자입니다. UNIX では ":" MS-DOS な
どでは ";" です。

--- SEPARATOR -> "/"
--- Separator -> "/"

ファイルパスのセパレータです。ファイルを扱うメソッドにパス名を渡す
場合などスクリプト内のパス名は環境によらずこのセパレータで統一され
ます。値は "/" です。

