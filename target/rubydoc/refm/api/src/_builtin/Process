= module Process

UNIX 프로세스를 관리하는 모듈입니다.

Process는 프로세스를 나타내는 클래스가 아니고
프로세스를 조작하는 기능을 가진 모듈입니다.

사용자 ID, 그룹 ID를 다루는 시스템 호출을 직접 호출하기 위해서 [[c:Process::Sys]] 메소드가 준비되어 있습니다.
ポータブルにユーザ ID・グループ ID を操作するためのモジュール [[c:Process::UID]], [[c:Process::GID]] 
も提供されています。

== Singleton Methods

#@since 1.8.0
--- abort(message = "")   -> ()

[[m:Kernel.#abort]] 함수와 같습니다.

@param message 종료 메시지를 문자열로 지정합니다.

#@end

#@since 1.8.7
--- exec(command, *args) -> ()

현재 프로세스를 주어진 외부 명령어로 바꿉니다.


==== 인수의 해석

인수가 하나만 넘겨지고 command에 쉘에서 사용하는 메타문자
  * ?{} [] <> () ~ & | \ $ ; ' ` " \n
//}
가 포함되어 있으면 쉘을 통해서 실행됩니다. 그렇지 않은 경우엔 Ruby 인터프리터에서 직접 실행됩니다.

여러개의 인수가 주어지면 두번째 인수부터는 command에 직접 넘겨지고
인터프리터에서 직접 실행됩니다.

첫번째 인수가 2개의 요소를 가지는 배열이면, 첫번째 요소는 실행될 프로그램의
경로가 되고 두번째 요소는 밖으로 보여지는 프로그램의 이름이 됩니다.

MSDOS 환경에서 사용하면 command는 서브쉘을 경유해서 실행됩니다.
다른 환경에선 command가 [[man:exec(2)]]을 사용해서 실행되며 @@@

@param command 실행하고자 하는 외부 명령어

@param args command에 넘겨줄 인수

   exec "echo *"       # echoes list of files in current directory
   # never get here


   exec "echo", "*"    # echoes an asterisk
   # never get here


#@end

#@since 1.8.0
--- exit(status = true)    -> ()

프로세스를 종료합니다.[[m:Kernel.#exit]] 함수와 같습니다.

@param status 종료상태값을 boolean 값이나 정수로 지정합니다.true는 성공을 나타내고, false는 실패를 나타냅니다.

@see [[man:exit(3)]]

#@end

--- exit!(status = false)    -> ()

[[m:Kernel.#exit!]] 함수와 같습니다.

@param status 종료상태값을 boolean 값이나 정수로 지정합니다.true는 성공을 나타내고, false는 실패를 나타냅니다.

@see [[man:_exit(2)]]

--- fork            -> Integer | nil
--- fork { ... }    -> Integer | nil

자식 프로세스를 만듭니다.[[m:Kernel.#fork]]와 같습니다.

@raise NotImplementedError 현재 시스템에서 이 메소드를 사용할 수 없으면 발생합니다.

@see [[man:fork(2)]]

#@since 1.9.1
--- spawn(cmd, *arg)    -> Integer

[[m:Kernel.#spawn]] 메소드와 같습니다.

@param cmd [[m:Kernel.#spawn]] 메소드와 같습니다.

@param arg [[m:Kernel.#spawn]] 메소드와 같습니다.

@raise NotImplementedError 현재 시스템에서 이 메소드를 사용할 수 없으면 발생합니다.

#@end

== Module Functions

#@since 1.8.5
--- getrlimit(resource)    -> [Integer]

현재 프로세스의 리소스 제한을 숫자 배열로 리턴합니다.
현재 제한값을 나타내는 cur_limit와 최대 제한값을 나타내는 max_limit로 이루어진 [cur_limit, max_limit] 배열을 리턴합니다.

제한값이 [[m:Process::RLIM_INFINITY]]과 같으면 리소스 제한이 없다는 의미입니다.

@param resource 리소스 종료를 나타내는 상수를 지정합니다.지정하는 상수는 시스템에 의존합니다.

@raise Errno::EXXX 리소스 제한값을 읽어오지 못 하면 발생합니다.

@raise NotImplementedError 현재 시스템에서 이 메소드를 사용할 수 없으면 발생합니다.

resource 인수에서 사용할 수 있는 값은 다음과 같습니다.

: [[m:Process::RLIMIT_CORE]]
 core 파일 사이즈 (바이트) (SUSv3)
: [[m:Process::RLIMIT_CPU]]
 프로세스 CPU 시간 (초) (SUSv3)
: [[m:Process::RLIMIT_DATA]]
 프로세스 데이터 영역 사이즈 (바이트) (SUSv3)
: [[m:Process::RLIMIT_FSIZE]]
 프로세스가 생성한 파일 사이즈 (바이트) (SUSv3)
: [[m:Process::RLIMIT_NOFILE]]
 프로세스가 열 수 있는 파일 수 (SUSv3)
: [[m:Process::RLIMIT_STACK]]
 프로세스의 스택 사이즈 (바이트) (SUSv3)
: [[m:Process::RLIMIT_AS]]
 프로세스의 가상 메모리 사이즈 (바이트) (SUSv3, NetBSD, FreeBSD, OpenBSD but 4.4BSD-Lite))
: [[m:Process::RLIMIT_MEMLOCK]]
 [[man:mlock(2)]]으로 잠글 수 있는 최대 사이즈 (바이트) (4.4BSD, GNU/Linux)
: [[m:Process::RLIMIT_NPROC]] 
 사용자의 최대 프로세스 수 (4.4BSD, GNU/Linux)
: [[m:Process::RLIMIT_RSS]]
 사용가능한 실제 메모리의 최대값 (바이트) (4.2BSD, GNU/Linux)
: [[m:Process::RLIMIT_SBSIZE]]
 소켓 버퍼 사이즈 (바이트) (NetBSD, FreeBSD)

예:

 include Process
 p lim = getrlimit(RLIMIT_STACK)                                        #=> [8388608, 18446744073709551615]
 p lim.map{|i| i == RLIM_INFINITY ?"unlimited" : "#{i/(1024**2)}MB" }  #=> ["8MB", "unlimited"]

@see [[m:Process.#setrlimit]], [[man:getrlimit(2)]]

--- setrlimit(resource, cur_limit, max_limit)    -> nil
--- setrlimit(resource, limit)                   -> nil

현재 프로세스의 리소스 제한을 설정합니다.

@param resource 리소스 종료를 나타내는 상수를 지정합니다.지정하는 상수는 시스템에 의존합니다.

@param limit resource によって意味が決まる制限値を表す整数もしくは定数を指定します。             soft limit와 hard limit 둘 다 이 값이 사용됩니다.

@param cur_limit 현재 제한값(soft limit)으로 설정할 정수나 상수를 지정합니다.

@param max_limit soft limit로 설정 가능한 최대값을(hard limit) 정수나 상수로 지정합니다.

@raise Errno::EXXX 리소스 제한값을 설정하지 못 하면 발생합니다.

@raise NotImplementedError 현재 시스템에서 이 메소드를 사용할 수 없으면 발생합니다.

resource 인수에서 사용할 수 있는 값은 다음과 같습니다.

: [[m:Process::RLIMIT_CORE]]
 core 파일 사이즈 (바이트) (SUSv3)
: [[m:Process::RLIMIT_CPU]]
 프로세스 CPU 시간 (초) (SUSv3)
: [[m:Process::RLIMIT_DATA]]
 프로세스 데이터 영역 사이즈 (바이트) (SUSv3)
: [[m:Process::RLIMIT_FSIZE]]
 프로세스가 생성한 파일 사이즈 (바이트) (SUSv3)
: [[m:Process::RLIMIT_NOFILE]]
 프로세스가 열 수 있는 파일 수 (SUSv3)
: [[m:Process::RLIMIT_STACK]]
 프로세스의 스택 사이즈 (바이트) (SUSv3)
: [[m:Process::RLIMIT_AS]]
 프로세스의 가상 메모리 사이즈 (바이트) (SUSv3, NetBSD, FreeBSD, OpenBSD but 4.4BSD-Lite))
: [[m:Process::RLIMIT_MEMLOCK]]
 [[man:mlock(2)]]으로 잠글 수 있는 최대 사이즈 (바이트) (4.4BSD, GNU/Linux)
: [[m:Process::RLIMIT_NPROC]]
 사용자의 최대 프로세스 수 (4.4BSD, GNU/Linux)
: [[m:Process::RLIMIT_RSS]]
 사용가능한 실제 메모리의 최대값 (바이트) (4.2BSD, GNU/Linux)
: [[m:Process::RLIMIT_SBSIZE]]
 소켓 버퍼 사이즈 (바이트) (NetBSD, FreeBSD)

인수 limit, cur_limit, max_limit에 사용할 수 있는 상수는 다음과 같습니다.

 * [[m:Process::RLIM_INFINITY]] 리소스에 제한을 두지 않습니다.
 * [[m:Process::RLIM_SAVED_CUR]]
 * [[m:Process::RLIM_SAVED_MAX]]

以下の例は RLIMIT_CORE の制限を hard limit (max limit) まで引き上げ、可能なら core を残すようにします。

  Process.setrlimit(Process::RLIMIT_CORE, 
                    Process.getrlimit(Process::RLIMIT_CORE)[1])

@see [[man:setrlimit(2)]]

#@end

--- egid    -> Integer

현재 프로세스의 유효 그룹 ID를 정수로 리턴합니다.

@see [[man:getegid(2)]]

--- egid=(gid)

현재 프로세스의 유효 그룹 ID를 gid로 설정합니다.

시스템에 의존적인 메소드입니다.
유효 그룹 ID가 아닌 그룹 ID도 설정할 수 있습니다. (확실하지 않음)

@param gid 유효 그룹 ID를 정수로 지정합니다.

@raise Errno::EXXX 권한이 없으면 발생합니다.

@raise NotImplementedError 현재 시스템에서 이 메소드를 사용할 수 없으면 발생합니다.

@see [[m:Process::GID.#eid=]]

--- euid        -> Integer

현재 프로세스의 유효 사용자 ID를 정수로 리턴합니다.

@see [[man:geteuid(2)]]

--- euid=(uid)

현재 프로세스의 유효 그룹 ID를 uid로 설정합니다.

시스템에 의존적인 메소드입니다.
유효 사용자 ID가 아닌 사용자 ID도 설정할 수 있습니다.(확실하지 않음)

@param uid 유효 사용자 ID를 정수로 지정합니다.

@raise Errno::EXXX 권한이 없으면 발생합니다.

@raise NotImplementedError 현재 시스템에서 이 메소드를 사용할 수 없으면 발생합니다.

@see [[m:Process::UID.#eid=]]

--- gid        -> Integer

현재 프로세스의 그룹 ID를 리턴합니다.

@see [[man:getgid(2)]]

--- gid=(gid)

현재 프로세스의 그룹 ID를 gid로 설정합니다.

시스템에 의존적인 메소드입니다.
&&&

@param gid 그룹 ID를 정수로 지정합니다.

@raise Errno::EXXX 권한이 없으면 발생합니다.

@raise NotImplementedError 현재 시스템에서 이 메소드를 사용할 수 없으면 발생합니다.

@see [[c:Process::GID]]

--- groups     -> [Integer]

보조 

返される配列の最大要素数は [[m:Process.#maxgroups]] です。

@raise Errno::EXXX [[m:Process.#maxgroups]] が実際に返される補助グループ ID の
                   数よりも少ない値を設定していると発生します。

@raise NotImplementedError 현재 시스템에서 이 메소드를 사용할 수 없으면 발생합니다.

@see [[man:getgroups(2)]]

--- groups=(gids)

補助グループを設定します。

root だけがこのメソッドを呼ぶことができます。

@param gids 補助グループ ID の配列を指定します。補助グループ ID は整数かグループ名を表す文字列です。

@raise ArgumentError 設定する補助グループ ID の数が [[m:Process.#maxgroups]] の
                     数を越えている場合に発生します。

@raise Errno::EXXX 권한이 없으면 발생합니다.

@raise NotImplementedError 현재 시스템에서 이 메소드를 사용할 수 없으면 발생합니다.

@see [[man:setgroups(2)]]

--- maxgroups        -> Integer
--- maxgroups=(num)

設定できる補助グループ ID の数を指定します。

実際に返される補助グループ ID の数よりも少ない値を設定していると、
[[m:Process.#groups]] で例外が発生します。

@param num 整数を指定します。

@raise NotImplementedError 현재 시스템에서 이 메소드를 사용할 수 없으면 발생합니다.

--- pid    -> Integer

현재 프로세스의 프로세스 ID를 리턴합니다.[[m:$$]] 변수와
같습니다.

@see [[man:getpid(2)]]

--- ppid    -> Integer

부모 프로세스의 프로세스 ID를 리턴합니다.UNIX에선 부모 프로세스가 종료 되고 나면
ppid가 1(init의 pid)이 됩니다.

@see [[man:getppid(2)]]

--- uid        -> Integer

프로세스의 사용자 ID를 리턴합니다.

@see [[man:getuid(2)]]

--- uid=(id)

프로세스의 사용자 ID를 id로 설정합니다.

시스템에 의존적인 메소드입니다.
 

@param id 사용자 ID를 정수로 지정합니다.

@raise Errno::EXXX 권한이 없으면 발생합니다.

@raise NotImplementedError 현재 시스템에서 이 메소드를 사용할 수 없으면 발생합니다.

@see [[c:Process::UID]]

--- getpgid(pid = 0)   -> Integer

프로세스 ID가 pid인 프로세스의 프로세스 그룹 ID를 정수로 리턴합니다.

@param pid 프로세스 ID를 정수로 지정합니다.0은 현재 프로세스 ID를 의미합니다.

@raise Errno::EXXX 프로세스 그룹을 읽어오지 못 하면 발생합니다.

@raise NotImplementedError 현재 시스템에서 이 메소드를 사용할 수 없으면 발생합니다.

@see [[man:getpgid(2)]]

--- getpgrp            -> Integer

현재 프로세스의 프로세스 그룹 ID를 정수로 리턴합니다.

@raise Errno::EXXX 프로세스 그룹을 읽어오지 못 하면 발생합니다.

@raise NotImplementedError 현재 시스템에서 이 메소드를 사용할 수 없으면 발생합니다.

@see [[man:getpgrp(2)]]

--- getpriority(which, who)    -> Integer

which に従いプロセス、プロセスグループ、ユーザのいずれかの現在のプライオリティを整数で返します。

@param which プライオリティの種類を次の定数で指定します。[[m:Process::PRIO_PROCESS]],
             [[m:Process::PRIO_PGRP]], [[m:Process::PRIO_USER]]。

@param who which の値にしたがってプロセス ID、プロセスグループ ID、ユーザ ID のいずれかを整数で指定します。

@raise Errno::EXXX プライオリティの取得に失敗した場合に発生します。

@raise NotImplementedError 현재 시스템에서 이 메소드를 사용할 수 없으면 발생합니다.

@see [[man:getpriority(2)]]

#@since 1.8.0
--- initgroups(user, group)    -> [Integer]

user가 속해있는 그룹의 목록을 갱신하고 group을 목록에 추가합니다.

이 메소드를 호출하려면 root 권한이 필요합니다.

@param user 사용자 이름을 문자열로 지정합니다.

@param group 사용자 그룹 ID를 정수로 지정합니다.

@raise NotImplementedError 현재 시스템에서 이 메소드를 사용할 수 없으면 발생합니다.

#@end

--- kill(signal, pid, *rest)    -> Integer

pid에 지정한 프로세스에 시그널을 보냅니다.signal은 시그널 번호나 시그널 이름을 담은 문자열이나 심볼로 지정할 수 있습니다.
全てのシグナル送信に成功した場合、指定した pid の総数を返します。

@param signal 시그널을 정수나 시그널 이름을 담은 문자열로 지정합니다.負の値を持つシグナル(あるいはシグナル名の前に-)を指定すると、プロセスではなくプロセスグループにシグナルを送ります。

@param pid シグナルを送りたいプロセスのプロセス ID を整数で指定します。ただし、0 以下の場合は以下のような意味になります。

 * 0 の場合はカレントプロセスのプロセスグループにシグナルを送ります。 * -1 の場合はシステム上の全てのプロセスにシグナルを送ります。 * それ以外の負の整数を与えるとプロセスではなくプロセスグループにシグナルを送ります。   負の整数はプロセスグループ ID にマイナスを付けたものと見なされます。

@param rest プロセス ID を整数で指定します。

@raise ArgumentError 存在しないシグナルを指定した場合に発生します。

@raise Errno::EXXX シグナル送信に失敗した場合に発生します。

#@#なお、Windows ([[unknown:mswin32]], [[unknown:mingw32]])では、INT
#@#ILL FPE SEGV TERM BREAK ABRT しか指定できません。((<ruby 1.7 feature>))
#@#KILL も指定できます

@see [[m:Kernel.#trap]], [[man:kill(2)]]

#@if (version < "1.8.0")
--- setpgrp(pid, pgrp)    -> 0
#@end
--- setpgid(pid, pgrp)    -> 0

プロセス ID が pid であるプロセスのプロセスグループを pgrp に設定します。

@param pid 프로세스 ID를 정수로 지정합니다.pid が 0 の時はカレントプロセスの ID を指定したのと同じです。           プロセスグループの設定に成功した場合は 0 を返します。

@param pgrp プロセスグループ ID を整数で指定します。pgrp が 0 の時は pid を指定したのと同じです。

@raise Errno::EXXX プロセスグループの設定に失敗した場合に発生します。

@raise NotImplementedError 현재 시스템에서 이 메소드를 사용할 수 없으면 발생합니다.

@see [[man:setpgid(2)]]

#@since 1.8.0
--- setpgrp    -> 0

カレントプロセスの ID と同じ ID をもつプロセスグループを作成し、カレントプロセスをそのリーダーにします。
[[m:Process.#setpgid]](0, 0) と同じです。

@raise Errno::EXXX プロセスグループの設定に失敗した場合に発生します。

@raise NotImplementedError 현재 시스템에서 이 메소드를 사용할 수 없으면 발생합니다.

 fork do
   p [Process.pid, Process.getpgrp]
   p Process.setpgrp
   p [Process.pid, Process.getpgrp]
 end
 Process.wait
 #=>
   [3427, 3426]
   0
   [3427, 3427]

@see [[man:setpgrp(2)]]
#@end

--- setpriority(which, who, prio)    -> 0

プロセス、プロセスグループ、
ユーザのいずれかの現在のプライオリティを設定します
。プライオリティの設定に成功した場合は 0 を返します。

@param which プライオリティを設定する対象の種類を以下の定数のいずれかで指定します。

 * [[m:Process::PRIO_PROCESS]]
 * [[m:Process::PRIO_PGRP]]
 * [[m:Process::PRIO_USER]] 

@param who which の値にしたがってプロセス ID、プロセスグループ ID、ユーザ ID のいずれかを整数で指定します。

@param prio プライオリティを -20 から 20 までの整数で設定します。小さな値はプライオリティが高いことを意味し、大きな値はプライオリティが低いことを意味します。

@raise Errno::EXXX プライオリティの設定に失敗した場合に発生します。

@raise NotImplementedError 현재 시스템에서 이 메소드를 사용할 수 없으면 발생합니다.

以下の例は呼び出したプロセス自身のプライオリティを 10 に下げます。
すでに 10 よりもプライオリティが低く、
Errno::EACCES となった場合には無視して実行を続けます。

  begin
    Process.setpriority(Process::PRIO_PROCESS, 0, 10)
  rescue Errno::EACCES
  end

@see [[man:setpriority(2)]]

--- setsid    -> Integer

新しいセッションを作成して、tty を切り離します。デーモンを簡単に作
ることができます。セッション ID を返します。

@raise Errno::EXXX セッションの作成に失敗した場合に発生します。

@raise NotImplementedError 현재 시스템에서 이 메소드를 사용할 수 없으면 발생합니다.

@see [[man:setsid(2)]]

#@since 2.0.0
--- getsid(pid = 0) -> Integer

引数 pid で指定されたプロセスのセッション ID を返します。

@param pid 프로세스 ID를 정수로 지정합니다.省略した場合、0 を指定した場
           合は現在のプロセスの ID を指定した場合と同じ動作になります。

@raise NotImplementedError メソッドが現在のプラットフォームで実装されて
                           いない場合に発生します。

  Process.getsid()              # => 27422
  Process.getsid(0)             # => 27422
  Process.getsid(Process.pid()) # => 27422

@see [[man:getsid(2)]]
#@end

#@since 1.8.0
--- times    -> Struct::Tms

自身のプロセスとその子プロセスが消費したユーザ/システム CPU 時間の積算を
[[c:Struct::Tms]] オブジェクトで返します。시간은 초를 단위로 하며 부동소수점을 사용합니다. @@@

@raise NotImplementedError 현재 시스템에서 이 메소드를 사용할 수 없으면 발생합니다.

@see [[c:Struct::Tms]] 
#@end

--- wait    -> Integer
--- wait2   -> [Integer, Process::Status]

子プロセスのうちのひとつが終了するまで待ち、終了した子プロセスの pid を返します。#@since 1.8.0
wait2 は子プロセスの pid と終了ステータスを表す [[c:Process::Status]] オブジェクトの配列を返します。#@else
wait2 は子プロセスの pid と終了ステータスを表す [[m:$?]] の配列を返します。#@end

#@since 1.8.0
[[m:$?]] に終了した子プロセスの [[c:Process::Status]] オブジェクトがセットされます。#@end

#@since 1.8.0
#@#$?は [[c:Process::Status]] オブジェクトです。#@#Process.wait と Process.waitpid の実体は同じものになりました。#@#Process.wait2 と Process.waitpid2 の実体は同じものになりました。#@end

@raise Errno::ECHILD 子プロセスが一つもなければ発生します。

#@since 1.8.0
 pid = fork{ sleep 1 }
 Process.wait2 #=> [2756, #<Process::Status: pid=2756,exited(0)>]
#@end

@see [[man:wait(2)]]

#@since 1.8.0
--- waitall    -> [[Integer, Process::Status]]

全ての子プロセスが終了するのを待ちます。
終了した子プロセスの pid と終了ステータス
([[c:Process::Status]]) の配列の配列を返します。
子プロセスがいない状態でこのメソッドを呼び出すと空の配列を返します。

#@since 1.8.0
[[m:$?]] には最後に終了した子プロセスの [[c:Process::Status]] オブジェクトが設定されます。#@else
[[m:$?]] には最後に終了した子プロセスの終了ステータスが設定されます。#@end

    2.times {|n|
      Process.fork() { exit n }
    }
    p Process.waitall
    #=> [[2766, #<Process::Status: pid=2766,exited(1)>], [2765, #<Process::Status: pid=2765,exited(1)>]]
#@end

--- waitpid(pid, flags = 0)    -> Integer | nil
--- waitpid2(pid, flags = 0)   -> [Integer, Process::Status] | nil

pid で指定される特定の子プロセスの終了を待ち、そのプロセスが
終了した時に pid を返します。
#@since 1.8.0
waitpid2 は pid と [[c:Process::Status]] オブジェクトの配列を返します。
#@else
waitpid2 は pid と [[m:$?]] の配列を返します。
#@end
ノンブロッキングモードで子プロセスがまだ終了していない時には
nil を返します。

#@since 1.8.0
[[m:$?]] に終了した子プロセスの [[c:Process::Status]] オブジェクトがセットされます。#@end

#@since 1.8.0
#@#Ruby 1.8.0 からは $?は [[c:Process::Status]] オブジェクトです。#@#Process.wait と Process.waitpid の実体は同じものになりました。#@#Process.wait2 と Process.waitpid2 の実体は同じものになりました。#@end

@param pid 子プロセスのプロセス ID を整数で指定します。

@param flags Process モジュールの定数 [[m:Process::WNOHANG]](ノンブロッキングモード)と
             [[m:Process::WUNTRACED]] の論理和を指定します。省略したときの値は 0 です。             ノンブロッキングモードで子プロセスがまだ終了していない時には
             nil을 반환힙니다.[[man:waitpid(2)]] か [[man:wait4(2)]] の実装されていないマシンでは
             flags はいつも nil または 0 を指定する必要があります。

@raise Errno::ECHILD 子プロセスが存在しない場合に発生します。

@see [[man:waitpid(2)]]

#@since 1.9.1
--- daemon(nochdir = nil, noclose = nil)    -> 0

プロセスから制御端末を切り離し、
バックグラウンドにまわってデーモンとして動作させます。

カレントディレクトリを / に移動します。
ただし nochdir に真を指定したときにはこの動作は抑制され、
カレントディレクトリは移動しません。

標準入力・標準出力・標準エラー出力を /dev/null にリダイレクトします。
ただし noclose に真を指定したときにはこの動作は抑制され、
リダイレクトは行なわれません。

#@if (version == "1.9.1")
[[man:daemon(2)]] がなくて [[man:fork(2)]] がある環境では失敗した場合に
Errno::EXXX が発生せず -1 が返ってきます。#@end

@param nochdir true を指定した場合、カレントディレクトリを移動しません。

@param noclose true を指定した場合、標準入力・標準出力・標準エラー出力を変更しません。

@raise NotImplementedError 현재 시스템에서 이 메소드를 사용할 수 없으면 발생합니다.
@raise Errno::EXXX 작업에 실패하면 발생합니다.
#@end
#@since 1.8.0
--- detach(pid)    -> Thread

子プロセス pid の終了を監視するスレッドを生成して返します。
#@since "1.8.5"
生成したスレッドは子プロセスが終了した後に終了ステータス ([[c:Process::Status]]) を返します。
#@else
生成したスレッドは子プロセスが終了した後に nil で終了します。
#@end
指定した子プロセスが存在しなければ即座に nil で終了します。

@param pid 子スレッドのプロセス ID を整数で指定します。

@raise NotImplementedError 현재 시스템에서 이 메소드를 사용할 수 없으면 발생합니다.

    pid = fork {
      # child
      sleep 3
    }

#@since "1.8.5"
    p pid # => 7762
#@end
    th = Process.detach(pid)
    p th.value
#@since "1.8.5"
    # => #<Process::Status: pid 7762 exit 0>
#@else
    # => nil
#@end

#@end

#@#== Constants

--- PRIO_PROCESS -> Fixnum

対象とするプライオリティがプロセスプライオリティであることを表す定数です。

[[m:Process.#getpriority]] または [[m:Process.#setpriority]] で使われます。

--- PRIO_PGRP -> Fixnum

対象とするプライオリティがプロセスグループプライオリティであることを表す定数です。

[[m:Process.#getpriority]] または [[m:Process.#setpriority]] で使われます。

--- PRIO_USER -> Fixnum

対象とするプライオリティがユーザプライオリティであることを表す定数です。

[[m:Process.#getpriority]] または [[m:Process.#setpriority]] で使われます。

--- RLIMIT_AS -> Fixnum

リソースの種類がプロセスの仮想メモリサイズであることを示す定数です。

[[m:Process.#getrlimit]]、[[m:Process.#setrlimit]] で使われます。
システムによっては定義されていません。

--- RLIMIT_CORE -> Fixnum

リソースの種類が core ファイルのサイズであることを示す定数です。

[[m:Process.#getrlimit]]、[[m:Process.#setrlimit]] で使われます。
システムによっては定義されていません。

--- RLIMIT_CPU -> Fixnum

リソースの種類がプロセスの CPU 時間であることを示す定数です。

[[m:Process.#getrlimit]]、[[m:Process.#setrlimit]] で使われます。
システムによっては定義されていません。

--- RLIMIT_DATA -> Fixnum

リソースの種類がプロセスのデータ領域のサイズであることを示す定数です。

[[m:Process.#getrlimit]]、[[m:Process.#setrlimit]] で使われます。
システムによっては定義されていません。

--- RLIMIT_FSIZE -> Fixnum

リソースの種類がプロセスが生成するファイルのサイズであることを示す定数です。

[[m:Process.#getrlimit]]、[[m:Process.#setrlimit]] で使われます。
システムによっては定義されていません。

--- RLIMIT_MEMLOCK -> Fixnum

リソースの種類が [[man:mlock(2)]] でロックできるトータルのサイズであることを示す定数です。

[[m:Process.#getrlimit]]、[[m:Process.#setrlimit]] で使われます。
システムによっては定義されていません。

--- RLIMIT_NOFILE -> Fixnum

リソースの種類がプロセスがオープンできるファイルの数であることを示す定数です。

[[m:Process.#getrlimit]]、[[m:Process.#setrlimit]] で使われます。
システムによっては定義されていません。

--- RLIMIT_NPROC -> Fixnum

リソースの種類がユーザのプロセスの最大数であることを示す定数です。

[[m:Process.#getrlimit]]、[[m:Process.#setrlimit]] で使われます。
システムによっては定義されていません。

--- RLIMIT_RSS -> Fixnum

リソースの種類が使用できる実メモリの最大サイズであることを示す定数です。

[[m:Process.#getrlimit]]、[[m:Process.#setrlimit]] で使われます。
システムによっては定義されていません。

--- RLIMIT_SBSIZE -> Fixnum

リソースの種類がソケットバッファのサイズであることを示す定数です。

[[m:Process.#getrlimit]]、[[m:Process.#setrlimit]] で使われます。
システムによっては定義されていません。

--- RLIMIT_STACK -> Fixnum

リソースの種類がプロセスのスタック領域のサイズであることを示す定数です。

[[m:Process.#getrlimit]]、[[m:Process.#setrlimit]] で使われます。
システムによっては定義されていません。

--- RLIM_INFINITY -> Integer

リソースに制限がないことを意味する定数です。

[[m:Process.#getrlimit]]、[[m:Process.#setrlimit]] で使われます。


--- RLIM_SAVED_CUR -> Integer

[[m:Process.#getrlimit]], [[m:Process.#setrlimit]] で使われます。詳しくは [[man:setrlimit(2)]] を参照して下さい。

--- RLIM_SAVED_MAX -> Integer

[[m:Process.#getrlimit]], [[m:Process.#setrlimit]] で使われます。詳しくは [[man:setrlimit(2)]] を参照して下さい。

--- WNOHANG -> Fixnum

[[m:Process.#waitpid]] の第二引数に指定するフラグです。
終了した子プロセスがない時でも waitpid がブロックしません。

--- WUNTRACED -> Fixnum

[[m:Process.#waitpid]] の第二引数に指定するフラグです。
このフラグが指定された場合、waitpid は停止しているだけで
終了していない子プロセスのプロセス ID も返すようになります。
trace されている子プロセスの ID は返しません。

 include Process
 pid = fork{ Process.kill('SIGSTOP', Process.pid) }
 p pid                          #=> 4336
 p waitpid2(pid, WUNTRACED)     #=> [4336, #<Process::Status: pid=4336,stopped(SIGSTOP=19)>]

@see [[man:waitpid(2)]]
