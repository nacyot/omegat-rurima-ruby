#@since 1.9.1
= module GC::Profiler

GC의 실행횟수와 실행된 시점, 처리시간과 같은 GC에 관련된 프로파일 정보와 힙 전체 사이즈, 힙에서 사용중인 사이즈, 힙에 의존하고 있는 객체수에 관련된 정보를 다루는 모듈입니다.

@see [[c:GC]]

== Singleton Methods 

--- enabled?-> bool

GC 프로파일러가 시작되어 있으면 true를 리턴하고 그렇지 않으면 flase를 리턴합니다.

예:
  GC::Profiler.enabled?#=> false
  GC::Profiler.enable
  GC::Profiler.enabled?#=> true
  GC::Profiler.disable
  GC::Profiler.enabled?#=> false

@see [[m:GC::Profiler.enable]], [[m:GC::Profiler.disable]]

--- enable -> nil

GC 프로파일러를 시작합니다.

이 메소드를 호출하고 GC가 실행되면
GC에 과련된 프로파일 정보를 가져옵니다.

예:
  GC::Profiler.enable
  GC::Profiler.enabled?#=> true

@see [[m:GC::Profiler.disable]], [[m:GC::Profiler.enabled?]]

--- disable -> nil

GC 프로파일러를 정지합니다.

예:
  GC::Profiler.disable
  GC::Profiler.enabled?#=> false

이 메소드를 사용해도 이미 가져온 프로파일 정보는 삭제되지 않으며,이 정보를 삭제하려면 [[m:GC::Profiler.clear]] 메소드를 호출해주세요.

@see [[m:GC::Profiler.enable]], [[m:GC::Profiler.enabled?]]

--- clear -> nil

수집된 GC 프로파일 정보를 전부 삭제합니다.

예:
  GC::Profiler.enable
  GC.start
  GC.start
  GC::Profiler.report #=> GC 프로파일 정보를 출력합니다.
  GC::Profiler.clear
  GC.start
  GC::Profiler.report #=> 마지막 GC 프로파일 정보만 출력됩니다.

--- result -> String

GC のプロファイル情報をフォーマットし、文字列として返します。

プロファイル情報は、GC の発生ごとに集計します。
以下は、5 回 GC が発生した場合の実行例です。

  $ ruby -e "GC::Profiler.enable; a = Array.new(100000){ 'aa' }; puts GC::Profiler.result"
  GC 5 invokes.
  Index    Invoke Time(sec)       Use Size(byte)     Total Size(byte)         Total Object                    GC Time(ms)
      1               0.012               165600               212940                10647         0.00000000000000000000
      2               0.016               343700               360360                18018         0.00000000000000014129
      3               0.024               605620               622440                31122         0.00000000000000008843
      4               0.028              1080280              1097460                54873         0.40010000000000001119
      5               0.044              1931420              1949220                97461         0.40009999999999984466

각 열은 다음을 나타냅니다.

: GC invokes
  GC 실행횟수
: Invoke Time
  Ruby가 실행되고 GC 실행까지 걸린 시간
: Use Size
  힙에서 사용한 메모리 사이즈
: Total Size
  힙 전체 사이즈
: Total Object
  힙에 있는 객체의 개수
: GC Time
  GC 처리시간

@see [[m:GC::Profiler.report]]

--- report(out = $stdout) -> nil

[[m:GC::Profiler.result]]의 결과를 out에 출력합니다.

@param out 결과가 지정될 곳을 지정합니다.기본 설정은 $stdout입니다.

@see [[m:GC::Profiler.result]]

#@since 1.9.2
--- total_time -> Float
GC 프로파일 정보에서 GC 총 실행시간을 계산하고 msec 단위로 리턴합니다.
#@end

#@since 2.0.0
--- raw_data -> [Hash, ...] | nil

GC 프로파일 정보를 GC가 실행될 때 마다 [[c:Hash]] 배열로
(:GC_INVOKE_TIME이 빠른 순)리턴합니다.[[c:GC::Profiler]]가 시작되어 있지 않으면 
nil을 리턴합니다.

예:

  GC::Profiler.enable
  GC.start
  GC::Profiler.raw_data
  # => [
    {
       :GC_TIME=>1.3000000000000858e-05,
       :GC_INVOKE_TIME=>0.010634999999999999,
       :HEAP_USE_SIZE=>289640,
       :HEAP_TOTAL_SIZE=>588960,
       :HEAP_TOTAL_OBJECTS=>14724,
       :GC_IS_MARKED=>false
    },
    # ...
  ]

각 열은 다음을 나타냅니다.

: :GC_TIME

  GC 처리시간(초)

: :GC_INVOKE_TIME

  Ruby가 실행되고 GC 실행까지 걸린 시간(초)

: :HEAP_USE_SIZE

  힙에서 사용한 메모리 사이즈(바이트)

: :HEAP_TOTAL_SIZE

  힙 전체 사이즈(바이트)

: :HEAP_TOTAL_OBJECTS

  힙에 있는 객체의 개수

: :GC_IS_MARKED

  GC がマークフェイズかどうか

また、GC_PROFILE_MORE_DETAIL を有効にして Ruby をビルドした場合、以下の
キーも参照できます。

 * :GC_MARK_TIME
 * :GC_SWEEP_TIME
 * :ALLOCATE_INCREASE
 * :ALLOCATE_LIMIT
 * :HEAP_USE_SLOTS
 * :HEAP_LIVE_OBJECTS
 * :HEAP_FREE_OBJECTS
 * :HAVE_FINALIZE

@see [[m:GC::Profiler.report]], [[m:GC::Profiler.result]]
#@end
#@end
