= module Enumerable

반복 작업을 사용하는 클래스를 위한 Mix-in입니다.이 모듈의
모든 메소드는 each를 사용해서 정의합니다. 따라서
include한 클래스에서 each 메소드를 정의할 필요가 있습니다.


== Instance Methods

#@since 1.8.0
--- all?-> bool
--- all?{|item| ... } -> bool

모든 요소가 true이면 true를 리턴합니다.
한 요소라도 false가 있으면 곧 바로 false를 리턴합니다.

블록이 넘겨지면 각 요소에 대해서 블록을 평가하고 그 결과가
모두 true이면 true를 리턴합니다.블록의 평가 결과에 한 번이라도 false가 있으면
곧 바로 false를 리턴합니다.

예:
    # 모든 요소가 양수인지 확인하는 예    p [5,  6, 7].all?{|v| v > 0 }   # => true
    p [5, -1, 7].all?{|v| v > 0 }   # => false
#@end

#@since 1.8.0
--- any?-> bool
--- any?{|item| ... } -> bool

모든 요소가 false이면 false를 리턴합니다.
true인 요소가 하나라도 있으면 곧 바로 true를 리턴합니다.

블록이 넘겨지면 각 요소에 대해서 블록을 평가하고 그 결과가
모두 false이면 false를 리턴합니다.블록의 평가 결과에 한 번이라도 true가 있으면
곧 바로 true를 리턴합니다.

예:
    p [1, 2, 3].any?{|v| v > 3 }   # => false
    p [1, 2, 3].any?{|v| v > 1 }   # => true
#@end

#@since 1.9.1
--- collect  -> Enumerator
--- map      -> Enumerator
#@end
--- collect {|item| ... } -> [object]
--- map {|item| ... }     -> [object]

요소들을 블록에 넘겨 평가하고 그 결과들을 담은 배열을 리턴합니다.

#@until 1.9.1
블록이 넘겨지지 않으면
obj.collect {|item| item }을 실행합니다.
이 땐 [[m:Enumerable#to_a]] 메소드와 같습니다.
#@else
블록이 넘겨지지 않으면 위에서 설명한 반복을 실행하고 그 결과로 
얻어지는 배열을 리턴하는 [[c:Enumerator]] 객체를 리턴합니다.
#@end

예:
    # 모든 수에 3을 곱하는 예
    p [1, 2, 3].map {|n| n * 3 }  # => [3, 6, 9]

#@since 1.8.7
#@since 1.9.1
--- each_with_index                      -> Enumerator
#@else
--- each_with_index                      -> Enumerable::Enumerator
--- enum_with_index                      -> Enumerable::Enumerator
#@end
#@end
--- each_with_index {|item, index| ... } -> self

요소와 해당하는 요소의 인덱스를 블록에 넘겨 블록을 평가합니다.

self를 리턴합니다.

#@since 1.9.1
블록이 주어지지 않으면 
요소와 그 인덱스를 반복적으로 리턴하는 
[[c:Enumerator]]을 리턴합니다.
#@end

예:
    [5, 10, 15].each_with_index do |n, idx|
      p [n, idx]
    end
        # => [5, 0]
        #    [10, 1]
        #    [15, 2]

#@since 1.8.4
#@until 1.8.6
@see [[m:Enumerable::Enumerator#enum_with_index]]
#@end
#@end

#@since 1.8.7
#@since 1.9.1
--- find(ifnone = nil)   -> Enumerator
--- detect(ifnone = nil) -> Enumerator
#@else
--- find(ifnone = nil)   -> Enumerable::Enumerator
--- detect(ifnone = nil) -> Enumerable::Enumerator
#@end
#@end
--- find(ifnone = nil) {|item| ... }   -> object
--- detect(ifnone = nil) {|item| ... } -> object

요소에 대응하는 블록을 평가한 값이 처음 true가 되는 요소를 리턴합니다.

true가 되는 요소가 발견되지 않고 ifnone도 지정되어 있지 않으면 nil을 리턴합니다.
true가 되는 요소가 발견되지 앟고, ifnone이 지정되어 있는 경우엔 ifnone을 call한 결과를 리턴합니다.

#@since 1.9.1
블록이 주어지지 않으면 각요소에 대응하는 블록이 처음 true로 평가될 때까지 평가를 반복해, 처음 true가 되는 값을 리턴하는 [[c:Enumerator]]을 리턴합니다.
#@end

#@since 1.8.0
@param ifnone  Proc 객체와 같이 call 메소드를 가지는 객체를 지정합니다.

예:
    # 3의 배수가 되는 첫번째 요소 찾기
    p [1, 2, 3, 4, 5].find {|i| i % 3 == 0 }   # => 3
    p [2, 2, 2, 2, 2].find {|i| i % 3 == 0 }   # => nil

    # ifnone을 사용하는 예
    ifnone = proc { raise ArgumentError, "item not found" }
    p [1, 2, 3, 4, 5].find(ifnone) {|i| i % 7 == 0 }
        # ArgumentError: item not found
#@else
@param ifnone 문자열이나 call 메소드를 가지는 객체를 지정합니다.

    [1, 2, 3].find("raise") {|v| v > 4 }
        # => -:1: unhandled exception
#@end

#@since 1.8.7
#@since 1.9.1
--- find_all  -> Enumerator
--- select    -> Enumerator
#@else
--- find_all  -> Enumerable::Enumerator
--- select    -> Enumerable::Enumerator
#@end
#@end
--- find_all {|item| ... } -> [object]
--- select {|item| ... }   -> [object]

각 요소에 대응되는 블록을 평가한 값이 true가 되는 모든 요소를 포함한 배열을 리턴합니다.true가 되는 요소가 하나도 없는 경우엔 빈 배열을 리턴합니다.

#@since 1.9.1
블록이 주어지지 않으면 각 요소에 대응하는 블록을 평가한 결과가 
참이 되는 요소들의 배열을 리턴하는 [[c:Enumerator]]을 리턴합니다.
#@end

--- grep(pattern)                -> [object]
--- grep(pattern) {|item| ... }  -> [object]

pattern === item이 성립하는 요소를 전부 포함한 배열을 리턴합니다.

블록이 주어지면 pattern === item이 성립하는 요소에 대해 각각
블록을 평가하고 그 결과를 배열로 리턴합니다.
일치하는 요소가 하나도 없으면 빈 배열을 리턴합니다.

@param pattern '===' 메소드를 가지는 객체를 지정합니다.

예:
    ['aa', 'bb', 'cc', 'dd', 'ee'].grep(/[bc]/)  # => ["bb", "cc"]

#@since 1.9.1
  Array.instance_methods.grep(/gr/) # => [:grep, :group_by]
#@else
  Array.instance_methods.grep(/gr/) # => ["group_by", "grep"]
#@end

#@since 1.8.0
--- inject(init = self.first) {|result, item| ... } -> object
#@since 1.8.7
--- inject(sym)                                     -> object
--- inject(init, sym)                               -> object
--- reduce(init = self.first) {|result, item| ... } -> object
--- reduce(sym)                                     -> object
--- reduce(init, sym)                               -> object
#@end

배열의 요소들에 대해 블록의 평가 결과를 누적하는 연산을 수행합니다.

블록 인수로 inject 메소드의 인수로 지정된 init와 배열의 첫번째 요소를 사용해 블록을 평가합니다.
2번째 반복에서는 이전 블록에서 계산한 결과를 result로
다음 요소에 대해 블록을 평가합니다.
이렇게 마지막 요소까지 반복을 한 후, 마지막 블록의 실행 결과를 리턴합니다.

요소가 존재하지 않으면 init를 리턴합니다.

init 인수가 생략되어 있으면
블록을 처음 평가할 때 블록 인수로 배열의 첫번째 요소와 2번째 요소가 사용됩니다.
또한 요소가 하나밖에 없는 경우엔 블록이 평가되지 않고 첫번째 요소를 리턴합니다.
요소가 없으면 블록을 평가하지 않고 nil을 리턴합니다.

@param init 블록인자에서 처음 사용할 result의 값입니다.임의의 객체를 지정할 수 있습니다.
#@since 1.8.7
@param sym   블록 대신 사용할 메소드 이름을 [[c:Symbol]] 객체로 지정합니다.
             실행 결과에 대해서 sym 메소드가 호출됩니다.             
#@end
예:

  # 합계 계산 예  p [2, 3, 4, 5].inject {|result, item| result + item }        #=> 14
 
  # 제곱 예초기값을 지정해야 합니다.
  p [2, 3, 4, 5].inject(0) {|result, item| result + item**2 }  #=> 54

위의 예는 아래와 같이 사용할 수도 있습니다.

  result = 0
  [1, 2, 3, 4, 5].each {|v| result += v }
  p result   # => 15

#@since 1.8.7
  p [1, 2, 3, 4, 5].inject(:+)                    #=> 15
  p ["b", "c", "d"].inject("abbccddde", :squeeze) #=> "abcde"
#@end

#@end

--- member?(val)  -> bool
--- include?(val) -> bool

val과 == 연산자로 비교했을 때 true인 객체가 있으면 true를 리턴합니다.

@param val 임의의 객체

--- max -> object | nil

가장 큰 요소를 리턴합니다.
배열이 모든 요소가 서로에 대해서 <=>로 비교가 가능하다는 것을 전제로 합니다.

요소가 존재하지 않으면 nil을 리턴합니다.
해당하는 요소가 여러개 있는 경우엔 어떤 요소를 리턴할지 알 수 없습니다.

--- max {|a, b| ... } -> object | nil

블록으로 각 요소의 크기를 비교해 가장 큰 값을 리턴합니다.
요소가 존재하지 않으면 nil을 리턴합니다.

블록을 평가한 값이 a > b이면 양수, 
a == b 이면 0, a < b 이면 음수가 되어야합니다.

해당하는 요소가 여러개 있는 경우엔 어떤 요소를 리턴할지 알 수 없습니다.

@raise TypeError    블록의 평가 결과가 정수 이외의 값이면 발생합니다.

#@since 1.8.7
#@since 1.9.1
--- max_by              -> Enumerator
#@else
--- max_by              -> Enumerable::Enumerator
#@end
--- max_by{|item| ... } -> object | nil

각 요소를 순서대로 블록에 넘겨 평가하고
그 평가 결과를 <=>으로 비교해
가장 큰 값에 대응하는 원래의 요소를 리턴합니다.

요소가 존재하지 않으면 nil을 리턴합니다.
해당하는 요소가 여러개 있는 경우엔 어떤 요소를 리턴할지 알 수 없습니다.

[[m:Enumerable#max]]와 [[m:Enumerable#max_by]]의
차이는  [[m:Enumerable#sort]]와 [[m:Enumerable#sort_by]]와 같습니다.

#@since 1.9.1
블록을 지정하지 않으면 각 요소를 차례대로 블록에 넘겨 평가하고
@@@#@end

@see [[m:Enumerable#sort_by]]

#@end

--- min -> object | nil

가장 작은 요소를 리턴합니다.
배열이 모든 요소가 서로에 대해서 <=>로 비교가 가능하다는 것을 전제로 합니다.

요소가 존재하지 않으면 nil을 리턴합니다.
해당하는 요소가 여러개 있는 경우엔 어떤 요소를 리턴할지 알 수 없습니다.

--- min {|a, b| ... } -> object | nil

블록으로 각 요소의 크기를 비교해 가장 작은 값을 리턴합니다.
요소가 존재하지 않으면 nil을 리턴합니다.

블록을 평가한 값이 a > b이면 양수, 
a == b 이면 0, a < b 이면 음수가 되어야합니다.

해당하는 요소가 여러개 있는 경우엔 어떤 요소를 리턴할지 알 수 없습니다.

@raise TypeError    블록의 평가 결과가 정수 이외의 값이면 발생합니다.

#@since 1.8.7
#@since 1.9.1
--- min_by               -> Enumerator
#@else
--- min_by               -> Enumerable::Enumerator
#@end
--- min_by {|item| ... } -> object | nil

각 요소를 순서대로 블록에 넘겨 평가하고
그 평가 결과를 <=>으로 비교해
가장 작은 값에 대응하는 원래의 요소를 리턴합니다.

요소가 존재하지 않으면 nil을 리턴합니다.

해당하는 요소가 여러개 있는 경우엔 어떤 요소를 리턴할지 알 수 없습니다.

#@since 1.9.1
블록을 지정하지 않으면 각 요소를 차례대로 블록에 넘겨 평가하고
@@@#@end

[[m:Enumerable#min]]과 [[m:Enumerable#min_by]]의 차이는
[[m:Enumerable#sort]]와 [[m:Enumerable#sort_by]]와 같습니다.

@see [[m:Enumerable#sort_by]]

#@end

#@since 1.8.7
#@since 1.9.1
--- partition               -> Enumerator
#@else
--- partition               -> Enumerable::Enumerator
#@end
#@end
--- partition {|item| ... } -> [[object], [object]]

각 요소들에 대해 블록의 조건을 만족하는 지 여부를 평가하고 그에 따라 그룹을 나눕니다.
요소에 대해 블록을 평가하고 그 값이 true이 값들을 모은 배열과,
false가 되는 값들을 모은 배열, 이렇게 2개의 배열을 포함하는 배열을 리턴합니다.

#@since 1.9.1
블록이 주어지지 않으면 각 요소에 대해 블록을 평가하고 
위와 같이 그 결과가 true인 요소들의 배열과,
false인 요소들의 배열을 쌍으로 리턴하는 [[c:Enumerator]]를
리턴합니다.
#@end

예:

  [10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0].partition {|i| i % 3 == 0 }
   #=> [[9, 6, 3, 0], [10, 8, 7, 5, 4, 2, 1]]

#@since 1.8.7
#@since 1.9.1
--- reject               -> Enumerator
#@else
--- reject               -> Enumerable::Enumerator
#@end
#@end
--- reject {|item| ... } -> [object]

각 요소에 대해 블록을 평가하고
그 값이 false인 값들을 모아 새로운 배열을 리턴합니다.
조건이 지정된 select 메소드라고 할 수 있습니다.

#@since 1.9.1
블록이 주어지지 않으면 각 요소에 대응하는 블록을 평가한 결과가 
false가 되는 요소들의 배열을 리턴하는 [[c:Enumerator]]을 리턴합니다.
#@end

예:

  # 짝수를 제거함(혹수만 남김)
  [1, 2, 3, 4, 5, 6].reject {|i| i % 2 == 0 }  # => [1, 3, 5]

@see [[m:Enumerable#select]]

--- sort               -> [object]
--- sort {|a, b| ... } -> [object]

모든 요소를 오름차순으로 정렬한 배열을 리턴합니다.

블록이 주어지지 않으면 <=> 메소드를 요소에 호출해 
그 결과를 기준으로 정렬을 수행합니다.


<=> 가 아닌 방법으로 정렬을 하고 싶은 경우엔 블록을 넘겨주면블록을 평가한 결과값을 기준으로 정렬을 수행합니다.
블록을 평가한 값이 a > b이면 양수, 
a == b 이면 0, a < b 이면 음수가 되어야합니다.
블록의 평가 결과가 정수 이외의 값이면 [[c:TypeError]]가 발생합니다.

Enumerable#sort은 불안정 정렬(unstable sort)을 수행합니다.
안정 정렬을 하려면 [[m:Enumerable#sort_by]]를 활용해야만 합니다.
자세한 사항은  [[m:Enumerable#sort_by]] 항목을 참조하시기 바랍니다.

* 비교 결과가 같은 요소를 원래의 순서대로 배치하는 정렬을
'안정 정렬(stable sort)'라고 합니다.

@see [[m:Enumerable#sort_by]]

#@since 1.8.0
#@since 1.8.7
#@since 1.9.1
--- sort_by               -> Enumerator
#@else
--- sort_by               -> Enumerable::Enumerator
#@end
#@end
--- sort_by {|item| ... } -> [object]

블록을 평가한 결과를 <=> 메소드로 비교해 self를 
오름차순으로 정렬합니다.정렬된 새로운 배열을 리턴합니다.

아래의 정의와 거의 같습니다.

  class Array
    def sort_by
      self.map {|i| [yield(i), i] }.
         sort {|a, b| a[0] <=> b[0] }.
         map {|i| i[1]}
    end
  end

비교조건이 복잡할 때 [[m:Enumerable#sort]] 메소드와 비교하면 
속도 면에서 우월합니다.
sort_by를 사용하지 않는 아래의 예에서는 비교를 할 때마다 downcase가 실행됩니다.
따라서 downcase가 느리면 sort의 속도도 심각하게 느려집니다.

  p ["BAR", "FOO", "bar", "foo"].sort {|a, b| a.downcase <=> b.downcase }

하지만 아래와 같이 sort_by를 사용하면 downcase의 실행 횟수는 요소수 만큼으로 제한됩니다.
즉 정렬 시간은 O(n)이 됩니다.

  p ["BAR", "FOO", "bar", "foo"].sort_by {|v| v.downcase }

아래의 실행회수 테스트를 참고하시기 바랍니다.

  class Integer
    def count
      $n += 1
      self
    end
  end

  ary = []
  1.upto(1000) {|v| ary << rand(v) }

  $n = 0
  ary.sort {|a,b| a.count <=> b.count }
  p $n          # => 18200

  $n = 0
  ary.sort_by {|v| v.count }
  p $n          # => 1000

Enumerable#sort_by는 불안정 정렬(unstable sort)을 수행합니다.
하지만 sort_by를 아래와 같이 사용하면 안정 정렬을 구현할 수 있습니다.

  i = 0
  ary.sort_by {|v| [v, i += 1] }

* 비교 결과가 같은 요소를 원래의 순서대로 배치하는 정렬을
'안정 정렬(stable sort)'라고 합니다.

#@since 1.9.1
블록이 주어지지 않으면 각 요소를 블록으로 평가한 값으로 
이루어진 배열을 리턴하는 [[c:Enumerator]] 객체를 리턴합니다.

#@end

@see [[m:Enumerable#sort]]
#@end

--- to_a    -> [object]
--- entries -> [object]

모든 요소를 포함하는 배열을 리턴한다.

#@since 1.8.0
--- zip(*lists)  -> [[object]]
--- zip(*lists) {|v1, v2, ...| ...} -> nil

self と引数に渡した配列の各要素からなる配列の配列を生成して返します。
生成される配列の要素数は self の要素数と同じです。

ブロック付きで呼び出した場合は、
self と引数に渡した配列の各要素を順番にブロックに渡します。

#@since 1.9.1
@param lists 배열을 지정합니다.배열이 아니면 to_ary 메소드를 호출해 배열로 변환합니다.
             to_ary 메소드가 없으면 each 메소드를 사용합니다.
#@else
#@since 1.8.2
@param lists 배열을 지정합니다.배열이 아니면 to_a 메소드로 배열로 변환합니다.
#@else
@param lists 배열을 지정합니다.배열이 아니면 to_ary 메소드를 호출해 배열로 변환합니다.
#@end
#@end

예:
    p (1..3).zip([4,5,6], [7,8,9])
        # => [[1, 4, 7], [2, 5, 8], [3, 6, 9]]

    p (1..2).zip([:a,:b,:c], [:A,:B,:C,:D])
        # => [[1, :a, :A], [2, :b, :B]]

    p (1..5).zip([:a,:b,:c], [:A,:B,:C,:D])
        # => [[1, :a, :A], [2, :b, :B],
        #     [3, :c, :C], [4, nil, :D], [5, nil, nil]]

예:
    p [1,2,3].zip([4,5,6], [7,8,9]) {|ary|
      p ary
    }
        # => [1, 4, 7]
        #    [2, 5, 8]
        #    [3, 6, 9]
        #    nil
#@end

#@since 1.8.7
#@since 1.9.1
--- each_slice(n)               -> Enumerator
#@else
--- each_slice(n)               -> Enumerable::Enumerator
--- enum_slice(n)               -> Enumerable::Enumerator
#@end
--- each_slice(n) {|list| ... } -> nil
#@until 1.9.1
--- enum_slice(n) {|list| ... } -> nil
#@end

n 요소씩 블록에 인자로 넘겨 블록을 평가합니다. (예: 배열이 [1,2,3,4], n=2 이면 [1,2], [3,4])

요소수가 n으로 나눠지지 않으면 마지막 평가시에 인자로 넘겨지는 요소수가 n보다 작아집니다. 

#@until 1.9.1
enum_slice 메소드는 1.9.1 부터 더 이상 사용할 수 없습니다.
대신에 each_slice 메소드를 사용해주세요.
#@end

#@since 1.9.1
블록이 넘겨지지 않으면
n 요소씩 반복하는 [[c:Enumerator]] 객체를 리턴합니다.
#@end

@paran n 한 번에 블록에 넘길 개수를 지정합니다.

예:

  (1..10).each_slice(3) {|a| p a}
      # => [1, 2, 3]
      #    [4, 5, 6]
      #    [7, 8, 9]
      #    [10]

@see [[m:Enumerable#each_cons]]

#@since 1.9.1
--- each_cons(n)               -> Enumerator
#@else
--- each_cons(n)               -> Enumerable::Enumerator
--- enum_cons(n)               -> Enumerable::Enumerator
#@end
--- each_cons(n) {|list| ... } -> nil
#@until 1.9.1
--- enum_cons(n) {|list| ... } -> nil
#@end

요소가 중복되도록 n개씩 
블록에 넘겨 평가하니다. (예 : [1,2,3,4] 배열, n=2이면 [1,2],[2,3],[3,4])

#@until 1.9.1
enum_cons은 1.9.1부터 지원하지 않습니다.
each_cons를 대신 사용해주세요.
#@end

#@since 1.9.1
블록이 넘겨지지 않으면 요소가 중복되도록
n 요소씩 반복하는 [[c:Enumerator]] 객체를 리턴합니다.
#@end

@param n 한 번에 블록에 넘겨질 요소의 개수를 지정합니다.양수를 지정해야합니다.
         전체 요소수보다 큰 수가 지정되면 블록은 한 번도 실행되지 않습니다.

예:

  (1..10).each_cons(3){|v| p v }
  # => [1, 2, 3]
  #    [2, 3, 4]
  #    [3, 4, 5]
  #    [4, 5, 6]
  #    [5, 6, 7]
  #    [6, 7, 8]
  #    [7, 8, 9]
  #    [8, 9, 10]

@see [[m:Enumerable#each_slice]]

#@end

#@since 1.8.7

--- count                   -> Integer
--- count(item)             -> Integer
--- count {|obj| ... }  -> Integer

self 요소수를 리턴합니다.

인수를 지정하지 않으면 self의 요소수를 리턴합니다.
이 때 self가 size 메소드를 가지고 있다면 size 메소드를 호출합니다.
self에 size 메소드가 없으면 요소수를 일일에 세서 리턴합니다.

인수를 하나 지정하면 self의 요소들 중에 인수와 일치하는 요소의 
개수를 세서 리턴합니다. 이 때 일치여부는 == 연산자로 확인합니다. 

블록이 넘겨지면 블록을 평가한 결과가 true인 요소의 개수를 
리턴합니다.

@param item 세고자 하는 값.

예:

   ary = [1, 2, 4, 2]
   ary.count             # => 4
   ary.count(2)          # => 2
   ary.count{|x|x%2==0}  # => 3


#@since 1.9.1
--- cycle(n=nil)       -> Enumerator
#@else
--- cycle(n=nil)       -> Enumerable::Enumerator
#@end
--- cycle(n=nil) {|obj| ... } -> object | nil
Enumerable 객체의 각 요소를 n번이나 무한번 반복해 
블록을 평가합니다.

n에 0이나 음수를 지정하면 아무것도 하지 않습니다.
중단(break 등) 없이 반복이 끝나면 
nil을 리턴합니다.
이 메소드는 내부적으로 배열의 각요소를 저장해놓으므로 
한 번 Enumerable의 끝에 도달한 이후에 self를 변경해도 
이 메소드의 동작에는 영향을 미치지 않습니다.

  a = ["a", "b", "c"]
  a.cycle {|x| puts x }  # print, a, b, c, a, b, c,.. forever.
  a.cycle(2) {|x| puts x }  # print, a, b, c, a, b, c.

#@since 1.9.1
블록을 생략하면 n회나 무한번 enum의 각 요소를 
반복하는 [[c:Enumerator]]를 리턴합니다.
#@end

#@since 1.9.1
@return 블록을 넘기지 않으면 [[c:Enumerator]]를 리턴합니다.
        self가 비어있으면 nil을 리턴합니다.
#@else
@return 블록을 넘기지 않으면 [[c:Enumerable::Enumerator]]를 리턴합니다.
        self가 비어있으면 nil을 리턴합니다.
#@end

--- drop(n)               -> Array

Enumerable 객체 맨 앞의 n 요소를 버리고 
나머지를 배열로 리턴합니다.

@param n 버리는 요소수

   a = [1, 2, 3, 4, 5, 0]
   a.drop(3)             # => [4, 5, 0]

#@since 1.9.1
--- drop_while                    -> Enumerator
#@else
--- drop_while                    -> Enumerable::Enumerator
#@end
--- drop_while {|element| ... }   -> Array

블록을 평가해 처음으로 false가 되는 요소의 바로 앞 요소까지를 버리고, 
나머지 요소를 배열로 리턴합니다.

#@since 1.9.1
블록을 넘기지 않으면 [[c:Enumerator]]를 리턴합니다.
#@else
블록을 넘기지 않으면 [[c:Enumerable::Enumerator]]를 리턴합니다.
#@end

   a = [1, 2, 3, 4, 5, 0]
   a.drop_while {|i| i < 3 }   # => [3, 4, 5, 0]


#@since 1.9.1
--- find_index                    -> Enumerator
#@else
--- find_index                    -> Enumerable::Enumerator
#@end
--- find_index{|obj| ... }  -> Integer | nil

요소를 순서대로 블록에 넘겨 평가하고 처음으로 true가 되는 요소의 인덱스를 리턴합니다.
참이 되는 요소가 하나도 없으면 nil을 리턴합니다.

   (1..10).find_index  {|i| i % 5 == 0 and i % 7 == 0 }   #=> nil
   (1..100).find_index {|i| i % 5 == 0 and i % 7 == 0 }   #=> 34

#@since 1.9.1
블록을 넘기지 않으면 [[c:Enumerator]]를 리턴합니다.
#@else
블록을 넘기지 않으면 [[c:Enumerable::Enumerator]]를 리턴합니다.
#@end

--- first      -> object | nil
--- first(n)   -> Array

Enumerable 객체의 첫 요소나 앞의 n개를 리턴합니다.

Enumerable 객체가 비어있고 인수도 지정되어있지 않으면 nil을 리턴합니다.
인수를 지정하면 빈 배열을 리턴합니다.

@param n 가져222오려는 요소 수.

  e = "abcd".each_byte 
  e.first #=> 97 
  ㅔ;e.first(2) #=> [97,98] 
  e = "".each_byte
  e.first #=> nil
  e.first(2) #=> []

#@since 1.9.1
--- group_by               -> Enumerator
#@else
--- group_by               -> Enumerable::Enumerator
#@end
--- group_by {|obj| ... }  -> Hash

블록을 평가할 결과와 해당하는 블록에 넘겨진 요소를 각각 키와 값으로 하는 해시를 리턴합니다.


   (1..6).group_by {|i| i%3}   #=> {0=>[3, 6], 1=>[1, 4], 2=>[2, 5]}

#@since 1.9.1
블록을 생략하면 Hash를 리턴하는 
[[c:Enumerator]] 객체를 리턴합니다.
#@end

--- minmax                 -> [object, object]
--- minmax{|a, b| ... }    -> [object, object]

Enumerable 객체의 요소들 중에 최소값과 최대값 두 요소로 이루어진 
배열을 리턴합니다.

해당하는 요소가 여러개 있는 경우엔 어떤 요소를 리턴할지 알 수 없습니다.

블러이 넘겨지지 않으면 Enumerable 객체의 모든 요소가 Comparable 모듈을 인클루드하고 있다고 가정합니다.블록이 넘겨지면 블록을 평가해 
두 요소를 비교합니다.

   a = %w(albatross dog horse)
   a.minmax                                 #=> ["albatross", "horse"]
   a.minmax{|a,b| a.length <=> b.length }   #=> ["dog", "albatross"]
   [].minmax # => [nil, nil]

@see [[m:Enumerable#sort]]

#@since 1.9.1
--- minmax_by                -> Enumerator
#@else
--- minmax_by                -> Enumerable::Enumerator
#@end
--- minmax_by {|obj| ... }   -> [object, object]

Enumerable 객체의 각 요소를 블록에 넘겨 평가하고 평가한 결과를 <=> 연산자로 비교해 
최소값과 최대값으로 이루어진 배열을 리턴합니다.

해당하는 요소가 여러개 있는 경우엔 어떤 요소를 리턴할지 알 수 없습니다.

[[m:Enumerable#minmax]]와 [[m:Enumerable#minmax_by]] 메소드의 
차이점은 sort와 sort_by 메소드의 차이점과 같습니다.
자세한 사항은 [[m:Enumerable#sort_by]] 메소드를 참조해주세요.

   a = %w(albatross dog horse)
   a.minmax_by {|x| x.length }   #=> ["dog", "albatross"]

   [].minmax_by{} # => [nil, nil]

블록이 주어지지 않으면
#@since 1.9.1
[[c:Enumerator]] 객체를 생성해서 리턴합니다.
#@end

@see [[m:Enumerable#sort_by]]

--- none?-> bool
--- none?{|obj| ... }   -> bool

블록이 넘겨지지 않으면 Enumerable 객체의 모든 
요소가 false이면 true를 리턴합니다.그렇지 않으면 false를 리턴합니다.

블록이 넘겨지면 Enumerable 객체의 모든 요소를
블록인자로 넘겨 평가한 결과 모두 false이면 true를 리턴합니다.
그렇지 않으면 false를 리턴합니다.

   %w{ant bear cat}.none?%w{ant bear cat}.none?{|word| word.length == 5}  #=> true
   %w{ant bear cat}.none?%w{ant bear cat}.none?{|word| word.length >= 4}  #=> false
   [].none?#=> true
   [nil].none?#=> true
   [nil,false].none?#=> true

--- one?-> bool
--- one?{|obj| ... }    -> bool

블록이 넘겨지지 않으면 Enumerable 객체의 요소 중에 
단 하나가 true이면 true를 리턴합니다.
그렇지 않으면 false를 리턴합니다.

블록이 넘겨지면 Enumerable 객체의 요소 중에 
블록에 넘겨 평가한 결과가 true인 경우가 딱 한 번 있으면 true를 리턴합니다.
그렇지 않으면 false를 리턴합니다.

   %w{ant bear cat}.one?{|word| word.length == 4}   #=> true
   %w{ant bear cat}.one?{|word| word.length >= 4}   #=> false
   [ nil, true, 99 ].one?#=> false
   [ nil, true, false ].one?#=> true

--- take(n)               -> Array

Enumerable 객체의 제일 앞에서 n개의 요소를 배열로 리턴합니다.

@param n 요소수를 지정합니다.

   a = [1, 2, 3, 4, 5, 0]
   a.take(3)             # => [1, 2, 3]

#@since 1.9.1
--- take_while                    -> Enumerator
#@else
--- take_while                    -> Enumerable::Enumerator
#@end
--- take_while {|element| ... }   -> Array

Enumerable 객체의 요소를 차례대로 블록인자로 넘겨 블록을 평가하고, 처음으로 false가 된 바로 앞 요소까지를 배열로 리턴합니다.

   a = [1, 2, 3, 4, 5, 0]
   a.take_while {|i| i < 3 }   # => [1, 2]

블록이 주어지지 않으면
#@since 1.9.1
[[c:Enumerator]] 객체를 생성해서 리턴합니다.
#@end

#@since 1.9.1
--- reverse_each -> Enumerator
#@else
--- reverse_each -> Enumerable::Enumerator
#@end
--- reverse_each {|element| ... } -> self

각 요소를 역순으로 블록에 넘겨 평가합니다.

내부적으로 각 요소를 가지고 있는 배열을 생성합니다.

#@since 1.9.1
블록이 넘겨지지 않으면 각 요소를 역순으로 반복하는 
[[c:Enumerator]] 객체를 리턴합니다.
#@end

#@end
#@since 1.9.1
--- each_with_object(obj) -> Enumerator
--- each_with_object(obj) {|(*args), memo_obj| ... } -> object

각 요소들과 인자로 지정된 obj 객체를 블록에 넘겨 평가하고 @@@

ブロックを省略した場合は、上の繰り返しをして、最初に与えたオブジェクトを
最後に返す [[c:Enumerator]] を返します。

@param obj 임의의 객체를 지정합니다.

  evens = (1..10).each_with_object([]) {|i, a| a << i*2 }
  # => [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]

@see [[m:Enumerator#with_object]]

#@end
#@since 1.9.2
--- flat_map       -> Enumerator
--- collect_concat -> Enumerator
--- flat_map       {| obj | block }  -> Array
--- collect_concat {| obj | block }  -> Array
각 요소를 블록에 넘겨 평가하고 평가한 결과값들을 1차원 배열로 연결한 배열을 리턴합니다.

블록의 리턴값은 기본적으로 배열입니다.

블록이 넘겨지지 않으면 블록을 넘겨받아 
위의 설명대로 평가하고 그 결과를 배열로 리턴하는 
[[c:Enumerator]] 객체를 리턴합니다.

  [[1,2], [3,4]].flat_map{|i| i.map{|j| j*2}} # => [2,4,6,8]

--- chunk {|elt| ... } -> Enumerator
--- chunk(initial_state) {|elt, state| ... } -> Enumerator

要素を前から順にブロックで評価し、その結果によって
要素をチャンクに分けた(グループ化した)要素を持つ
[[c:Enumerator]] を返します。

ブロックの評価値が同じ値が続くものを一つのチャンクとして
取り扱います。すなわち、ブロックの評価値が一つ前と
異なる所でチャンクが区切られます。

返り値の [[c:Enumerator]] は各チャンクのブロック評価値と
各チャンクの要素を持つ配列のペアを各要素とします。
そのため、eachだと以下のようになります。

  enum.chunk {|elt| key }.each {|key, ary| ... }
  enum.chunk(initial_state) {|elt, state| key }.each {|key, ary| ... }

例として、整数列を連続する奇数/偶数に分ける例を見てみます。「n.even?」が変換するところで区切られているのがわかるでしょう。  [3,1,4,1,5,9,2,6,5,3,5].chunk {|n|
    n.even?  }.each {|even, ary|
    p [even, ary]
  }
  #=> [false, [3, 1]]
  #   [true, [4]]
  #   [false, [1, 5, 9]]
  #   [true, [2, 6]]
  #   [false, [5, 3, 5]]

このメソッドは各要素が既にソートされている場合に便利です。以下の例では、テキスト辞書ファイル(中身がソートされている)
に含まれる単語を先頭の文字ごとに数えています。  # line.ord は先頭の文字のコードポイントを返す
  open("/usr/share/dict/words", "r:iso-8859-1") {|f|
    f.chunk {|line| line.ord }.each {|ch, lines| p [ch.chr, lines.length] }
  }
  #=> ["\n", 1]
  #   ["A", 1327]
  #   ["B", 1372]
  #   ["C", 1507]
  #   ["D", 791]
  #   ...

さらにこのメソッドは以下の値を特別扱いします。  * ブロックの評価値が nil もしくは :_separator であった場合、
    その要素を捨てます。チャンクはこの前後で区切られます。  * ブロックの評価値 :_alone であった場合はその要素は
    単独のチャンクをなすものと解釈されます。アンダースコアで始まるシンボルはこのメソッドでは予約されています。ブロックの返り値としては用いないでください。

nil、 :_separator はある要素を無視したい場合に用います。例として svn log の出力のハイフンの所で区切りたい場合を考えます。  sep = "-"*72 + "\n" # ハイフンが72個の行
  IO.popen("svn log README") {|f|
    f.chunk {|line|
      line != sep || nil
    }.each {|_, lines|
      pp lines
    }
  }
  #=> ["r20018 | knu | 2008-10-29 13:20:42 +0900 (Wed, 29 Oct 2008) | 2 lines\n",
  #    "\n",
  #    "* README, README.ja: Update the portability section.\n",
  #    "\n"]
  #   ["r16725 | knu | 2008-05-31 23:34:23 +0900 (Sat, 31 May 2008) | 2 lines\n",
  #    "\n",
  #    "* README, README.ja: Add a note about default C flags.\n",
  #    "\n"]
  #   ...

テキストを空行で区切られた段落に分けたい場合にも nil が使えます。  File.foreach("README").chunk {|line|
    /\A\s*\z/ !~ line || nil
  }.each {|_, lines|
    pp lines
  }

「:_alone」は要素を素通ししたい場合に用います。
以下の例では「Foo#bar」という形式の行が連続している場合のみ
チャンク化し、それ以外は素通しします。

  pat = /\A[A-Z][A-Za-z0-9_]+\#/
  open(filename) {|f|
    f.chunk {|line| pat =~ line ?$& : :_alone }.each {|key, lines|
      if key != :_alone
        print lines.sort.join('')
      else
        print lines.join('')
      end
    }
  }

チャンク化に状態遷移が必要な場合は、
オプション引数 initial_state に状態を保持するオブジェクトを渡します。
この場合、ブロックの第2引数にはこのオブジェクトが dup で複製
されて渡されます。
#@# 例を追加したい

@param initial_state 状態を保持するオブジェクト
@raise RuntimeError 予約されている値を用いた場合に発生します

--- each_entry -> Enumerator
--- each_entry {|obj| block} -> self

ブロックを各要素に一度ずつ適用します。

一要素として複数の値が渡された場合はブロックには配列として渡されます。

   class Foo
     include Enumerable
     def each
       yield 1
       yield 1,2
     end
   end
   Foo.new.each_entry{|o| print o, " -- "}
   # => 1 -- [1, 2] --

블록이 넘겨지지 않으면 [[c:Enumerator]] 객체를 리턴합니다.

@see [[m:Enumerable#slice_before]]

--- slice_before(pattern) -> Enumerator
--- slice_before {|elt| bool } -> Enumerator
--- slice_before(initial_state) {|elt, state| bool } -> Enumerator

パターンがマッチした要素、もしくはブロックが真を返した要素から
次にマッチする手前までを
チャンク化(グループ化)したものを繰り返す [[c:Enumerator]] を
返します。

パターンを渡した場合は各要素に対し === が呼び出され、
それが真になったところをチャンクの先頭と見なします。
ブロックを渡した場合は、各要素に対しブロックを適用し
返り値が真であった要素をチャンクの先頭と見なします。

より厳密にいうと、「先頭要素」の手前で分割していきます。
最初の要素の評価は無視されます。

各チャンクは配列として表現されます。

[[m:Enumerable#map]] のようなメソッドを使うこともできます。  
  # 偶数要素をチャンクの先頭と見なす 
  [0,2,4,1,2,4,5,3,1,4,2].slice_before(&:even?).to_a
  # => [[0], [2], [4, 1], [2], [4, 5, 3, 1], [4], [2]]
  
  # 奇数要素をチャンクの先頭と見なす 
  [0,2,4,1,2,4,5,3,1,4,2].slice_before(&:odd?).to_a
  # => [[0, 2, 4], [1, 2, 4], [5], [3], [1, 4, 2]]

  # ChangeLog のエントリーを順に取る
  open("ChangeLog") {|f|
    f.slice_before(/\A\S/).each {|e| pp e}
  }

  # 上と同じだが、パターンでなくブロックを使う
  open("ChangeLog") {|f|
    f.slice_before {|line| /\A\S/ === line }.each {|e| pp e}
  }
  
  # "svn proplist -R" の結果を分割する
  # これは一要素が複数行にまたがっている

  IO.popen([{"LC_ALL"=>"C"}, "svn", "proplist", "-R"]) {|f|
    f.lines.slice_before(/\AProp/).each {|lines| p lines }
  }
  #=> ["Properties on '.':\n", "  svn:ignore\n", "  svk:merge\n"]
  #   ["Properties on 'goruby.c':\n", "  svn:eol-style\n"]
  #   ["Properties on 'complex.c':\n", "  svn:mime-type\n", "  svn:eol-style\n"]
  #   ["Properties on 'regparse.c':\n", "  svn:eol-style\n"]
  #   ...

複数要素にわたる状態遷移が必要な場合は、ローカル変数でこれを実現する
ことができます。例えば、連続に増える数値が3つ以上ある場合、これを
まとめる処理をするためには以下のようにします。  a = [0,2,3,4,6,7,9]
  prev = a[0]
  p a.slice_before {|e|
    prev, prev2 = e, prev
    prev2 + 1 != e
  }.map {|es|
    es.length <= 2 ?es.join(",") : "#{es.first}-#{es.last}"
  }.join(",")
  #=> "0,2-4,6,7,9"

しかし、ローカル変数を使うのが不適切な場合もあります。その場合、引数 initial_state に状態を保持するオブジェクトを
渡すと、そのオブジェクトを [[m:Object#dup]] したオブジェクトを
各要素ごとのブロック呼び出しの第2引数として渡します。  # word wrapping.
  # this assumes all characters have same width.
  def wordwrap(words, maxwidth)
    # if cols is a local variable, 2nd "each" may start with non-zero cols.
    words.slice_before(cols: 0) {|w, h|
      h[:cols] += 1 if h[:cols] != 0
      h[:cols] += w.length
      if maxwidth < h[:cols]
        h[:cols] = w.length
        true
      else
        false
      end
    }
  end
  text = (1..20).to_a.join(" ")
  enum = wordwrap(text.split(/\s+/), 10)
  puts "-"*10
  enum.each {|ws| puts ws.join(" ") }
  puts "-"*10
  #=> ----------
  #   1 2 3 4 5
  #   6 7 8 9 10
  #   11 12 13
  #   14 15 16
  #   17 18 19
  #   20
  #   ----------

以下は mbox を分割する例です。mbox 内の各メールは Unix From line 
で始まっています。そこで slice_before を用います。

  # parse mbox
  open("mbox") {|f|
    f.slice_before {|line|
      line.start_with?"From "
    }.each {|mail|
      unix_from = mail.shift
      i = mail.index("\n")
      header = mail[0...i]
      body = mail[(i+1)..-1]
      body.pop if body.last == "\n"
      fields = header.slice_before {|line| !" \t".include?(line[0]) }.to_a
      p unix_from
      pp fields
      pp body
    }
  }
  
  # split mails in mbox (slice before Unix From line after an empty line)
  open("mbox") {|f|
    f.slice_before(emp: true) {|line,h|
      prevemp = h[:emp]
      h[:emp] = line == "\n"
      prevemp && line.start_with?("From ")
    }.each {|mail|
      mail.pop if mail.last == "\n"
      pp mail
    }
  }

@param initial_state 状態を保持するオブジェクト
@see [[m:Enumerable#chunk]]

#@end

#@since 2.0.0
--- lazy -> Enumerator::Lazy

自身を lazy な Enumerator に変換したものを返します。この Enumerator は、
以下のメソッドが遅延評価を行う (つまり、配列ではなくEnumeratorを返す) 
ように再定義されています。

 * map/collect
 * flat_map/collect_concat
 * select/find_all
 * reject
 * grep
 * take, take_while
 * drop, drop_while
 * zip (※一貫性のため、ブロックを渡さないケースのみlazy)
 * cycle (※一貫性のため、ブロックを渡さないケースのみlazy)

以下はピタゴラス数 (a**2 + b**2 = c**2 を満たす自然数 a, b, c の組) を
列挙するプログラムです。

  def pythagorean_triples
    (1..Float::INFINITY).lazy.flat_map {|z|
      (1..z).flat_map {|x|
        (x..z).select {|y|
          x**2 + y**2 == z**2
        }.map {|y|
          [x, y, z]
        }
      }
    }
  end
  # 最初の10個のピタゴラス数を表示する
  p pythagorean_triples.take(10).force # takeはlazyなので、forceが必要です
  p pythagorean_triples.first(10)      # firstはeagerです
  # 100より小さいピタゴラス数を表示する
  p pythagorean_triples.take_while { |*, z| z < 100 }.force

@see [[c:Enumerator::Lazy]]
#@end
