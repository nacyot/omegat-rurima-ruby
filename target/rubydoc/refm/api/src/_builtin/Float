= class Float < Numeric
#@until 1.9.1
include Precision
#@end

부동 소수점 클래스.Flaot의 구현은 C 언어의 double와 같으며 정밀도는 환경에 의존합니다.

일반적으로 15행 이하입니다.자세한 내용은 각 시스템이 채용하고 있는
부동소수점 표준 규약, IEEE (Institute of Electrical and
Electronics Engineers: 미국전기전자기술자협회) 754를 참조해주세요.

  # 어떤 시스템에서 1/3(=0.333...)를 실행한 결과
  printf("%.50f\n", 1.0/3)
  => 0.33333333333333331482961625624739099293947219848633

[[m:Math::PI]]와 같은 수학에 관련된 상수는 [[c:Math]]를
참조해주세요.


== Class Methods

#@until 1.9.1
--- induced_from(num) -> Float
num을 Float으로 변환한 결과를 리턴합니다.

@param num 변활하고자하는 수치

@raise TypeError num이 [[c:Fixnum]], [[c:Bignum]], [[c:Float]] 객체가 아니면 발생합니다.


  p Float.induced_from(30) #=> 30.0
  p Float.induced_from(Math::PI) #=> 3.14159265358979
  begin
    Float.induced_from("1.732")
  rescue TypeError
    p $!#=> #<TypeError: failed to convert String into Float>
  end
#@end


== Instance Methods

--- +(other) -> Float
산술 연산자.self에 other를 더한 값을 리턴합니다.

@param other 이항연산에 있어서 오른쪽에 해당하는 인수(더해질 대상)

  # 합
  3.0 + 4.5 #=> 7.5

--- -(other) -> Float
산술 연산자.self에서 other를 뺀 값을 리턴합니다.

@param other 이항연산에 있어서 오른쪽에 해당하는 인수(더해질 대상)

  # 差
  4.5 - 1.3 #=> 3.2

--- -@    -> Float

단항 연산자 -입니다.
self의 부호를 바꿔서 리턴합니다.

--- *(other) -> Float
算術演算子。self에 other을 곱한 값을 리턴합니다.

@param other 이항연산에 있어서 오른쪽에 해당하는 인수(더해질 대상)

  # 積
  2.4 * 3   #=> 7.2


--- /(other) -> Float
算術演算子。self를 other로 나눈 값을 리턴합니다.

@param other 이항연산에 있어서 오른쪽에 해당하는 인수(더해질 대상)

  # 商
  1.3 / 2.4 #=> 0.541666666666667
  1.0 / 0   #=> Infinity

--- %(other) -> Float
--- modulo(other) -> Float
算術演算子。self를 other로 나눈 나머지를 리턴합니다.

@param other 이항연산에 있어서 오른쪽에 해당하는 인수(더해질 대상)

  # 剰余
  3 % 1.2   #=> 0.6
  3.0 % 0   #=> NaN

--- **(other) -> Float
算術演算子。冪を計算します。

@param other 이항연산에 있어서 오른쪽에 해당하는 인수(더해질 대상)

  # 冪
  1.2 ** 3.0  #=> 1.728
  3.0 + 4.5 - 1.3 / 2.4 * 3 % 1.2 ** 3.0 #=> 5.875
  0.0 ** 0 #=> 1.0

--- <=>(other) -> 1 | 0 | -1 | nil
self と other を比較して、self が大きい時に正、
等しい時に 0、小さい時に負の整数を返します。
比較できない場合はnilを返します

예:

  3.05 <=> 3.14 #=> -1
  1.732 <=> 1.414  #=> 1
  3.3 - 3.3 <=> 0.0 #=> 0
  3.14 <=> "hoge" #=> nil
  3.14 <=> 0.0/0.0 #=> nil

--- ==(other) -> bool

비교 연산자같은 값인지 판정합니다.

ただし、NaN 同士の比較では常に false を返します。

@param other 比較対象の数値

@return      self と other が等しい場合 true を返します。             그렇지 않으면 false를 리턴합니다.

예:

  3.14 == 3.14000 #=> true
  3.14 == 3.1415  #=> false

  # NaN 同士では常に false
  nan = 0.0/0
  nan == nan      # => false

--- <(other)  -> bool
比較演算子。other보다 작은 값인지 비교합니다.

@param other 비교하려는 수치를 지정합니다.
@return self보다 other의 값이 크면 true를 리턴합니다.
             그렇지 않으면 false를 리턴합니다.

예:

  3.14 <  3.1415  #=> true
  3.14 <= 3.1415  #=> true

--- <=(other) -> bool
比較演算子。other보다 작거나 같은 값인지 비교합니다.

@param other 비교하려는 수치를 지정합니다.
@return self보다 other의 값이 같거나 크면 
             true를 리턴합니다.
             그렇지 않으면 false를 리턴합니다.

예:

  3.14 <  3.1415  #=> true
  3.14 <= 3.1415  #=> true

--- >(other)  -> bool
比較演算子。other보다 큰지 비교합니다.

@param other 비교하려는 수치를 지정합니다.
@return self가 other보다 크면 true를 리턴합니다.
             그렇지 않으면 false를 리턴합니다.

예:

  3.14 >  3.1415  #=> false
  3.14 >= 3.1415  #=> false

--- >=(other) -> bool
比較演算子。other보다 크거나 같은지 비교합니다.

@param other 비교하려는 수치를 지정합니다.
@return self가 other보다 크거나 같으면
             true를 리턴합니다.
             그렇지 않으면 false를 리턴합니다.

예:

  3.14 >  3.1415  #=> false
  3.14 >= 3.1415  #=> false

--- finite?-> bool

数値が ∞, -∞, あるいは NaN でない場合に true を返します。그렇지 않으면 false를 리턴합니다.

예:

  3.14.finite?#=> true
  inf = 1.0/0
  inf.finite?#=> false

--- infinite?-> 1 | -1 | nil

数値が +∞ のとき 1、-∞のとき -1 を返します。それ以外は nil を返
します。

예:

  inf = 1.0/0
  p inf
  p inf.infinite?  
  => Infinity
     1
  
  inf = -1.0/0
  p inf
  p inf.infinite?  
  => -Infinity
     -1

--- nan?-> bool

数値が NaN(Not a number)のとき真を返します。

예:

  nan = 0.0/0.0
  p nan
  p nan.nan?  
  => NaN
     true

--- to_f -> self
self を返します。

예:

  3.14.to_f   #=> 3.14

--- to_i -> Integer
--- truncate -> Integer

小数点以下を切り捨てて値を整数に変換します。

예:

  3.14.to_i   #=> 3

@see [[m:Numeric#round]], [[m:Numeric#ceil]], [[m:Numeric#floor]]

--- hash -> Fixnum
ハッシュ値を返します。

예:

  pi1 = 3.14
  pi2 = 3.14
  pi3 = 3.1415

  pi1.hash #=> 335364239
  pi2.hash #=> 335364239
  pi3.hash #=> 420540030

--- abs        -> Float
#@since 1.9.1
--- magnitude  -> Float
#@end

自身の絶対値を返します。

예:

   34.56.abs     #=> 34.56
  -34.56.abs     #=> 34.56

--- ceil   -> Integer

自身と等しいかより大きな整数のうち最小のものを返します。

예:

     1.0.ceil      #=> 1
     1.2.ceil      #=> 2
     (-1.2).ceil   #=> -1
     (-1.5).ceil   #=> -1

@see [[m:Float#floor]], [[m:Float#round]], [[m:Float#truncate]]

--- divmod(other) -> [Numeric]

self を other で割った商 q と余り r を、
[q, r] という 2 要素の配列にして返します。#@since 1.8.5
商 q は常に整数ですが、余り r は整数であるとは限りません。#@else
商 q 、余り r ともに Float になります。#@end

ここで、商 q と余り r は、

  * self == other * q + r
と
  * other > 0 のとき:  0     <= r < other
  * other < 0 のとき:  other <  r <= 0
  * q は整数
をみたす数です。
このメソッドは、メソッド / と % によって定義されています。

@param other 自身を割る数を指定します。

예:

#@since 1.8.5
   11.divmod(3)         #=> [3, 2]
   (11.5).divmod(3.5)   #=> [3, 1.0]
   11.divmod(-3)        #=> [-4, -1]
   11.divmod(3.5)       #=> [3, 0.5]
   (-11).divmod(3.5)    #=> [-4, 3.0]
#@else
   11.divmod(3)         #=> [3, 2]
   (11.5).divmod(3.5)   #=> [3.0, 1.0]
   11.divmod(-3)        #=> [-4, -1]
   11.divmod(3.5)       #=> [3.0, 0.5]
   (-11).divmod(3.5)    #=> [-4.0, 3.0]
#@end

@see [[m:Numeric#div]], [[m:Numeric#modulo]]

--- floor  -> Integer

自身と等しいかより小さな整数のうち最大のものを返します。

예:

     1.0.floor      #=> 1
     1.2.floor      #=> 1
     (-1.2).floor   #=> -2
     (-1.5).floor   #=> -2

@see [[m:Numeric#ceil]], [[m:Numeric#round]], [[m:Float#truncate]]

--- eql?(other)   -> bool

自身と other のクラスが等しくかつ == メソッドで比較して等しい場合に true を返します。그렇지 않으면 false를 리턴합니다.

@param other 自身と比較したい数値を指定します。

예:

  1.0.eql?(1)   #=> false
  1.0.eql?(1.0) #=> true

#@since 1.9.1
--- round(ndigits = 0)  -> Fixnum | Float

自身ともっとも近い整数もしくは実数を返します。

中央値 0.5, -0.5 はそれぞれ 1,-1 に切り上げされます。
いわゆる四捨五入ですが、偶数丸めではありません。

@param ndigits 丸める位を指定します。       ndigitsが0ならば、小数点以下を四捨五入し、整数を返します。       ndigitsが0以上ならば、小数点以下の指定された位で四捨五入されます。       ndigitsが0以下ならば、小数点以上の指定された位で四捨五入されます。

@return 指定された引数に応じて、整数もしくは実数を返します。       ndigitsが0ならば、整数を返します。       ndigitsが0以上ならば、実数を返します。       ndigitsが0以下ならば、整数を返します。

@raise TypeError ndigits で指定されたオブジェクトが整数に変換できない場
                 合発生します。

  1.0.round      #=> 1
  1.2.round      #=> 1
  (-1.2).round   #=> -1
  (-1.5).round   #=> -2

  t = Math::PI #=> 3.141592653589793
  t.round(3)   #=> 3.142
  t.round(0)   #=> 3
  t.round(1)   #=> 3.1

  t = t**10      #=> 93648.04747608298
  t.round(-0)    #=> 93648
  t.round(-1)    #=> 93650
  t.round(-2)    #=> 93600
  t.round(-3)    #=> 94000
  t.round(-100)  #=> 0


@see [[m:Float#ceil]], [[m:Float#floor]], [[m:Float#truncate]]


#@else
--- round  -> Fixnum

自身ともっとも近い整数を返します。

中央値 0.5, -0.5 はそれぞれ 1,-1 に切り上げされます。
いわゆる四捨五入ですが、偶数丸めではありません。

예:

     1.0.round      #=> 1
     1.2.round      #=> 1
     (-1.2).round   #=> -1
     (-1.5).round   #=> -2

@see [[m:Float#ceil]], [[m:Float#floor]], [[m:Float#truncate]]
#@end

--- zero?-> bool

自身がゼロの時、真を返します。그렇지 않은 경우엔 false를 리턴합니다.

예:

  10.0.zero?#=> false
  0.zero?#=> true
  0.0.zero?#=> true

--- to_s -> String

自身を人間が読みやすい形の文字列表現にして返します。

固定小数点、浮動小数点の形式か、 "Infinity"、"-Infinity"、"NaN" のいず
れかを返します。

@return 文字列を返します。

예:

#@since 1.9.2
  0.00001.to_s             # => "1.0e-05"
  3.14.to_s                # => "3.14"
  10000_00000_00000.0.to_s # => "100000000000000.0"
  10000_00000_00000_00000.0.to_s # => "1.0e+19"
  (1.0/0.0).to_s           # => "Infinity"
  (0.0/0.0).to_s           # => "NaN"
#@else
  0.00001.to_s             # => "1.0e-05"
  3.14.to_s                # => "3.14"
  10000_00000_00000.0.to_s # => "1.0e+14"
  (1.0/0.0).to_s           # => "Infinity"
  (0.0/0.0).to_s           # => "NaN"
#@end

#@since 1.9.1
--- arg   -> 0 | Float
--- angle -> 0 | Float
--- phase -> 0 | Float

自身の偏角(正の数なら 0、負の数なら [[m:Math::PI]])を返します。

예:

  1.arg  # => 0
  -1.arg # => 3.141592653589793

ただし、自身が NaN(Not a number) であった場合は、NaN を返します。

--- denominator -> Integer

自身を [[c:Rational]] に変換した時の分母を返します。

@return 분모를 리턴합니다.

  2.0.denominator         # => 1
  0.5.denominator         # => 2

@see [[m:Float#numerator]]

--- numerator -> Integer

自身を [[c:Rational]] に変換した時の分子を返します。

@return 분자를 리턴합니다.

  2.0.numerator           # => 2
  0.5.numerator           # => 1

@see [[m:Float#denominator]]

--- to_r -> Rational

self를 [[c:Rational]]으로 변환합니다.

예:

  0.5.to_r      # => (1/2)
#@end

#@since 1.9.2
--- rationalize      -> Rational
--- rationalize(eps) -> Rational

自身から eps で指定した許容誤差の範囲に収まるような [[c:Rational]] を返
します。

eps を省略した場合は誤差が最も小さくなるような [[c:Rational]] を返しま
す。

@param eps 허용 오차.

예:

  0.3.rationalize          #=> (3/10)
  1.333.rationalize        #=> (1333/1000)
  1.333.rationalize(0.01)  #=> (4/3)

#@end

#@if (version >= "1.8.0")

#@#== Constants

--- DIG -> Fixnum

Float が表現できる最大の 10 進桁数

--- EPSILON -> Float

1.0 + Float::EPSILON != 1.0 となる最小の値

--- MANT_DIG -> Fixnum

仮数部の Float::RADIX 進法での桁数

--- MAX -> Float
Float が取り得る最大値

--- MIN -> Float

Float が取り得る最小値

--- MAX_10_EXP -> Fixnum

最大の 10 進の指数

--- MIN_10_EXP -> Fixnum

最小の 10 進の指数

--- MAX_EXP -> Fixnum

最大の Float::RADIX 進の指数

--- MIN_EXP -> Fixnum

最小の Float::RADIX 進の指数

--- RADIX -> Fixnum

指数表現の基数

--- ROUNDS -> Fixnum

丸めモード (-1: 不定、0: 0.0 の方向に丸め、1: 四捨五入、2:正の無限
大の方向に丸め、3:負の無限大の方向に丸め)

#@since 1.9.2
--- INFINITY -> Float

浮動小数点数における正の無限大

@see [[m:Float#finite?]], [[m:Float#infinite?]]

--- NAN -> Float
浮動小数点数における NaN(Not a number)


@see [[m:Float#nan?]]

#@end
#@end
