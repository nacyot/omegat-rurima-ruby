== Special Variables

--- $_ -> String | nil

[[m:Kernel.#gets]] 메소드 [[m:Kernel.#readline]] 메소드로 마지막에 읽어들인 문자열입니다.
EOF에 도달하면 nil이 됩니다.
(기억하는 법: Perl과 같음)

[[m:Kernel.#print]] 메소드와 같은 Perl에서 유래한 몇 개의 메소드들은 메소드를 생략하는 대신 $_ 변수를 사용할 수 있습니다.

이 변수는 로컬 스코프에서 유효하며 스레드 로컬입니다.@@@Ruby가 시작될 때는 nil입니다.

@see [[m:Kernel.#print]], [[m:Kernel.#gets]], [[m:Kernel.#readline]], [[m:Object::ARGF]]

=== 예
example.txt:
 foo
 bar
 baz

일 때 ruby -e 'print while gets' example.txt 명령어를 입력하면 다음과 같이 출력됩니다.
 foo
 bar
 baz

하지만 이 프로그램은 아래와 같이 작성하는 게 좀 더 Ruby답습니다.
 ARGF.each do |line|
   print line
 end


--- $& -> String | nil

현재 스코프에서 정규표현 패턴 매치에 마지막으로 성공한 문자열입니다.
마지막 패턴 매치가 실패했으면 nil을 리턴합니다.

[[m:Regexp.last_match]][0]와 같습니다.

이 변수는 로컬 스코프에서 유효하며 스레드 로컬, 읽기 전용입니다.
Ruby가 시작될 때는 nil입니다.

=== 예
 str = '<p><a href="http://example.com">example.com</a></p>'
 if %r[<a href="(.*?)">(.*?)</a>] =~ str
   p $& 
 end
 #=> "<a href=\"http://example.com\">example.com</a>"


--- $~ -> MatchData | nil

현재 스코프에서 마지막으로 매치에 성공한 [[c:MatchData]] 객체입니다.
[[m:Regexp.last_match]]의 별칭입니다.

이 변수에서 n번째 매치($n)을 읽어오려면 $~[n]을 사용합니다.

이 변수에 대입을 시도하면 Regexp.last_match를 비롯해 [[m:$&]], [[m:$1]], [[m:$2]], ...와 같은 변수들이 변하게 됩니다.
MatchData 객체도 아니고 nil도 아닌 값을 대입하려고 하면 [[c:TypeError]]가 발생합니다.

이 변수는 로컬 스코프에서 유효하며 스레드 로컬입니다.@@@Ruby가 시작될 때는 nil입니다.

=== 예
 str = '<p><a href="http://example.com">example.com</a></p>'
 if %r[<a href="(.*?)">(.*?)</a>] =~ str
   p $~[1]
 end
 #=> "http://example.com"


--- $` -> String | nil

현재 스코프에서 정규표현 패턴 매치에 마지막으로 성공한 문자열의 앞부분입니다.
마지막 패턴 매치가 실패했으면 nil을 리턴합니다.

[[m:Regexp.last_match]].pre_match와 같습니다.

이 변수는 로컬 스코프에서 유효하며 스레드 로컬, 읽기 전용입니다.
Ruby가 시작될 때는 nil입니다.

=== 예
 str = '<p><a href="http://example.com">example.com</a></p>'
 if %r[<a href="(.*?)">(.*?)</a>] =~ str
   p $`
 end
 #=> "<p>"


--- $' -> String | nil

현재 스코프에서 정규표현 패턴 매치에 마지막으로 성공한 문자열의 뒷부분입니다.
마지막 패턴 매치가 실패했으면 nil을 리턴합니다.

[[m:Regexp.last_match]].post_match와 같습니다.

이 변수는 로컬 스코프에서 유효하며 스레드 로컬, 읽기 전용입니다.
Ruby가 시작될 때는 nil입니다.

=== 예
 str = '<p><a href="http://example.com">example.com</a></p>'
 if %r[<a href="(.*?)">(.*?)</a>] =~ str
   p $'
 end
 #=> "</p>"


--- $+ -> String | nil

현재 스코프에서 정규표현 패턴 매치에 마지막으로 성공한 문자열의 마지막 괄호에 대응하는 부분문자열입니다.

마지막 패턴 매치가 실패했으면 nil을 리턴합니다.
いくつかある選択型のパターンのどれがマッチしたのか分からない時に便利です。

이 변수는 로컬 스코프에서 유효하며 스레드 로컬입니다.@@@


--- $1 -> String | nil
--- $2 -> String | nil
--- $3 -> String | nil
--- $4 -> String | nil
--- $5 -> String | nil
--- $6 -> String | nil
--- $7 -> String | nil
--- $8 -> String | nil
--- $9 -> String | nil
--- $10 -> String | nil
--- $11 -> String | nil

현재 스코프에서 정규표현 패턴 매치에 마지막으로 성공한 문자열의 n번째 괄호에 대응하는 부분문자열입니다.
해당하는 괄호 부분이 없었으면 nil이 대입되어있습니다.(覚え方: \数字 のようなもの)

양수이기만 하면 숫자 n의 제한은 없습니다.

[[m:Regexp.last_match]][1],
[[m:Regexp.last_match]][2], ... 와 같음

이 변수는 로컬 스코프에서 유효하며 스레드 로컬, 읽기 전용입니다.

=== 예
 str = '<p><a href="http://example.com">example.com</a></p>'
 if %r[<a href="(.*?)">(.*?)</a>] =~ str
   print $1
   print $2
 end
 #=> "http://example.com"
 #=> "example.com"


--- $?-> Process::Status | nil

이 스레드에서 마지막으로 종료된 자식 프로세스의 상태를 나타냅니다.

#@if (version >= "1.8.0")
[[c:Process::Status]] 객체가 담겨있습니다.
자식 프로세스가 종료할 때의 상태는 [[m:Process::Status#exitstatus]]에서 얻을 수 있습니다.
#@else
정수가 들어갑니다.이 값은 wait() 시스템 호출으로 얻어온 값 자체로
자식 프로세스의 종료상태값을 읽어오려면 오른쪽으로 8비트 시프트할 필요가 있습니다.($?>> 8).
#@end

이 변수는 스레드 로컬이자 읽기 전용입니다.

@see [[m:Process.#wait]]


--- $!-> Exception | nil

마지막으로 발생한 [[c:Exception]] 객체입니다.
해당하는 예외가 없으면 nil입니다.

[[m:Kernel.#raise]]에 의해 대입됩니다.

#@since 1.9.1
이 변수는 스레드 로컬이자 읽기 전용입니다.
#@else
이 변수는 스레드 로컬입니다.
#@end


--- $@ -> [String] | nil

마지막에 예외가 발생했을 때 백트레이스를 담은 배열입니다.
[[m:Kernel.#raise]]에 의해 대입됩니다.

배열의 각 요소는 메소드 호출의 위치를 나타내는 문자열으로 형식은

  "filename:line"

또는

  "filename:line:in `methodname'"

입니다.이 형식은 [[m:Kernel.#caller]]가 리턴하는 값과 같은 형식입니다.

$@에 값을 대입할 때는 [[m:$!]]가 nil이어야만 합니다.
$@의 값은 [[m:$!]].backtrace의 값과 같습니다.
마찬가지로 $@의 대입은 [[m:$!]].set_backtrace 메소드 호출과 같습니다.

문자열 배열도 nil도 아닌 값을 대입하려고 시도하면 [[c:TypeError]]가 발생합니다.

이 변수는 스레드 로컬입니다.

--- $SAFE -> Fixnum

현재 스레드의 세이프 레벨을 나타내는 정수입니다.세이프 레벨에 관해서는
[[d:spec/safelevel]]을 참조해주세요.

Thread.current.safe_level와 같습니다.
정수가 아닌 수를 대입하려고 시도하면  [[c:TypeError]]가 발생합니다.

이 변수는 스레드 로컬입니다.
Ruby가 시작될 때 초기값은 0입니다.

--- $= -> bool

#@since 1.9.1
과거 버전에 대한 호환성을 위해 남아있는 변수로 현재는 사용하지 않습니다.

값은 항상 false입니다.대입해도 무시됩니다.

#@else
사용하지 마시기 바랍니다.(obsolete): 이 변수는 이후 버전에서 삭제될 예정입니다.

패턴 매치와 문자열 비교 작업을 할 때 대소문자 구분 여부에 대한 플래그입니다.

과거 버전에 대한 호환성을 위해 남아있습니다.Ruby 1.9부터 사용하지 않습니다.이후 버전에서는 문법 에러를 발생시킬 수도 있으므로사용하지 말아야하는 변수입니다. 
#@end
이 변수는 전역 스코프를 가집니다.

--- $/  -> String | nil
--- $-0 -> String | nil

入力レコード区切りを表す文字列です。
awk の RS 変数のように働きます。

[[m:Kernel.#gets]] のような「行」単位の読み込みメソッドが「行」の区切りとして使用します。
Rubyがコマンドオプション -0 付きで起動されたときには -0 で指定された値が規定値となります。そうでないとき、規定値は "\n" です。

この変数に nil を設定すると読み込みメソッドはファイル全体を一度に読み込みます。
空文字列 "" を設定するとパラグラフモードとみなされ、
2 つ以上連続した改行が「行」の区切りになります。

$/ には正規表現は使えません。

この変数はグローバルスコープです。

@see [[d:spec/rubycmd]]

--- $\ -> String | nil

出力レコード区切りを表す文字列です。
[[m:Kernel.#print]] が最後にこの文字列を出力します。

デフォルトは nil で、何も出力しません。

この変数はグローバルスコープです。

--- $, -> String | nil

デフォルトの出力フィールド区切り文字列です。
[[m:Array#join]] で引数を省略した場合と、
[[m:Kernel.#print]] の各引数の間で出力されます。

デフォルト値は nil で、空文字列と同じ結果になります。

この変数はグローバルスコープです。

--- $;  -> Regexp | String | nil
--- $-F -> Regexp | String | nil

[[m:String#split]] で引数を省略した場合の区切り文字です。

nilを設定すると特殊な分割を行います。
詳細は [[m:String#split]] を参照してください。

コマンドラインオプション -F を指定して Ruby を起動した場合、
初期値は -F で指定した値です。
それ以外の時には初期値は nil です。

$; には任意のオブジェクトを代入できます。
ただし、[[m:String#split]] の仕様変更を考慮すると
常に正規表現を指定すべきです。

Ruby のバージョンによらず動作するプログラムを書くときは
$; に頼らないコードを書くべきです。

この変数はグローバルスコープです。

@see [[d:spec/rubycmd]]

--- $. -> Fixnum

いずれかの [[c:IO]] オブジェクトが最後に読んだ行の行番号です。
[[m:Object::ARGF]] などの IO 互換のオブジェクトも $. を更新します。

IO からの読み込みが起きるタイミングが予測不能であるような複雑なプログラムでは使用すべきではありません。特に、マルチスレッドプログラムではスレッド間で競合を起こす可能性があります。
そのような場合には、 [[m:IO#lineno]] を使用してください。

この変数はグローバルスコープです。Ruby가 시작될 때 초기값은 0입니다.

--- $< -> IO

すべての引数または標準入力で構成される仮想ファイルです。
定数 [[m:Object::ARGF]] の別名です。

この変数はグローバルスコープ、読み取り専用です。

--- $0 -> String
#@since 1.8.2
--- $PROGRAM_NAME -> String
#@end

現在実行中の Ruby スクリプトの名前を表す文字列です。

OS と Ruby のバージョンによっては、この変数に代入すると [[man:ps(1)]] の出力が変化します。
この機能はプログラムの現在の状態を表示するのに便利です。

この変数はグローバルスコープです。

--- $* -> [String]

Rubyスクリプトに与えられた引数を表す配列です。
組み込み定数 [[m:Object::ARGV]] の別名です。

Ruby 自身に対する引数は取り除かれています。

この変数はグローバルスコープです。

--- $$ -> Fixnum
現在実行中の Ruby プロセスのプロセス ID です。
[[m:Process.#pid]] と同じです。

この変数はグローバルスコープです。

--- $:         -> [String]
--- $LOAD_PATH -> [String]
--- $-I        -> [String]
Rubyライブラリをロードするときの検索パスです。

[[m:Kernel.#load]] や [[m:Kernel.#require]]
がファイルをロードする時に検索するディレクトリのリストを含む配列です。

起動時にはコマンドラインオプション -I で指定したディレクトリ、
環境変数 RUBYLIB の値、
コンパイル時に指定したデフォルト値
#@until 1.9.1
、"." (カレントディレクトリ)
#@end
をこの順番で含みます。

#@# 1.6.5 から以下のように変更されている
#@# 1.6.4 以前の値は書かなくていいよね……
以下に典型的な UNIX システム上でのロードパスを示します。

  -I で指定したパス
  環境変数 RUBYLIB の値
  /usr/local/lib/ruby/site_ruby/VERSION        サイト固有、バージョン依存のライブラリ
  /usr/local/lib/ruby/site_ruby/VERSION/ARCH   サイト固有、システム依存、拡張ライブラリ
  /usr/local/lib/ruby/site_ruby                サイト固有ライブラリ
  /usr/local/lib/ruby/VERSION                  標準ライブラリ
  /usr/local/lib/ruby/VERSION/ARCH             標準、システム依存、拡張ライブラリ
#@until 1.9.1
  .                                            カレントディレクトリ
#@end

#@#((-デフォルトの順序は 1.6.5 から変更されました-))
上記表中の VERSION は Ruby のバージョンを表す文字列で、
「1.6」や「1.8」です。
ARCH はハードウェアと OS を表す文字列で、
「i686-linux」や「alpha-osf5.1」などです。
ARCH の値は Config::CONFIG['arch'] で得られます。

コンパイル時のデフォルトパスは
多くの UNIX システムでは "/usr/local/lib/ruby" です。
[[d:platform/mswin32]]、[[d:platform/mingw32]]、[[d:platform/Cygwin]]、
[[d:platform/bccwin32]]、[[d:platform/mswince]] 環境では
ruby.dll の位置からの相対で決まります。
[[d:platform/DJGPP]] と [[d:platform/emx]] (OS/2) では
ruby.exe の位置からの相対で決まります。

#@until 1.9.1
-T オプションで起動時に [[m:$SAFE]] を 1 以上に
設定したときは "." (カレントディレクトリ) はロードパスに入りません。#@end

require 'foo' を実行すると、
以下のように foo.rb と foo.so が交互に探索されます。

  /usr/local/lib/ruby/site_ruby/VERSION/foo.rb
  /usr/local/lib/ruby/site_ruby/VERSION/foo.so
  /usr/local/lib/ruby/site_ruby/VERSION/ARCH/foo.rb
  /usr/local/lib/ruby/site_ruby/VERSION/ARCH/foo.so
    ::
    ::

なお、共有ライブラリの拡張子が .so でないシステムでは
「.so」が適切な拡張子に変更されます。
例えば HP-UX では require 'foo.so' とすると foo.sl を検索します。
したがって Ruby で記述されたコードでは常に .so を使うべきです。

なお、ロードパスをコマンドラインから調べるには

  $ ruby -e 'puts $:'

とします。

この変数はグローバルスコープです。

@see [[d:spec/rubycmd]], [[d:spec/envvars]]

--- $"               -> [String]
#@since 1.8.2
--- $LOADED_FEATURES -> [String]
#@end

[[m:Kernel.#require]] でロードされたファイル名を含む配列です。

[[m:Kernel.#require]] で同じファイルを
複数回ロードしないようにするためのロックとして使われます。

この変数はグローバルスコープです。

--- $DEBUG -> bool
--- $-d    -> bool

この値が真のときはインタプリタがデバッグモードになります。

コマンドラインオプション -d でセットされます。
スクリプトから代入することもできます。

デバッグモードでは、通常モードに比べて以下の違いがあります。

 * 通常時はいずれかのスレッドが例外によって終了しても
   他のスレッドは実行を続けますが、デバッグモードでは
   いずれかのスレッドが例外によって終了した時に
   インタプリタ全体が中断されるようになります。   [[m:Thread.abort_on_exception]] を
   true にセットするのと同じ効果です。 * Thread.abort_on_exception= の効果がなくなります。 * 例外を捕捉しているかどうかに関係なく、
   例外が発生した時点で [[m:$stderr]] にそれが出力されます。   スクリプトの処理は続行されます。

この変数はグローバルスコープです。

@see [[d:spec/rubycmd]]

--- $FILENAME -> String

仮想ファイル [[m:Object::ARGF]] で現在読み込み中のファイル名です。#@since 1.9.1
[[m:ARGF.class#filename]] と同じです。#@else
[[m:ARGF.filename]] と同じです。#@end

この変数はグローバルスコープです。

--- $stdin -> object
標準入力です。

自プロセスの標準入力をリダイレクトしたいときは
$stdin に代入すれば十分です。

    # 標準入力の入力元 /tmp/foo に変更
    $stdin = File.open("/tmp/foo", "w")
    gets               # 入力する
    $stdin = STDIN     # 元に戻す

ただし、[[m:Kernel.#gets]] など、特定の組み込みメソッドは
$stdin オブジェクトにメソッドを転送して実装されています。
従って、[[m:Kernel.#gets]] などが正しく動作するには、
$stdin オブジェクトに代入したオブジェクトが以下のメソッドを
正しく実装していなければいけません。

    gets, readline, readlines, getc, readchar, tell, seek,
    pos=, rewind, fileno, to_io, eof, each_line, each_byte,
    binmode, closed?

예:

    $stdin = Object.new
    def $stdin.gets
      "foo"
    end
    p gets()  # => "foo"

自プロセスだけでなく、子プロセスの標準入力もリダイレクトしたいときは
以下のように [[m:IO#reopen]] を使います。

    $stdin.reopen("/tmp/foo")

また、リダイレクトしたあと
出力先をまた元に戻したい場合は以下のようにします。

    stdin_old = $stdin.dup       # 元の $stdin を保存する
    $stdout.reopen("/tmp/foo")   # $stdin を /tmp/foo にリダイレクトする
    gets                         # /tmp/foo から入力
    $stdin.reopen stdin_old      # 元に戻す

$stdin はグローバルスコープです。

--- $>      -> object
--- $stdout -> object
#@until 1.9.1
--- $defout  -> object
#@end

標準出力です。

組み込み関数 [[m:Kernel.#print]]、[[m:Kernel.#puts]] や
[[m:Kernel.#p]] などのデフォルトの出力先となります。
初期値は [[m:Object::STDOUT]] です。
コマンドラインオプションオプション -i を指定した場合には
読み込み元と同じ名前のファイルを表します。

#@until 1.9.1
$stdout には $defout という別名がありますが、
$defout は非推奨(obsolete)になったので、
新しいコードでは常に $stdout を使ってください。#@end

$stdout に代入するオブジェクトには
write という名前のメソッドが定義されていなければいけません。

自プロセスの標準出力をリダイレクトしたいときには、
以下のように $stdout に代入すれば十分です。

    # 標準出力の出力先を /tmp/foo に変更
    $stdout = File.open("/tmp/foo", "w")
    puts "foo"         # 出力する
    $stdout = STDOUT   # 元に戻す

自プロセスだけでなく、子プロセスの標準出力もリダイレクトしたいときは
以下のように [[m:IO#reopen]] を使います。

    STDOUT.reopen("/tmp/foo", "w")

また、リダイレクトしたあと
出力先をまた元に戻したい場合は以下のようにします。

    stdout_old = $stdout.dup        # 元の $stdout を保存する
    $stdout.reopen("/tmp/foo")      # $stdout を /tmp/foo にリダイレクトする
    puts "foo"                      # /tmp/foo に出力
    $stdout.flush                   # 念のためフラッシュする
    $stdout.reopen stdout_old       # 元に戻す

$stdout はグローバルスコープです。

@see [[d:spec/rubycmd]]

--- $stderr -> object
#@until 1.9.1
--- $deferr -> object
#@end

標準エラー出力です。

Ruby インタプリタが出力するエラーメッセージや
警告メッセージ、[[m:Kernel.#warn]] の出力先となります。
初期値は [[m:Object::STDERR]] です。

#@until 1.9.1
$stderr には $deferr という別名がありますが、
$deferr は非推奨(obsolete)になったので、
新しいコードでは常に $stderr を使ってください。#@end

$stderr に代入するオブジェクトには
write という名前のメソッドが定義されていなければいけません。

自プロセスの標準エラー出力をリダイレクトしたいときには、
$stderr に代入すれば十分です。

    # 標準エラー出力の出力先を /tmp/foo に変更
    $stderr = File.open("/tmp/foo", "w")
    puts "foo"         # 出力する
    $stderr = STDERR   # 元に戻す

自プロセスだけでなく、子プロセスの標準エラー出力も
リダイレクトしたいときは以下のように [[m:IO#reopen]] を使います。

    $stderr.reopen("/tmp/foo", "w")

また、リダイレクトしたあと
出力先をまた元に戻したい場合は以下のようにします。

    stderr_old = $stderr.dup        # 元の $stderr を保存する
    $stderr.reopen("/tmp/foo")      # $stderr を /tmp/foo にリダイレクトする
    puts "foo"                      # /tmp/foo に出力
    $stderr.flush                   # 念のためフラッシュする
    $stderr.reopen stderr_old       # 元に戻す

$stderr はグローバルスコープです。

--- $VERBOSE -> bool | nil
--- $-v      -> bool | nil
--- $-w      -> bool | nil
冗長メッセージフラグです。Rubyインタプリタへの
コマンドラインオプション -v でセットされます。

#@if (version >= "1.8.0")
警告レベルは三段階あり、それぞれ以下の通りです。

: nil
    警告を出力しない
: false
    重要な警告のみ出力 (デフォルト)
: true
    すべての警告を出力する

$VERBOSE に nil, false 以外を代入すると値は true になります。

$VERBOSE の値はコマンドラインオプション
-W でも設定できます。-W0 オプションで nil、
-W1 オプションで false、
-W2, -W オプションで true が設定されます。-v オプションや
-w オプションを指定した場合は
true が設定されます。#@end

$VERBOSE はグローバルスコープです。

@see [[d:spec/rubycmd]]

#@since 1.9.1
--- $KCODE -> nil
--- $-K    -> nil

この特殊変数は何の影響も持たなくなりました。

値を代入しても無視され、参照すると常に nil です。

  >> $KCODE = true
  (irb):1: warning: variable $KCODE is no longer effective; ignored
  => true
  >> $KCODE
  (irb):2: warning: variable $KCODE is no longer effective
  => nil

@see [[d:spec/rubycmd]]

#@else
--- $KCODE -> String
--- $-K    -> String

Ruby の認識するマルチバイト文字列エンコーディングです。
変数の値は "EUC" "SJIS" "UTF8" "NONE" のいずれかの文字列です。


$KCODE の値が "EUC" のときは文字列や正規表現の
エンコーディングが EUC-JP であると仮定します。
同様に "SJIS" のときは Shift JIS を仮定します。
"UTF8" のときは UTF-8 を仮定します。
"NONE" のときはマルチバイト文字列を認識しません。

代入するときには値の最初の 1 バイトしか意味がなく、
また大文字小文字の違いも無視されます。すなわち、
"e" "E" は "EUC"、"s" "S" は "SJIS"、
"u" "U" は "UTF8"、"n" "N" は "NONE" に展開されます。

デフォルト値は "NONE" です。

[参考]

現在の実装では $KCODE は Ruby の以下の動作に影響します。

  * インタプリタの字句解析器
  * [[c:Regexp]] のエンコーディングフラグのデフォルト値
  * [[ref:d:spec/literal#regexp]]
  * [[m:Regexp.new]]
  * [[m:String#upcase]]
  * [[m:String#downcase]]
  * [[m:String#swapcase]]
  * [[m:String#capitalize]]
  * [[m:String#inspect]]
  * [[m:String#split]]
  * [[m:String#gsub]]
  * [[m:String#scan]]

$KCODE はグローバルスコープです。

@see [[d:spec/rubycmd]]

#@end

--- $-a -> bool
自動 split モードを表すフラグです。

コマンドラインオプション -a を使ったとき true に設定されます。
この変数には代入できません。

この変数はグローバルスコープです。

@see [[d:spec/rubycmd]]

--- $-i -> bool
in-place 置換モードで用いられます。

コマンドラインオプション -i を指定したとき、空文字列になります。
-i オプションに拡張子を渡した場合にはその拡張子が文字列として格納されます。

-i オプションが指定されていない時の値は nil です。

スクリプト内で $-i に代入することもでき、
その場合は [[m:Object::ARGV]] の次の
ファイルを読み込み始めるタイミングで in-place 置換を開始します。

この変数はグローバルスコープです。

@see [[d:spec/rubycmd]]

--- $-l -> bool

コマンドラインオプション -l を指定したとき true に設定されます。
この変数には代入できません。

この変数はグローバルスコープです。

@see [[d:spec/rubycmd]]

--- $-p -> bool

コマンドラインオプション -p を指定したとき true に設定されます。
この変数には代入できません。

この変数はグローバルスコープです。

#@since 1.9.1
--- $-W -> 0 | 1 | 2
コマンドラインオプション -W を指定したとき、
そのコマンドライン引数の値が設定されます。

つまり、[[m:$VERBOSE]] の値によって以下の値を返します。

: nil
    0。警告を出力しない。: false
    1。重要な警告のみ出力する。(デフォルト)
: true
    2。すべての警告を出力する。

この変数には代入できません。

この変数はグローバルスコープです。

@see [[d:spec/rubycmd]]

#@end
