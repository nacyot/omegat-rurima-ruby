= module Precision

精度をもつ具象数値クラスのためのモジュールです。

Mix-in により 精度をもつ具象数値クラスのためのユーティリティを提供します。

ここでいう精度とは実数の近似の良さを意味します。
本モジュールは、抽象数値クラスや複素数、行列など、それら自身が実数に含まれないような
クラスにインクルードすべきではありません。

== Singleton Methods

#@since 1.8.0
--- included(module_or_class) -> Precision

Precision をインクルードするクラスやモジュールに対してメソッド induced_from を自動的に定義します。

このメソッドは、Precision がインクルードされた時に呼ばれます。詳細は[[m:Module#included]] を参照してください。

#@#    ((-ruby 1.6 以前は、これを
#@#    [[m:Module#append_feature]] を再定義すること
#@#    で実現していました-))

@param module_or_class Precision をインクルードするクラスまたはモジュール

#@end

--- induced_from(number) -> object

number を自分のクラスに変換した結果を返します。

デフォルトの定義は、例外 [[c:TypeError]] を発生させるので、
Mix-in したクラスでこのメソッドを再定義する必要があります。
再定義に、[[m:Precision#prec]] を使うと、 
無限ループになる可能性があります。

@param number 変換元の数値
@raise TypeError Mix-inしたクラスでこのメソッドが再定義されていない場合に発生します。


== Instance Methods

--- prec(klass) -> object

self を精度 klass に変換した結果を返します。

デフォルトの定義では
klass.induced_from(self) を呼び出し、
その結果を返します。

新しく精度クラスを作るときは組み込みクラスの
[[m:Precision.induced_from]] を変更するのではなく、この
prec の再定義で対応するべきです。

@param klass 精度を持つ数値クラス

--- prec_i -> Fixnum

self を [[c:Integer]] に変換します。
prec(Integer) と等価です。

--- prec_f -> Float

self を [[c:Float]] に変換します。
prec(Float) と等価です。
