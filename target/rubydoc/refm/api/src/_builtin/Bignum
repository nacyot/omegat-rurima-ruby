= class Bignum < Integer

큰 수(Bignum) 클래스입니다.
계산한 결과가 [[c:Fixnum]]으로 변환 가능하면
자동적으로 [[c:Fixnum]] 클래스를 사용합니다.

Bignum은 메모리 사이즈만큼 큰 수를 사용할 수 있습니다.
ビット演算については 2 の補数表現の無限長
のビットストリングとみなすことができます。特に負の数は左側に無限に 1
のビットが立っているように操作できます。[[c:Float]] との混合に関しては、
変換時に桁落ちが生じる可能性があります。

=== 파괴적인 변경

Ruby의 Bignum 클래스는 immutable한 특징을 가지고 있습니다.
따라서 객체 자체를 파괴적으로 변경할 수 없습니다.
[[c:Fixnum]]도 마찬가지입니다.


== Instance Methods

--- [](nth) -> Fixnum

nth 번째 비트(최하위 비트(LSB)는 0번째) @@@

@param nth 몇 번째 비트를 기준으로 할 지 지정합니다.
@return 1 또는 0

self[nth] = bit 와 같은 대입을 지원하지 않는 건 Numeric과 관련된 클래스들이 
immutable한 특징을 가지기 때문입니다.

--- +(other) -> Fixnum | Bignum | Float

산술 연산자.self에 other를 더한 값을 리턴합니다.

@param other + 계산에 있어 오른쪽에 들어가는 값
@return 계산 결과

--- -(other) -> Fixnum | Bignum | Float

산술 연산자.self에서 other를 뺀 값을 리턴합니다.

@param other + 계산에 있어 오른쪽에 들어가는 값
@return 계산 결과

--- -@    -> Integer

단항 연산자 -입니다.
self의 부호를 바꿔서 리턴합니다.

--- *(other) -> Fixnum | Bignum | Float

산술 연산자.self에 other을 곱한 값을 리턴합니다.

@param other + 계산에 있어 오른쪽에 들어가는 값
@return 계산 결과

--- /(other) -> Fixnum | Bignum | Float
--- div(other) -> Fixnum | Bignum | Float

산술 연산자.self를 other로 나눈 값을 리턴합니다.

@param other + 계산에 있어 오른쪽에 들어가는 값
@return 계산 결과

--- %(other) -> Fixnum | Bignum | Float
--- modulo(other) -> Fixnum | Bignum | Float

산술 연산자.self를 other로 나눈 나머지를 리턴합니다.

@param other + 계산에 있어 오른쪽에 들어가는 값
@return 계산 결과

--- remainder(other) -> Fixnum | Bignum | Float

self를 other로 나눈 나머지를 리턴합니다.

이 때 나머지의 부호가 self와 같습니다.(% 연산자와의 차이점)

@param other self를 나누는 수.

@see [[m:Bignum#divmod]], [[m:Bignum#modulo]], [[m:Numeric#modulo]]

--- divmod(other) -> [Integer, Numeric]

self를 other로 나눈 몫 q와 나머지 r을 가지는 [q, r] 배열로 리턴합니다. 몫 q는 항상 정수이지만 나머지 r은 정수가 아닐 수도 있습니다.

@param other self를 나누는 수.

@see [[m:Numeric#divmod]]

#@until 1.9.1
--- quo(other) -> Float

self를 other로 나눈 몫을 리턴합니다.
정수 몫을 구하는 경우엔 [[m:Bignum#div]] 메소드를 사용해주세요.

#@since 1.8.7
[[m:Bignum#fdiv]] 메소드와의 차이점은 [[m:Numeric#quo]]을 참조해주세요.
#@end

@param other self를 나누는 수를 지정합니다.

@see [[m:Numeric#quo]]
#@end

#@since 1.8.7
#@since 1.9.1
--- fdiv(other) -> Float | Complex
#@else
--- fdiv(other) -> Float
#@end

self를 other로 나눈 몫을 [[c:Float]]로 리턴합니다.
#@since 1.9.1
단  [[c:Complex]]에 @@@その場合も成分は Float になります。#@end

@param other self를 나누는 수를 지정합니다.

#@since 1.9.1
@see [[m:Numeric#quo]]
#@else
@see [[m:Bignum#quo]]
#@end
#@end

--- **(other) -> Fixnum | Bignum | Float

산술 연산자.멱승(제곱)을 계산합니다.

@param other + 계산에 있어 오른쪽에 들어가는 값
@return 계산 결과

  2 ** 3 # => 8
  2 ** 0 # => 1
  0 ** 0 # => 1

--- <=>(other) -> Fixnum | nil

self와 other을 비교해서 self가 크면 1,
같으면 0, 작으면 -1을 리턴합니다.

@param other 비교하려는 수
@return      -1, 0, 1

  1 <=> 2 #=> -1
  1 <=> 1 #=> 0
  2 <=> 1 #=> 1

--- ==(other) -> bool
#@since 1.9.1
--- ===(other) -> bool
#@end

비교 연산자같은 값인지 판정합니다.

@Param other 비교하려는 수치를 지정합니다.
@return self와 other이 같으면 true를 리턴합니다.
             그렇지 않으면 false를 리턴합니다.

--- ~        -> Fixnum | Bignum
비트 연산자.否定を計算します。

  ~1  #=> -2
  ~3  #=> -4
  ~-4 #=> 3

--- |(other) -> Fixnum | Bignum
비트 이항 연산자논리합을 계산합니다.

@param other 수치를 지정합니다.

  1 | 1 #=> 1
  2 | 3 #=> 3

--- &(other) -> Fixnum | Bignum
비트 이항연산자논리곱을 계산합니다.

@param other 수치를 지정합니다.

  1 & 1 #=> 1
  2 & 3 #=> 2

--- ^(other) -> Fixnum | Bignum
비트 이항연산자베터적논리합을 계산합니다.

@param other 수치를 지정합니다.

  1 ^ 1 #=> 0
  2 ^ 3 #=> 1

--- <<(bits) -> Fixnum | Bignum

시프트 연산자bits만큼 비트를 왼쪽으로 시프트합니다.

@param bits 시프트하고자 하는 비트수.

    printf("%#b\n", 0b0101 << 1) #=> 0b1010
    p -1 << 1 #=> -2

--- >>(bits) -> Fixnum | Bignum
시프트 연산자.bits만큼 오른쪽으로 시프트합니다.

右シフトは、符号ビット(最上位ビット(MSB))が保持されます。
bitsが実数の場合、小数点以下を切り捨てた値でシフトします。

@param bits 시프트하고자 하는 비트수.

    printf("%#b\n", 0b0101 >> 1) #=> 0b10
    p -1 >> 1 #=> -1

--- size -> Fixnum

整数の実装上のサイズをバイト数で返します。

現在の実装では [[c:Fixnum]] は、sizeof(long) 固定(多くの 32
bit マシンで 4 バイト)、[[c:Bignum]]は、システム依存です。

    p 1.size
    p 0x1_0000_0000.size
    # => 4
         8

--- eql?(other) -> bool

self と other のクラスが等しくかつ同じ値である場合に true を返します。그렇지 않으면 false를 리턴합니다.

@param other self と比較したい数値。

  (1 << 64) == (1 << 64).to_f    # => true
  (1 << 64).eql?((1 << 64).to_f) # => false

--- hash -> Integer

self のハッシュ値を返します。

--- to_f -> Float

値を浮動小数点数([[c:Float]])に変換します。

--- abs -> Fixnum | Bignum
#@since 1.9.1
--- magnitude -> Fixnum | Bignum
#@end

self の絶対値を返します。

#@since 1.9.1
--- odd?-> bool

self が奇数の場合に true を返します。그렇지 않으면 false를 리턴합니다.

--- even?-> bool

self が偶数の場合に true を返します。그렇지 않으면 false를 리턴합니다.
#@end
