#@since 1.9.2
= class Random < Object

MT19937に基づく疑似乱数生成器を提供するクラスです。

=== 参考
オリジナル版 [[url:http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/mt.html]]

== Class Methods
--- new(seed = Random.new_seed) -> Random
メルセンヌ・ツイスタに基づく疑似乱数発生装置オブジェクトを作ります。
引数が省略された場合は、[[m:Random.new_seed]]の値を使用します。


@param seed 疑似乱数生成器の種を整数で指定します。

動作例： 種が同じなら同じ乱数列を発生することができる。

  prng = Random.new(1234)                                
  [ prng.rand, prng.rand ]   #=> [0.1915194503788923, 0.6221087710398319]
  [ prng.rand(10), prng.rand(1000) ]  #=> [4, 664] 
  # 同じ乱数列を発生する。  prng = Random.new(1234)                                
  [ prng.rand, prng.rand ]   #=> [0.1915194503788923, 0.6221087710398319]
  [ prng.rand(10), prng.rand(1000) ]  #=> [4, 664] 

--- new_seed -> Integer
適切な乱数の種を返します。

使用例:
 p Random.new_seed # => 184271600931914695177248627591520900872

#@since 1.9.3
--- rand -> Float
--- rand(max) -> Integer | Float
--- rand(range) -> Integer | Float | nil

疑似乱数を発生させます。

[[m:Random::DEFAULT]].rand と同じです。
[[m:Random#rand]] を参照してください。

疑似乱数生成器が [[m:Kernel.#rand]] と共通なため [[m:Kernel.#srand]] などの影響を受けます。

@param max   乱数値の上限を正の整数または実数で指定します。@param range 発生させる乱数値の範囲を [[c:Range]] オブジェクトで指定します。             range の境界は数値でなければなりません。

  srand 1234 # 乱数の種を設定する。  Random.rand(10.0)  #=> 1.9151945037889229  (0.0 以上 10.0 未満の実数)
  rand(10.0)         #=> 6                   (rand(10) と同じ)

@see [[m:Random.srand]], [[m:Random#rand]], [[m:Random::DEFAULT]]
#@else
--- rand(max = 0) -> Integer | Float

疑似乱数を発生させます。

[[m:Kernel.#rand]] と同じです。
疑似乱数生成器も共通なため [[m:Kernel.#srand]] などの影響を受けます。

@param max   乱数値の上限を正の整数で指定します。             max 自体は乱数値の範囲に含まれません。             0 を指定すると実数値の乱数を返します。@see [[m:Random.srand]], [[m:Random#rand]]
#@end

--- srand -> Integer
--- srand(number) -> Integer

デフォルトの擬似乱数生成器の種を設定し、古い種を返します。
[[m:Kernel.#srand]] と同じです。

@param number 疑似乱数発生器の種を整数で指定します。

#@since 1.9.3
@see [[m:Kernel.#rand]], [[m:Random::DEFAULT]]
#@else
@see [[m:Kernel.#rand]]
#@end

== Instance Methods
--- ==(other) -> bool

乱数生成器が等しい状態であるならばtrue を返します。

@param other 比較対象の乱数生成器


예
  r1 = Random.new(1)
  r2 = Random.new(1)

  p r1 == r2 # => true
  r2.rand
  p r1 == r2 # => false
  r1.rand
  p r1 == r2 # => true

--- bytes(size) -> String

ランダムなバイナリー文字列を返します。結果の文字列のサイズを指定できます。

@param size 結果の文字列のサイズを指定します。

예
  r2 = Random.new(1)
  p r2.bytes(10) # => "%\xF4\xC1j\xEB\x80G\xFF\x8C/"

--- marshal_dump -> Array
[[m:Random#marshal_load]] で復元可能な配列を返します。

예
  r1 = Random.new(1)
  a1 = r1.marshal_dump
  r2 = Random.new(3)
  p r1 == r2 # => false
  r3 = r2.marshal_load(a1)

  p r1 == r2 # => true
  p r1 == r3 # => true

--- marshal_load(array) -> Random

[[m:Random#marshal_dump]] で得られた配列を基に、Randomオブジェクトを復元します。

@param array 三要素以下からなる配列を指定します。             何を指定するかは[[m:Random#marshal_dump]]を参考にしてください。

@raise ArgumentError array が3より大きい場合に発生します。

예
  r1 = Random.new(1)
  a1 = r1.marshal_dump
  r2 = Random.new(3)
  r3 = r2.marshal_load(a1)

  p r1 == r2 # => true
  p r1 == r3 # => true

@see [[m:Random#marshal_dump]]

--- rand -> Float
--- rand(max) -> Integer | Float
--- rand(range) -> Integer | Float | nil

疑似乱数を発生させます。

最初の形式では 0.0 以上 1.0 未満の実数を返します。

二番目の形式では 0 以上 max 未満の数を返します。
max が正の整数なら整数を、正の実数なら実数を返します。
0 や負の数を指定することは出来ません。

三番目の形式では range で指定された範囲の値を返します。
range の始端と終端が共に整数の場合は整数を、少なくとも片方が実数の場合は実数を返します。
range に含まれる数が無い場合は nil を返します。

引数が実数でも範囲でもない場合は [[m:Object#to_int]] で変換した値が指定されたものとして扱います。

@param max   乱数値の上限を正の整数または実数で指定します。             max 自体は乱数値の範囲に含まれません。@param range 発生させる乱数値の範囲を [[c:Range]] オブジェクトで指定します。             range の境界は数値でなければなりません。

@raise ArgumentError 引数の数が0または1では無い時、引数に負の数値を与えた時に発生します。

  # Kernel.#rand とほぼ同様の使い勝手
  prng = Random.new(1234)
  prng.rand            #=> 0.1915194503788923
  srand(1234)
  rand                 #=> 0.1915194503788923
  
  # max に実数も指定出来る
  prng.rand(6.5)       #=> 4.043707011758907
  rand(6.5)            #=> 5  (rand(6) と同等)
  
  # 上と同じ種で再初期化
  prng = Random.new(1234)
  srand(1234)
  # Kernel.#rand は Array#sample などの影響を受けて値がずれることがある
  [0, 1].sample
  prng.rand            #=> 0.1915194503788923
  rand                 #=> 0.6221087710398319

@see [[m:Kernel.#rand]]

--- seed -> Integer
現在の乱数の種を返します。

예
  p Random.new(3).seed # => 3

== Private Instance Methods
--- state -> Integer
C言語レベルで定義されている構造体MTの状態を参照します。詳しくはrandom.c を参照してください。

--- left -> Integer
C言語レベルで定義されている構造体MTの変数leftを参照します。詳しくはrandom.c を参照してください。

== Private Singleton Methods

--- state -> Integer
C言語レベルで定義されている構造体MTの静的変数default_randの状態を参照します。詳しくはrandom.c を参照してください。

--- left -> Integer
C言語レベルで定義されている構造体MTの静的変数default_randの変数leftを参照します。詳しくはrandom.c を参照してください。

#@since 1.9.3
== Constants

--- DEFAULT -> Random

デフォルトの疑似乱数生成器です。
[[m:Random.rand]] や [[m:Kernel.#rand]] などで使用されます。

@see [[m:Random.srand]], [[m:Kernel.#srand]]
#@end
#@end
