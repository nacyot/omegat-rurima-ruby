= class Complex < Numeric

복소수를 다루는 클래스입니다.

[[c:Complex]] 객체를 만드려면 [[m:Kernel.#Complex]], 
[[m:Complex.rect]], [[m:Complex.polar]]、[[m:Numeric#to_c]],
[[m:String#to_c]] 메소드 중 하나를 사용합니다.

  Complex(1)           # => (1+0i)
  Complex(2, 3)        # => (2+3i)
  Complex.polar(2, 3)  # => (-1.9799849932008908+0.2822400161197344i)
  Complex(0.3)         # => (0.3+0i)
  Complex('0.3-0.5i')  # => (0.3-0.5i)
  Complex('2/3+3/4i')  # => ((2/3)+(3/4)*i)
  Complex('1@2')       # => (-0.4161468365471424+0.9092974268256817i)
  3.to_c               # => (3+0i)
  0.3.to_c             # => (0.3+0i)
  '0.3-0.5i'.to_c      # => (0.3-0.5i)
  '2/3+3/4i'.to_c      # => ((2/3)+(3/4)*i)
  '1@2'.to_c           # => (-0.4161468365471424+0.9092974268256817i)

[[c:Complex]] オブジェクトは有理数の形式も実数の形式も扱う事ができます。

  Complex(1, 1) / 2    # => ((1/2)+(1/2)*i)
  Complex(1, 1) / 2.0  # => (0.5+0.5i)


== Instance Methods

--- *(other) -> Complex

self에 other을 곱한 값을 리턴합니다.

@param other 自身に掛ける数

예:

  Complex(1, 2) * 2              # => (2+4i)
  Complex(1, 2) * Complex(2, 3)  # => (-4+4i)
  Complex(1, 2) * Rational(1, 2) # => ((1/2)+(1/1)*i)

--- **(other) -> Complex

멱승(제곱)을 계산합니다.

@param other 自身を other 乗する数

예:

  Complex('i') ** 2             # => (-1+0i)

--- +(other) -> Complex

self에 other를 더한 값을 리턴합니다.

@param other 自身に足す数

예:

  Complex(1, 2) + Complex(2, 3) # => (3+5i)

--- -(other) -> Complex

self에서 other를 뺀 값을 리턴합니다.

@param other 自身から引く数

예:

  Complex(1, 2) - Complex(2, 3) # => (-1-1i)

--- -@ -> Complex

自身の符号を反転させたものを返します。

예:

  -Complex(1)     # => (-1+0i)
  -Complex(-1, 1) # => (1-1i)

--- /(other)   -> Complex
--- quo(other) -> Complex

self를 other로 나눈 값을 리턴합니다.

@param other 自身を割る数

예:

  Complex(10.0) / 3  # => (3.3333333333333335+(0/1)*i)
  Complex(10)   / 3  # => ((10/3)+(0/1)*i)

@see [[m:Numeric#quo]]

--- ==(other) -> bool

같은 값인지 판정합니다.

@param other 自身と比較する数値

예:

  Complex(2, 1) == Complex(1) # => false
  Complex(1, 0) == Complex(1) # => true
  Complex(1, 0) == 1          # => true

--- abs       -> Float
--- magnitude -> Float

自身の絶対値を返します。

以下の計算の結果を [[c:Float]] オブジェクトで返します。

  sqrt(self.real ** 2 + self.imag **2)

예:

  Complex(1, 2).abs         # => 2.23606797749979
  Complex(3, 4).abs         # => 5.0
  Complex('1/2', '1/2').abs # => 0.7071067811865476

@see [[m:Complex#abs2]]

--- abs2 -> Numeric

自身の絶対値の 2 乗を返します。

以下の計算の結果を返します。

  self.real ** 2 + self.imag **2

예:

  Complex(1, 1).abs2         # => 2
  Complex(1.0, 1.0).abs2     # => 2.0
  Complex('1/2', '1/2').abs2 # => (1/2)

@see [[m:Complex#abs]]

--- arg   -> Float
--- angle -> Float
--- phase -> Float

自身の偏角を[-π,π]の範囲で返します。

예:

  Complex.polar(3, Math::PI/2).arg # => 1.5707963267948966

非正の実軸付近での挙動に注意してください。以下の例のように虚部が 0.0 と
-0.0 では値が変わります。

  Complex(-1, 0).arg              #=>  3.141592653589793
  Complex(-1, -0).arg             #=>  3.141592653589793
  Complex(-1, -0.0).arg           #=> -3.141592653589793

  Complex(0, 0.0).arg             #=>  0.0
  Complex(0, -0.0).arg            #=> -0.0
  Complex(-0.0, 0).arg            #=>  3.141592653589793
  Complex(-0.0, -0.0).arg         #=> -3.141592653589793

#@until 1.9.3
[注意] 1.9.2 以下では 0+0i に対して呼び出すと例外
([[c:Math::DomainError]])が発生するバグがあります。#@end

@see [[m:Numeric#arg]]

--- coerce(other) -> [Complex, Complex]

other を [[c:Complex]] に変換して [self, 変換後の other] の配列を返します。

@raise TypeError 変換できないオブジェクトを指定した場合に発生します。

예:

  Complex(1).coerce(2) # => [(2+0i), (1+0i)]

--- conjugate -> Complex
--- conj      -> Complex

自身の共役複素数を返します。

예:

  Complex(1, 2).conj # => (1-2i)

--- denominator -> Integer

分母を返します。

以下のように、実部と虚部の分母の最小公倍数を整数で返します。

  1   2       3+4i  <-  numerator(分子)
  - + -i  ->  ----
  2   3        6    <-  denominator(分母)

예:

  Complex('1/2+2/3i').denominator # => 6
  Complex(3).numerator            # => 1

@see [[m:Complex#numerator]]

--- eql?(other) -> bool

自身と other の実部と虚部のクラスが等しく、それぞれが数値として等しい場
合に true を返します。그렇지 않으면 false를 리턴합니다.

@param other 自身と比較する数値

--- fdiv(other) -> Complex

self를 other로 나눈 몫을 리턴합니다.
実部と虚部が共に [[c:Float]] の値になります。

@param other 自身を割る数

예:

  Complex(11, 22).fdiv(3) # => (3.6666666666666665+7.333333333333333i)
  Complex(11, 22).quo(3)  # => ((11/3)+(22/3)*i)

@see [[m:Complex#quo]]

--- hash -> Integer

自身のハッシュ値を返します。

--- imag      -> Numeric
--- imaginary -> Numeric

自身の虚部を返します。

예:

  Complex(3, 2).imag # => 2

@see [[m:Numeric#imag]]

--- inspect -> String

自身を人間が読みやすい形の文字列表現にして返します。

"(1+1i)", "(1-1i)" のような文字列を返します。

#@until 2.0.0
--- marshal_dump -> Array

[[m:Complex#marshal_load]] で復元可能な配列を返します。

[注意] このメソッドは 2.0 で private メソッドに変更されました。

@see [[m:Complex#marshal_load]]

--- marshal_load(ary) -> Complex

[[m:Complex#marshal_dump]] で得られた配列を基に、[[c:Complex]] オブジェ
クトを復元します。

@param ary 2 要素の数値の配列を指定します。

@raise ArgumentError 配列の要素数が 2 以外であった場合に発生します。

[注意] このメソッドは 2.0 で Complex::compatible#marshal_load に移動さ
れました。

@see [[m:Complex#marshal_dump]]
#@end

--- numerator -> Complex

分子を返します。

예:

  Complex('1/2+2/3i').numerator # => (3+4i)
  Complex(3).numerator          # => (3+0i)

@see [[m:Complex#denominator]]

--- polar -> [Numeric, Numeric]

自身の絶対値と偏角を配列にして返します。

예:

  Complex.polar(1, 2).polar # => [1, 2]

@see [[m:Numeric#polar]]

--- real -> Numeric

自身の実部を返します。

예:

  Complex(3, 2).real # => 3

--- real?-> false

항상 false를 리턴합니다.

@see [[m:Numeric#real?]]

--- rect        -> [Numeric, Numeric]
--- rectangular -> [Numeric, Numeric]

実部と虚部を配列にして返します。

예:

  Complex(3).rect    # => [3, 0]
  Complex(3.5).rect  # => [3.5, 0]
  Complex(3, 2).rect # => [3, 2]

@see [[m:Numeric#rect]]

--- to_f -> Float

自身を [[c:Float]] に変換します。

@raise RangeError 虚部が実数か、0 ではない場合に発生します。

예:

  Complex(3).to_f    # => 3.0
  Complex(3.5).to_f  # => 3.5
  Complex(3, 2).to_f # => RangeError

--- to_i -> Integer

自身を整数に変換します。

@raise RangeError 虚部が実数か、0 ではない場合に発生します。

예:

  Complex(3).to_i    # => 3
  Complex(3.5).to_i  # => 3
  Complex(3, 2).to_i # => RangeError

--- to_r             -> Rational
#@since 1.9.2
--- rationalize      -> Rational
--- rationalize(eps) -> Rational
#@end

self를 [[c:Rational]]으로 변환합니다.

#@since 1.9.2
@param eps 許容する誤差。常に無視されます。#@end

@raise RangeError 虚部が実数か、0 ではない場合に発生します。

예:

  Complex(3).to_r    # => (3/1)
  Complex(3, 2).to_r # => RangeError

#@# rationalize メソッドの引数 eps は常に無視されるため、to_r メソッド
#@# と同じエントリとしました(sho-h)。

--- to_s -> String

自身を "実部 + 虚部i" 形式の文字列にして返します。

#@since 2.0.0
--- to_c -> self

self를 리턴합니다.
#@end


== Class Methods

--- rect(r, i = 0)        -> Complex
--- rectangular(r, i = 0) -> Complex

実部が r、虚部が i である [[c:Complex]] クラスのオブジェクトを生成します。

@param r 生成する複素数の実部。

@param i 生成する複素数の虚部。생략되면 0입니다.

예:

  Complex.rect(1)           # => (1+0i)
  Complex.rect(1, 2)        # => (1+2i)
  Complex.rectangular(1, 2) # => (1+2i)

@see [[m:Kernel.#Complex]]

--- polar(r, theta = 0) -> Complex

絶対値が r、偏角が theta である [[c:Complex]] クラスのオブジェクトを生成します。

@param r 生成する複素数の絶対値。

@param theta 生成する複素数の偏角。単位はラジアンです。생략되면 0입니다.

예:

  Complex.polar(2.0)            # => (2.0+0.0i)
  Complex.polar(2.0, 0)         # => (2.0+0.0i)
  Complex.polar(2.0, Math::PI)  # => (-2.0+2.4492127076447545e-16i)

#@since 2.0.0
== Private Instance Methods

--- marshal_dump -> Array

[[m:Marshal.#load]] のためのメソッドです。
Complex::compatible#marshal_load で復元可能な配列を返します。

2.0 以降では [[m:Marshal.#load]] で 1.8 系の [[c:Complex]] オブジェクト
を保存した文字列も復元できます。

[注意] Complex::compatible は通常の方法では参照する事ができません。

#@# #6625 を参照。#@end

#@#== Constants

--- I -> Complex

虚数単位です。(0+1i) を返します。
