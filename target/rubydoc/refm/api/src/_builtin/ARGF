#@since 1.9.1
= object ARGF < ARGF.class
#@else
= object ARGF

extend Enumerable
#@end

스크립트에 지정한 인수
([[m:Object::ARGV]]를 참조)를 파일명으로 인식해서
이 파일들을 연결한 하나의 가상 파일을 나타내는 객체입니다.
ARGV가 비어있으면 표준입력을 대상으로 합니다.
ARGV를 변경하면 객체의 동작에 영향을 줍니다.

    while line = ARGF.gets
      ....
    end

이 예제는

    while argv = ARGV.shift
      File.open(argv) {|file|
        while line = file.gets
          ....
        end
      }
    end

위와 같이 동작합니다.

ARGF를 처리할 때마다 ARGV의 요소는 하나씩 삭제됩니다.
ARGF를 전부 읽어온 후에 다시 ARGF를 읽어오면
ARGF가 비어있으므로 표준입력을 읽어옵니다.

    ARGV.replace %w(/tmp/foo /tmp/bar)
    ARGF.each {|line|
        # 처리중인 ARGV의 내용을 출력
        p [ARGF.filename, ARGV]
        ARGF.skip
    }
        # => ["/tmp/foo", ["/tmp/bar"]]
        #    ["/tmp/bar", []]
    # ARGF를 전부 읽어와 ARGV가 비어있을 때
    p ARGF.gets      # => nil
    p ARGF.filename  # => "-"

[[m:Kernel.#gets]] 메스도 같은 일부 내장 함수는
실제로는 ARGF.gets와 같이 ARGF를 리시버로 하는 메소드의 축약 표현입니다.

#@since 1.9.1
ARGF [[c:ARGF.class]] 클래스의 인스턴스입니다.
각 메소드의 자세한 사향은 [[c:ARGF.class]]를 참조해주세요.

= class ARGF.class

extend Enumerable

[[c:ARGF]]를 나타내는 클래스입니다.

== Public Instance Methods
#@end

--- filename -> String
--- path -> String

처리 대상이 되는 파일명을 리턴합니다.
처리 대상이 표준입력인 경우에는 -를 리턴합니다.
내장 변수 [[m:$FILENAME]]와 같습니다.

  # 현재 디렉토리에서 파일 선택하기
  ARGV.replace(
    Dir.glob("*").reject{|name| FileTest.file?(name) == false}
  )
  ARGF.each {|line|
    p [ARGF.filename, ARGF.path, ARGV]
    ARGF.skip
  }
  #예
  #=> ["test.rb", "test.rb", ["test.rb~", "third.txt", "ugo.yaml"]]
  #=> ["test.rb~", "test.rb~", ["third.txt", "ugo.yaml"]]
  #...

--- to_s -> String
#@since 2.0.0
--- inspect -> String
#@end
항상 "ARGF" 문자열을 리턴합니다.

  # 현재 디렉토리에서 파일 선택하기
  ARGV.replace(
    Dir.glob("*").reject{|name| FileTest.file?(name) == false}
  )
  while line = ARGF.gets
    p [ARGF.filename, ARGF.to_s, ARGV]
    ARGF.skip
  end

  #예
  #=> ["test.rb", "ARGF", ["test.rb~", "third.txt", "ugo.yaml"]]
  #=> ["test.rb~", "ARGF", ["third.txt", "ugo.yaml"]]
  #...

--- file -> IO
처리 대상이 되는 [[c:File]] 객체나 [[c:IO]] 객체를
리턴합니다.

  ARGV.replace(
    Dir.glob("*").select{|name| FileTest.file?(name)}
  )

  until ARGF.closed?    printf("마지막 갱신 시각 %s (%s)\n", ARGF.file.stat.mtime, ARGF.filename)
    ARGF.skip
  end 
  #예
  #=> 마지막 갱신 시각 Thu May 03 14:05:53 +0900 2007 (sample.yaml)
  #=> 마지막 갱신 시각 Sun Aug 26 11:28:09 +0900 2007 (test.rb)
  #=> 마지막 갱신 시각 Sun Aug 26 11:27:58 +0900 2007 (test.rb~)
  #=> 마지막 갱신 시각 Sun Jun 24 13:08:12 +0900 2007 (third.txt)
  #=> 마지막 갱신 시각 Sun May 20 21:34:25 +0900 2007 (ugo.yaml)


$stdin가 IO 객체가 아니면 $stdin을 리턴합니다.

  class MyIO
    def to_io
      DATA
    end
  end

  $stdin = MyIO.new
  ARGV.push("-");

  p ARGF.file                #=> #<MyIO:0x293e840>
  p ARGF.file.to_io.readline #=> "MyIO Test\n"

  __END__
  MyIO Test
  입니다.

#@since 1.9.1
@see [[m:ARGF.class#to_io]]
#@else
@see [[m:ARGF.to_io]]
#@end

--- lineno -> Integer

인수의 모든 파일을 하나의 파일로 계산했을 때 현재 행번호를 리턴합니다.
파일 각각의 행번호를 읽어올 때는 ARGF.file.lineno를 사용합니다.

  # 현재 디렉토리에서 파일 선택하기
  ARGV.replace(
    Dir.glob("*").reject{|name| FileTest.file?(name) == false}
  )
  ARGF.each {|line|
    if ARGF.lineno < 10
      ARGF.lineno = 10
    end
    p [ ARGF.lineno, line]
  }
  #예
  #=> [10, "cat:\n"]
  #=> [11, " - name: taro\n"]
  #=> [12, "   age: 7\n"]
  #...

--- lineno=(number)
인수의 모든 파일을 하나의 파일로 계산했을 때 현재 행번호를 number으로 덮어씁니다.

@param number 바꾸려고 하는 행번호를 지정합니다.

  ARGV.replace(
    Dir.glob("*").reject{|name| FileTest.file?(name) == false}
  )

  ARGF.each {|line|
    if ARGF.lineno == 4
      ARGF.lineno = 5
    end
    p [ARGF.lineno, line]
  }
  #=> 예
  #=> [1, "cat:\n"]
  #=> [2, " - name: taro\n"]
  #=> [3, "   age: 7\n"]
  #=> [5, " - name: jiro\n"] 
  #=> [6, "   age: 23\n"]
  # ...

--- skip -> self

현재 처리중인 파일을 닫습니다.
다시 읽어오기를 시도하면 다음 인수가 되는 파일을 읽어옵니다.
self를 리턴합니다.

  # 현재 디렉토리에서 파일 선택하기
  ARGV.replace(
    Dir.glob("*").reject{|name| FileTest.file?(name) == false}
  )
  while line = ARGF.gets
    p [ARGF.filename, ARGV, ARGF.skip]
  end
  #예
  #=> ["sample.yaml", ["test.rb", "test.rb~", "third.txt", "ugo.yaml"], ARGF]
  #=> ["test.rb", ["test.rb~", "third.txt", "ugo.yaml"], ARGF]
  #...


--- binmode -> self
[[m:IO#binmode]]を参照

  require 'md5'

  ARGV.replace(
    Dir.glob("*").select{|name| FileTest.file?(name)}
  )
  files = ARGV.dup
  bm = ARGF.binmode.readlines(nil)
  bm.each_with_index {|bl, i|
    md5 = MD5.new(bl).hexdigest
    printf("%s\t%s\n", md5, files[i])
  }

  #예
  #=> fe413bf114e16b0cd596d869743e9d35        ruby-1.8.5-p35.tar.gz
  #=> 70ad729e965c9625d2dfb7fa0145b423        sample.yaml
  #=> d91e81b81673279e908a1c08e8582487        test.rb
  #=> 158c4a0a097379a08bd88abfca6a51c5        test.rb~
  #...

#@# ruby-list:43420를 참고했습니다.

@see [[m:IO#binmode]]

--- close -> self
현재 처리중인 파일을 닫습니다.아직 읽어올 파일이 남아있으면 다음 파일을 읽어옵니다.

  # 현재 디렉토리에서 파일 선택하기
  ARGV.replace(
    Dir.glob("*").reject{|name| FileTest.file?(name) == false}
  )
  ARGF.each {|line|
    p [ line.chomp, ARGF.filename ]
    ARGF.close
    if ARGF.closed?      p "ARGF is closed."
    else
      p "ARGF is not closed"
    end
  }
  if ARGF.closed?    p "ARGF had been closed."
  else
    p "ARGF is not closed"
  end
  
  #예
  #=> ["cat:", "sample.yaml"]
  #=> "ARGF is not closed"#=> "ARGF is not closed"
  #=> ["", "test.rb"]
  #=> "ARGF is not closed"#=> "ARGF is not closed"
  #=> ["--- !ruby/object:Dog ", "ugo.yaml"]
  #=> "ARGF is closed."
  #=> "ARGF had been closed."

--- closed?-> bool
ARGF가 닫혀있으면 true를 리턴합니다.

  # 현재 디렉토리에서 파일 선택하기
  ARGV.replace(
    Dir.glob("*").reject{|name| FileTest.file?(name) == false}
  )
  ARGF.each {|line|
    p [ line.chomp, ARGF.filename ]
    ARGF.close
    if ARGF.closed?      p "ARGF is closed."
    else
      p "ARGF is not closed"
    end
  }
  if ARGF.closed?    p "ARGF had been closed."
  else
    p "ARGF is not closed"
  end
  
  #예
  #=> ["cat:", "sample.yaml"]
  #=> "ARGF is not closed"#=> "ARGF is not closed"
  #=> ["", "test.rb"]
  #=> "ARGF is not closed"#=> "ARGF is not closed"
  #=> ["--- !ruby/object:Dog ", "ugo.yaml"]
  #=> "ARGF is closed."
  #=> "ARGF had been closed."

@see [[m:IO#closed?]]

--- each(rs = $/) {|line| ... } -> self
--- each_line(rs = $/) {|line| ... } -> self
#@since 1.8.7
#@since 1.9.1
--- each(rs = $/)       -> Enumerator
--- each_line(rs = $/)  -> Enumerator
#@else
--- each(rs = $/)       -> Enumerable::Enumerator
--- each_line(rs = $/)  -> Enumerable::Enumerator
#@end
#@end

ARGF의 현재 위치에서 1행씩 문자열로 읽어옵니다.

@param rs 구분자가 되는 문자을 지정합니다.

  ARGV.replace(
    Dir.glob("*").reject{|name| FileTest.file?(name) == false}
  )
  ARGF.each_line {|line|
    line.chomp!    printf("'%s' in %s\n", line, ARGF.filename)
  }
  #예
  #=> '--- !ruby/object:Dog ' in ugo.yaml
  #=> 'name: pochi' in ugo.yaml
  #=> '--- ' in ugo.yaml
  #=> ':age: 17' in ugo.yaml
  #=> ':color: white' in ugo.yaml
  #=> '--- ' in ugo.yaml
  #=> '- Chiba' in ugo.yaml
  #=> '- Saitama' in ugo.yaml


@see [[m:IO#each]], [[m:IO#each_line]], 

--- each_byte{|char| ...} -> self
#@since 1.8.7
#@since 1.9.1
--- each_byte -> Enumerator
#@else
--- each_byte -> Enumerable::Enumerator
#@end
#@end

ARGF의 현재위치에서 1바이씩 정수로 읽어와 블록에 넘겨줍니다.

  # 현재 디렉토리에서 파일 선택하기
  ARGV.replace(
    Dir.glob("*").reject{|name| FileTest.file?(name) == false}
  )
  ARGF.each_byte {|b|
    printf("%4d <-> %4s\n", b, b.chr)
  }
  #예
  #=>  45 <->    -
  #=>  32 <->
  #=>  83 <->    S
  #=>  97 <->    a
  #=> 105 <->    i
  #=> 116 <->    t
  #=>  97 <->    a
  #=> 109 <->    m
  #=>  97 <->    a
  #=>  10 <->
  #...

@see [[m:IO#each_byte]]

#@since 1.8.7
--- each_char{|c| ... }     -> self
#@since 1.9.1
--- each_char               -> Enumerator
#@else
--- each_char               -> Enumerable::Enumerator
#@end

self에 포함된 문자를 한 문자 블록에 넘겨 평가합니다.

self가 읽기 가능한 상태여야합니다.

#@until 1.9.1
멀티 바이트 문자열을 사용하려면 [[m:$KCODE]]을 올바르게 설정해야합니다.
#@end

@see [[m:IO#each_char]], [[m:IO#chars]]

--- chars{ |c| ... }        -> self
#@since 1.9.1
--- chars                   -> Enumerator

이 메소드는 더 이상 사용되지 않습니다.
[[m:ARGF.class#each_char]] 메소드를 대신 사용해주세요.
#@else
--- chars                   -> Enumerable::Enumerator

이 메소드는 더 이상 사용되지 않습니다.
[[m:ARGF.each_char]] 메소드를 대신 사용해주세요.
#@end
#@since 2.0.0
사용하면 경고 메시지를 출력합니다.
#@end

self에 포함된 문자를 한 문자 블록에 넘겨 평가합니다.

self가 읽기 가능한 상태여야합니다.

#@since 1.9.1
@see [[m:ARGF.class#each_char]]
#@else
멀티 바이트 문자열을 사용하려면 [[m:$KCODE]]을 올바르게 설정해야합니다.

@see [[m:ARGF.each_char]]
#@end
#@end

--- eof -> bool
--- eof?-> bool
현재 열려있는 파일이 eof에 도달했으면 true를 리턴합니다.그렇지 않으면 false를 리턴합니다.

@raise IOError 파일이 열려있지 않으면 발생합니다.

  # 현재 디렉토리에서 파일 선택하기
  ARGV.replace(
    Dir.glob("*").reject{|name| FileTest.file?(name) == false}
  )
  ARGF.each_line {|line|
    if ARGF.eof
      printf("eof. %s has %d(%d) line\n", ARGF.filename, ARGF.file.lineno, ARGF.lineno)
    end
  }
  begin
    if ARGF.eof?      printf("%s is eof\n", ARGF.filename)
    end
  rescue IOError
    print "IOError !!\n"
  end

  #=> 예
  #=> eof. sample.yaml has 13(13) line
  #=> eof. test.rb has 159(172) line
  #=> eof. test.rb~ has 159(331) line
  #=> eof. third.txt has 1(332) line
  #=> eof. ugo.yaml has 8(340) line
  #=> IOError !!

@see [[m:IO#eof]], [[m:IO#eof?]]

--- fileno -> Integer
--- to_i -> Integer


  # 현재 디렉토리에서 파일 선택하기
  ARGV.replace(
    Dir.glob("*").reject{|name| FileTest.file?(name) == false}
  )
  ARGF.each_line {|line|
    p [ ARGF.to_i, ARGF.filename ]
    ARGF.skip
  }
  begin
    p [ ARGF.to_i, ARGF.filename ]
  rescue ArgumentError
    print "ArgumentError\n"
  end
  #예
  #=> [3, "sample.yaml"]
  #=> [3, "test.rb"]
  #=> [3, "test.rb~"]
  #=> [3, "third.txt"]
  #=> [3, "ugo.yaml"]
  #=> ArgumentError

@raise ArgumentError

--- getc -> Integer | nil
ARGF에서 1글자를 읽어와 이 문자에 대응하는 Fixnum을 리턴합니다.EOF에 도달하면 nil을 리턴합니다.

  # 현재 디렉토리에서 파일 선택하기
  ARGV.replace(
    Dir.glob("*").reject{|name| FileTest.file?(name) == false}
  )

  while c = ARGF.getc
    printf("%d,%c.\n", c, c)
  end
  #예
  #=> 45,-.
  #=> 32, .
  #=> 67,C.
  #=> 104,h.
  #=> 105,i.
  #=> 98,b.
  #=> 97,a.
  #=> 10,
  #=> .
  #...

--- gets -> String | nil
ARGF의 현재 위치에서 1행씩 문자열로 읽어옵니다.EOF에 도달하면 nil을 리턴합니다.

  # 현재 디렉토리에서 파일 선택하기
  ARGV.replace(
    Dir.glob("*").reject{|name| FileTest.file?(name) == false}
  )

  while line = gets
    line.chomp!    printf("%s\n", line)
  end

@see [[m:Kernel.#gets]]

--- pos -> Integer
--- tell -> Integer


  ARGV.replace(
    Dir.glob("*").reject{|name| FileTest.file?(name) == false}
  )

  while c = ARGF.getc
    printf("%d '%c' %s\n", ARGF.pos, c, ARGF.filename)
    if ARGF.pos == 3
      ARGF.skip
    end
  end

  # 예
  #=> 1 'c' sample.yaml
  #=> 2 'a' sample.yaml
  #=> 3 't' sample.yaml
  #=> 1 '#' test.rb
  #=> 2 '!' test.rb
  #=> 3 '/' test.rb
  #=> 1 'd' third.txt
  #=> 2 'r' third.txt
  #=> 3 'y' third.txt
  #...

@see [[m:IO#pos]], [[m:IO#tell]]

--- pos=(n)
ARGF에 열려있는 파일의 파일포인터를 지정한 위치르 이동시킵니다.

@param n 맨 앞에서 계산한 위치를 정수로 지정합니다.

  # 현재 디렉토리에서 파일 선택하기
  ARGV.replace(
    Dir.glob("*").select{|name| FileTest.file?(name)}
  )
  print ARGF.readline
  #예
  #=> #!/usr/bin/env ruby
  ARGF.pos = 2
  print ARGF.readline
  #=> /usr/bin/env ruby
  ARGF.pos = 4
  print ARGF.readline
  #=> sr/bin/env ruby

@see [[m:IO#pos=]]

--- read(length = nil, str = nil) -> String
ARGV에 지정된 가장 앞의 파일에서 length 바이트 만큼 읽어와
그 문자열을 str에 출력합니다.읽어온 문자열을 리턴합니다.

@param length 읽어올 바이트 수를 지정합니다. nil이면 ARGV 전부를 읽어옵니다.

@param str 출력할 문자열

  # 현재 디렉토리에서 파일 선택하기
  ARGV.replace(
    Dir.glob("*").select{|name| FileTest.file?(name)}
  )

  str = "efefefe"
  ARGF.read(100, str)
  p str.size #=> 100
  p str 
  # 예
  #=> "cat:\n - name: taro\n   age: 7\n - name: jiro\n   age: 23\n---\ndog:\n shiba:\n- name: goro\n    age: 3\n  -"

@see [[m:IO#read]]

--- readchar -> Integer
ARGF에서 1글자를 읽어와 이 문자에 대응하는 Fixnum을 리턴합니다.EOF에 도달하면 EOFError이 발생합니다.

@raise EOFError EOF에 도달하면 발생합니다.

  # 현재 디렉토리에서 파일 선택하기
  ARGV.replace(
    Dir.glob("*").select{|name| FileTest.file?(name)}
  )

  begin
    c = ARGF.readchar
    printf("%4c is %4d\n", c, c)
  rescue EOFError
    p $!    break
  end while true

  # 예
  #...
  #=>    t is  116
  #=>    a is   97#=>    a is   97
  #=>    m is  109
  #=>    a is   97#=>    a is   97
  #=> 
  #=>  is   10
  #<EOFError: end of file reached>

#@since 1.9.1
@see [[m:ARGF.class#getc]]
#@else
@see [[m:ARGF.getc]]
#@end

--- readline -> String
ARGF의 현재 위치에서 1행씩 문자열로 읽어옵니다.EOF에 도달하면 EOFError이 발생합니다.

@raise EOFError EOF에 도달하면 발생합니다.

  # 현재 디렉토리에서 파일 선택하기
  ARGV.replace(
    Dir.glob("*").select{|name| FileTest.file?(name)}
  )

  begin
    line = ARGF.readline
    p line
  rescue EOFError
    p $!    break
  end while true

  #예
  #...
  #=> "- Saitama\n"
  #=> <EOFError: end of file reached>

#@since 1.9.1
@see [[m:Kernel.#readline]] [[m:ARGF.class#gets]]
#@else
@see [[m:Kernel.#readline]] [[m:ARGF.gets]]
#@end

--- readlines(rs = $/) -> [String]
--- to_a(rs = $/) -> [String]
ARGF을 행단위로 배열로 읽어와 리턴합니다.rs가 nil이면 배열의 각 요소는 AGRV의 각 파일 전체를 가지게 됩니다.

@param rs 구분자가 되는 문자열을 지정합니다.

  # 현재 디렉토리에서 파일 선택하기
  ARGV.replace(
    Dir.glob("*").select{|name| FileTest.file?(name)}
  )
  aall = ARGF.readlines
  p aall[0, 3]
  # 예
  #=> ["cat:\n", " - name: taro\n", "   age: 7\n"] 
  p ARGF.closed?#=> true

  ARGV.replace(
    Dir.glob("*").select{|name| FileTest.file?(name)}
  )

  vsize = ARGV.size
  aall = ARGF.readlines(nil)
  p ARGF.closed?#=> true
  p vsize == aall.size #=> true

@see [[m:$/]] [[m:IO#readlines]]

--- rewind -> 0
ARGF에서 현재 열려있는 파일의 파일 포인터를 맨 앞으로 되돌립니다.

  # 현재 디렉토리에서 파일 선택하기
  ARGV.replace(
    Dir.glob("*").select{|name| FileTest.file?(name)}
  )

  #각 파일에서 맨 앞의 3줄을 2회 출력
  until ARGF.closed?    1.upto(2){|i|
      printf("filename:%s at %d\n", ARGF.filename, i)
      1.upto(3){
        line = ARGF.readline
        p line
        break if ARGF.eof?      }
      ARGF.rewind
    }
    ARGF.skip
  end 

--- seek(offset, whence = IO::SEEK_SET) -> 0
ARGFが現在開いているファイルのファイルポインタを whence の位置から offset だけ移動させます。 offset 位置への移動が成功すれば 0 を返します。

@param offset 파일 포인터를 이동시킬 옵셋을 정수로 지정합니다.
@param whence [[m:IO#seek]]를 참조

  # 현재 디렉토리에서 파일 선택하기
  ARGV.replace(
    Dir.glob("*").select{|name| FileTest.file?(name)}
  )

  until ARGF.closed?    begin
      ARGF.seek(-13, IO::SEEK_END)
      printf "(%s):%s", ARGF.filename, ARGF.readline
    rescue Errno::EINVAL
      printf "Error %s (%s)\n", ARGF.filename, $!.to_s
    end
    ARGF.skip
  end
  #예
  #=> (sample.yaml):d of sample
  #=> (test.rb):.skip
  #=> (test.rb~):.skip
  #=> Error third.txt (Invalid argument - third.txt)
  #=> (ugo.yaml):

@see [[m:IO#seek]]

--- to_io -> IO
ARGF에서 현재 열려 있는 파일의 [[c:File]]이나 [[c:IO]] 객체를 리턴합니다.

  # 현재 디렉토리에서 파일 선택하기
  ARGV.replace(
    Dir.glob("*").select{|name| FileTest.file?(name)}
  )

  until ARGF.closed?    printf("마지막 갱신 시각 %s (%s)\n", ARGF.to_io.stat.mtime, ARGF.filename)
    ARGF.skip
  end 
  #예
  #=> 마지막 갱신 시각 Thu May 03 14:05:53 +0900 2007 (sample.yaml)
  #=> 마지막 갱신 시각 Sat Aug 18 16:31:42 +0900 2007 (test.rb)
  #=> 마지막 갱신 시각 Sat Aug 18 16:31:30 +0900 2007 (test.rb~)
  #=> 마지막 갱신 시각 Sun Jun 24 13:08:12 +0900 2007 (third.txt)
  #=> 마지막 갱신 시각 Sun May 20 21:34:25 +0900 2007 (ugo.yaml)
  #...

$stdin가 IO 객체가 아니면 $stdin.to_io를 리턴합니다.

  class MyIO
    def to_io
      DATA
    end
  end

  $stdin = MyIO.new
  ARGV.push("-")

  myio = ARGF.to_io
  p myio.readline #=> "MyIO Test\n"
  p ARGF.file     #=> #<MyIO:0x293ea34>

  __END__
  MyIO Test
  입니다.

#@since 1.9.1
@see [[m:ARGF.class#file]]
#@else
@see [[m:ARGF.file]]
#@end

#@since 1.8.7
#@since 1.9.1
--- bytes { |char| ... } -> self
--- bytes                -> Enumerator

이 메소드는 더 이상 사용되지 않습니다.
[[m:ARGF.class#each_byte]] 메소드를 대신 사용해주세요.
#@else
--- bytes { |char| ... } -> self
--- bytes                -> Enumerable::Enumerator

이 메소드는 더 이상 사용되지 않습니다.
[[m:ARGF.each_byte]] 메소드를 대신 사용해주세요.
#@end
#@since 2.0.0
사용하면 경고 메시지를 출력합니다.
#@end

현재 위치에서 1바이트 씩 정수로 읽어와 블록에 인수로 넘겨줍니다.

블록이 주어지지 않으면
#@since 1.9.1
[[c:Enumerator]] 객체를 생성해서 리턴합니다.
#@else
[[c:Enumerable::Enumerator]] 객체를 생성해서 리턴합니다.
#@end

   ARGF.bytes.to_a        #=> [104, 101, 108, 108, 111]

#@since 1.9.1
--- lines(rs = $/) { |line| ... }   -> self
--- lines(limit) { |line| ... }     -> self
--- lines(rs, limit) { |line| ... } -> self
--- lines(rs = $/)                  -> Enumerator
--- lines(limit)                    -> Enumerator
--- lines(rs, limit)                -> Enumerator

이 메소드는 더 이상 사용되지 않습니다.
[[m:ARGF.class#each_line]] 메소드를 대신 사용해주세요.
#@else
--- lines(rs = $/) { |line| ... }   -> self
--- lines(rs = $/)                  -> Enumerable::Enumerator

이 메소드는 더 이상 사용되지 않습니다.
[[m:ARGF.each_line]] 메소드를 대신 사용해주세요.
#@end
#@since 2.0.0
사용하면 경고 메시지를 출력합니다.
#@end

현재 위치에서 1행씩 문자열로 읽어와 블록에 인수로 넘겨줍니다.

블록이 주어지지 않으면
#@since 1.9.1
[[c:Enumerator]] 객체를 생성해서 리턴합니다.
#@else
[[c:Enumerable::Enumerator]] 객체를 생성해서 리턴합니다.
#@end

텍스트를 읽어오는 메소드로 작동합니다.

#@since 1.9.1
limit로 읽어올 문자열의 최대 바이트수를 지정합니다.
멀티 바이트 문자의 경우엔 중간에 문자가 깨지지 않도록
limit보다 더 읽어올 수도 있습니다.
#@end

@param rs 행 구분 문자를 지정합니다.rs에 nil을 지정하면 줄바꿈을 행 구분 문자로 사용합니다.
          빈 문자열 ""를 지정하면 연속되는 줄바꿈을 행 구분 문자로 사용합니다.(문단 모드)

#@since 1.9.1
@param limit 읽어올 문자열의 최대 바이트수를 지정합니다.
#@end

   ARGF.lines.to_a   #=> ["foo\n", "bar\n"]

#@since 1.9.1
@see [[m:$/]], [[m:ARGF.class#each_line]]
#@else
@see [[m:$/]], [[m:ARGF.each_line]]
#@end

--- getbyte   -> Integer | nil

현재 위치에서 1바이트를 정수로 읽어와 리턴합니다.
EOF에 도달하면 nil을 리턴합니다.

   ARGF.getbyte   #=> 84
   ARGF.getbyte   #=> 104

--- readbyte   -> Integer

현재 위치에서 1바이트를 정수로 읽어와 리턴합니다.
EOF에 도달하면 nil을 리턴합니다.

@raise EOFError EOF에 도달하면 발생합니다.

#@end

#@since 1.9.1
--- readpartial(length, str = nil) -> String
[[m:IO#readpartial]]를 참주해주세요.

@see [[m:IO#readpartial]]

#@end

#@since 2.0.0
--- each_codepoint{ |c| ... }    -> self
--- each_codepoint               -> Enumerator

self의 각 코드 포인트를 블록에 넘겨 평가합니다.

블록 인수는 코드 포인트를 나타내는 정수입니다.

블록이 생략되면 [[c:Enumerator]] 객체를 리턴합니다.

#@# 2.0에서 추가된 메소드로 IO#codepoints @@@--- codepoints { |c| ... }       -> self
--- codepoints                   -> Enumerator

이 메소드는 더 이상 사용되지 않습니다.
[[m:ARGF.class#each_codepoint]] 메소드를 대신 사용해주세요.
사용하면 경고가 출력됩니다.

self의 각 코드 포인트를 블록에 넘겨 평가합니다.

블록 인수는 코드 포인트를 나타내는 정수입니다.

블록이 생략되면 [[c:Enumerator]] 객체를 리턴합니다.

@see [[m:ARGF.class#each_codepoint]]
#@end
