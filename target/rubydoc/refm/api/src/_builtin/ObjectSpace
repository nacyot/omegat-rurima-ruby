= module ObjectSpace 

全てのオブジェクトを操作するためのモジュールです。

== Module Functions

--- _id2ref(id)    -> object

オブジェクト ID([[m:Object#__id__]])からオブジェクトを得ます。

@param id 取得したいオブジェクトの ID を整数で指定します。

@raise RangeError 対応するオブジェクトが存在しなければ発生します。

 a = "hoge"
 p ObjectSpace._id2ref(a.__id__) #=> "hoge"

--- define_finalizer(obj, proc)         -> Array
--- define_finalizer(obj) {|id| ...}    -> Array

obj が解放されるときに実行されるファイナライザ proc を
登録します。同じオブジェクトについて複数回呼ばれたときは置き換えで
はなく追加登録されます。現在のセーフレベルと proc を配列にして返します。

ブロックを指定した場合は、そのブロックがファイナライザになります。
#@since 1.9.3
obj の回収時にブロックは obj の ID ([[m:BasicObject#__id__]])を引数とし
て実行されます。
#@else
obj の回収時にブロックは obj の ID ([[m:Object#__id__]])を引数として実行されます。
#@end
しかし、後述の問題があるのでブロックでファイナライザを登録するのは難しいでしょう。

@param obj ファイナライザを登録したいオブジェクトを指定します。

@param proc ファイナライザとして [[c:Proc]] オブジェクトを指定します。proc は obj の回収時に obj の ID を引数として実行されます。

==== 사용상의 주의점

以下は、define_finalizer の使い方の悪い例です。

  class Foo
    def initialize
      ObjectSpace.define_finalizer(self) {
        puts "foo"
      }
    end
  end
  Foo.new
  GC.start

これは、渡された proc の self が obj を参照しつ
づけるため。そのオブジェクトが GC の対象になりません。

[[lib:tempfile]] は、ファイナライザの使い方の
良い例になっています。これは、クラスのコンテキストで [[c:Proc]] を
生成することで上記の問題を回避しています。

  class Bar
    def Bar.callback
      proc {
        puts "bar"
      }
    end
    def initialize
      ObjectSpace.define_finalizer(self, Bar.callback)
    end
  end
  Bar.new
  GC.start

proc の呼び出しで発生した大域脱出(exitや例外)は無視されます。
これは、スクリプトのメイン処理が GC の発生によって非同期に中断され
るのを防ぐためです。不安なうちは -d オプションで
事前に例外の発生の有無を確認しておいた方が良いでしょう。

  class Baz
    def initialize
      ObjectSpace.define_finalizer self, eval %q{
        proc {
          raise "baz" rescue puts $!          raise "baz2"
          puts "baz3"
        }
      }, TOPLEVEL_BINDING
    end
  end
  Baz.new
  GC.start
  
  # => baz

@see [[d:spec/rubycmd]]

--- each_object        {|object| ...}    -> Integer
--- each_object(klass) {|object| ...}    -> Integer
#@since 1.8.7
#@since 1.9.1
--- each_object                          -> Enumerator
--- each_object(klass)                   -> Enumerator
#@else
--- each_object                          -> Enumerable::Enumerator
--- each_object(klass)                   -> Enumerable::Enumerator
#@end
#@end

指定された klass と [[m:Object#kind_of?]] の関係にある全ての
オブジェクトに対して繰り返します。引数が省略された時には全てのオブ
ジェクトに対して繰り返します。
繰り返した数を返します。

#@since 1.8.7
ブロックが与えられなかった場合は、
#@since 1.9.1
[[c:Enumerator]] オブジェクトを返します。#@else
[[c:Enumerable::Enumerator]] 객체를 리턴합니다.
#@end
#@end

次のクラスのオブジェクトについては繰り返しません

 * [[c:Fixnum]]
 * [[c:Symbol]]
 * [[c:TrueClass]]
 * [[c:FalseClass]]
 * [[c:NilClass]]

とくに、klass に [[c:Fixnum]] や [[c:Symbol]] などのクラスを指定した場合は、
何も繰り返さないことになります。
なお、[[c:Symbol]] については、かわりに [[m:Symbol.all_symbols]] が使用できます。

@param klass クラスかモジュールを指定します。

--- garbage_collect    -> nil

どこからも参照されなくなったオブジェクトを回収します。[[m:GC.start]] と同じです。

--- undefine_finalizer(obj)    -> object

obj に対するファイナライザをすべて解除します。
obj を返します。

@param obj ファイナライザを解除したいオブジェクトを指定します。

#@since 1.9.1
--- count_objects(result_hash = {}) -> Hash

オブジェクトを種類ごとにカウントした結果を [[c:Hash]] として返します。

このメソッドは C Ruby 以外の Ruby では動かないでしょう。

@param result_hash ハッシュを指定します。与えられたハッシュは上書きして返されます。                   これを利用すると測定による影響を避けることができます。

@raise TypeError 引数に [[c:Hash]] 以外を与えた場合、発生します。

  ObjectSpace.count_objects # => {:TOTAL=>10000, :FREE=>3011, :T_OBJECT=>6, :T_CLASS=>404, ...}

#@end
#@until 1.9.1
--- add_finalizer(proc)    -> Proc

이 메소드는 더 이상 사용되지 않습니다.代わりに
[[m:ObjectSpace.#define_finalizer]] を使用してください。

proc をファイナライザとして設定します。proc을 리턴합니다.

[[m:ObjectSpace.#call_finalizer]] で指定したオブジェクトが解放され
る時、そのオブジェクトの ID(c.f [[m:Object#__id__]])を引数に
ファイナライザが評価されます。

@param proc ファイナライザとしたい Proc オブジェクトを指定します。

--- call_finalizer(obj)    -> object

이 메소드는 더 이상 사용되지 않습니다.

obj をファイナライザの対象オブジェクトとして設定します。
obj を返します。

@param obj ファイナライザの対象とするオブジェクトを指定します。

--- finalizers     -> [Proc]

이 메소드는 더 이상 사용되지 않습니다.

現在登録されているファイナライザの配列を返します。

--- remove_finalizer(proc)    -> Proc

이 메소드는 더 이상 사용되지 않습니다.[[m:ObjectSpace.#undefine_finalizer]] 메소드를 대신 사용해주세요.

指定した proc をファイナライザから取り除きます。proc을 리턴합니다.

@param proc 取り除きたいファイナライザである Proc オブジェクトを指定します。

#@end
