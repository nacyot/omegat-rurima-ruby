#@since 1.9.1
= class BasicObject
특별한 목적으로 만들어진 거의 아무것도 정의되어있지 않은 클래스입니다.
[[c:Object]] 클래스의 부모 클래스입니다.Ruby 1.9 이후 버전에서 사용됩니다.

==== 특징
BasicObject 클래스는 Object 클래스에서 대부분의 메소드를 제거한 클래스입니다.

Object 클래스는 다양한 기본 메소드나 [[c:Kernel]]에서 상속한 함수처럼 쓰이는 메소드를 가지고 있습니다.
반면에 BasiObject 클래스는 같은 객체인지 확인하거나 메소드를 호출하는 기능과 같은 최소한의 기능만 가지고 있습니다.

==== 용도
Ruby 언어에서 사용되는 대부분의 객체의 부모 클래스는 [[c:Object]]입니다.
하지만 어떤 클래스는 Object 클래스에서 제공하는 메소드를 필요로 하지 않을 수도 있습니다.

예를 들어 [[m:BasicObject#method_missing]]를 사용해서 프록 패턴을 구현하려면 Object 클래스에서 미리 정의된 메소드에 대해선 프록시 불가능한 문제가 생깁니다.이럴 때 Object가 아닌 BasicObject를 상속해서
문제를 해결합니다.

==== 주의
일반적인 클래스는 Object나 Object를 상속한 적절한 클래스를 상속해야합니다.
BasicObject는 특별한 목적이 있을 때만 사용해주세요.

==== 예
예
 class Proxy < BasicObject
   def initialize(target)
     @target = target
   end
 
   def method_missing(message, *args)
     @target.__send__(message, *args)
   end
 end
 
 proxy = Proxy.new("1")
 proxy.to_i #=> 1

== Instance Methods
--- ==(other) -> bool
객체가 other와 같으면 true를 리턴하고 그렇지 않으면 false를 리턴합니다.

이 메소드는 각 클래스의 특징에 따라 서브 클래스에서 재정의되어야합니다.
일반적으로 객체의 내용이 같으면 true를 리턴하도록 재정의하는 메소드입니다.

기본적으로 [[m:Object#equal?]] 메소드와 같이 객체의 동일성을 판단하는 메소드로 정의되어있습니다.

@param other 비교하 객체
@return other가 self와 같은 값이면 true 그렇지 않으면 false를 리턴
@see [[m:BasicObject#equal?]], [[m:Object#==]], [[m:Object#equal?]],
     [[m:Object#eql?]]

--- equal?(other) -> bool
객체가 other 동일한 객체이면 true를 리턴하고 그렇지 않으면 false를 리턴합니다.

이 메소드는 두 객체가 동일한 객체인지 확인합니다.
특별한 이유가 없다면 이 메소드를 재정의해서는 안 됩니다.
단 [[c:BasicObject]]의 특성상 재정의가 필요한 경우도 있을 겁니다.
이러한 이유를 정확히 파악하고 재정의해주세요.

@param other 비교하려는 객체
@return other self 객체와 같은 객체라면 true, 그렇지 않으면 false를 리턴
@see [[m:Object#equal?]], [[m:Object#==]], [[m:Object#eql?]]

--- !-> bool
객체를 boolean 값으로 평가하고 그 결과 반전해서 리턴합니다.

이 메소드는 self가 nil이나 false이면 true를 리턴하고 그렇지 않은 모든 경우엔 false를 리턴합니다.
主に論理式の評価に伴って副作用を引き起こすことを目的に
再定義するものと想定されています。

이 메소드를 재정의해도 Ruby 조건식에서 nil이나 false 이외의 값이 false로 평가되지는 않습니다.

@return 객체가 false이면 true를 리턴하고 그렇지 않으면 false를 리턴합니다.

예
 class NegationRecorder < BasicObject
   def initialize
     @count = 0
   end
   attr_reader :count

   def !     @count += 1
     super
   end
 end

 recorder = NegationRecorder.new
 !recorder
 !!!!!!!recorder
 puts 'hoge' if !recorder

 puts recorder.count #=> 3

예
 class AnotherFalse < BasicObject
   def !     true
   end
 end
 another_false = AnotherFalse.new

 # another_falseは*真*
 puts "another false is a truth" if another_false
   #=> "another false is a truth"

--- !=(other) -> bool
객체가 other가 다른지 판정합니다.

기본적으로 self == other을 평가한 결과를 반전해서 리턴합니다.
따라서 서브 클래스에서 [[m:BasicObject#==]]를 재정의해도 자동적으로 !=와 대칭을 이루도록 만들어져있습니다.

단 [[m:BasicObject#!=]] 자체나 [[m:BasicObject#!]]을 재정의 하게 되면 이러한 대칭관계가 무너진다는 점에 주의해야합니다.

このメソッドは主に論理式の評価に伴って副作用を引き起こすことを目的に
再定義するものと想定されています。

@param other 비교하려는 객체
@see [[m:BasicObject#==]], [[m:BasicObject#!]]

예
 class NonequalityRecorder < BasicObject
   def initialize
     @count = 0
   end
   attr_reader :count

   def !=(other)
     @count += 1
     super
   end
 end
 recorder = NonequalityRecorder.new

 recorder != 1
 puts 'hoge' if recorder != "str"

 p recorder.count #=> 2



--- __send__(name, *args) -> object
--- __send__(name, *args) { .... } -> object
객체의 name 메소드를 args 인수로 호출하고 그 결과를 리턴합니다.

뒤에 블록이 따라올 경우 그 블록도 함께 호출하는 메소드에 넘겨줍니다.

@param name 호출하려는 메소드 이름[[c:Symbol]]이나 문자열을 지정합니다.
@param args 메소드에 넘겨지는 인수들
@see [[m:Object#__send__]]

#@since 1.9.3
--- __id__ -> Integer

各オブジェクトに対して一意な整数を返します。あるオブジェクトに対し
てどのような整数が割り当てられるかは不定です。

[[m:Object#object_id]] と同じですが、#object_id は [[c:BasicObject]] に
はない事に注意してください。

@see [[m:Object#object_id]], [[ruby-dev:42840]]
#@end

#@include(BasicObject.public_methods_from_Object)

== Private Instance Methods

--- method_missing(name, *args) -> object

호출된 메소드가 정의되어 있지 않으면 Ruby 인터프리터는 이 메소드를 호출합니다.

호출에 실패한 메소드 이름 ([[c:Symbol]])이 name, 호출할 때 사용한 인수들인 *args가 됩니다.

기본적으로 이 메소드는 [[c:NameError]] 예외를 발생시킵니다.

#@# 이 메소드는 강력하지만 다루기가 까다로워 가능하면 사용하지 않아야합니다.

@param name 정의되지 않은 메소드의 이름(심볼)입니다.
@param args 정의되지 않은 메소드 호출에 사용된 인수들입니다.
#@#@param block 정의되지 않은 메소드에 넘겨지는 블록입니다.
@return 사용자가 직접 정의한 method_missing 메소드의 리턴값을 정의되지 않은 메소드의
  결과인 것처럼 리턴합니다.

  class Foo
    def initialize(data)
      @data = data
    end
    def method_missing(name, lang)
      if name.to_s =~ /\Afind_(\d+)_in\z/
        if @data[lang]
          p @data[lang][$1.to_i]
        else
          raise "#{lang} unknown"
        end
      else
        super
      end
    end
  end
  
  dic = Foo.new({:English => %w(zero one two), :Esperanto => %w(nulo unu du)})
  dic.find_2_in :Esperanto #=> "du"

#@since 1.9.2
[주의] 이 메소드를 재정의할 때는 해당하는 메소드에 대해서 
[[m:Object#respond_to?]]가 true를 리턴하도록 해야합니다.
따라서 [[m:Object#respond_to_missing?]] 메소드도 재정의해줄 필요가 있습니다.

@see [[m:Object#respond_to?]], [[m:Object#respond_to_missing?]]
#@end

#@include(BasicObject.private_methods_from_Object)
#@end
