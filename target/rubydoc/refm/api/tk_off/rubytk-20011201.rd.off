
                       -- Ruby/Tk API Manual --

                               (Draft)

                                    Author: Koji Arai (JCA02266@nifty.ne.jp>
                                    Date: Mon Mar 13 05:11:21 JST 2000

このマニュアルは、Ruby/TkのAPIについて記述したリファレンスマニュアルで
す。このマニュアルは、Ruby/Tkプログラミングを支援することを目標としま
すが、tk.rbを読めるように、また、新たなウィジェットクラスを作成するこ
とをも支援するために、Ruby/Tkの内部的な実装についても触れるよう努めて
います(ウソ、でもprivate methodについても言及しているのはこの辺りが理
由)
ただし、あくまでもリファレンス用途ですので。Ruby/Tk初心者はまずユーザ
マニュアル(.....)を参照することをお勧めします。

このマニュアルは、RubyのドキュメントフォーマッタRDにおけるリファレンス
マニュアルの書式についての実験でもあります。

最終的には、Tcl/Tkについての知識を必要としないものにしたいと考えていま
すが、そこまでたどり着く前に著者のやる気はなくなる予定です :-)。

  このドキュメントの著作権は著者にあります。このドキュメントはフリーで
  すので、改編、再配布は自由に行ってください。ただ、改編した際にその内
  容を著者まで連絡して頂ければみんなが幸せになります。

Tcl/Tkのバージョン

このマニュアルは著者が使用しているTcl/Tkバージョン8.0の挙動を元に記述
しています。ただ、できるだけバージョン間の差異についても記述しようとは
思っています。(ただし、Tk4.0以前の挙動について触れるつもりはありません)

マニュアルの見方

・「オプション」に分類されるメソッドは属性メソッドです。これらのメソッ
  ドは必ず0〜1個の引数を持ち、属性の参照／設定を行います。

  このマニュアルではオプションの引数が省略可能であることは明示していま
  せん。また、設定に関する記述についてしか書いていません。

・メソッドの引数は以下のようにrubyでのメソッド定義を元に記述しています。

  --- Class.method(arg1, arg2)

    クラス／モジュールメソッドであることを示します。

  --- Class#method(arg1, arg2)

    インスタンスメソッドであることを示します。

  --- Class::CONSTANT

    クラス／モジュール定数であることを示します。

  --- Class#method1
  --- Class#method2

    2つ並べて記述した場合それらがエイリアスであるか、複数の引数形式を
    持つメソッドであることを示します。

  --- Class#method(arg1, arg2=nil)

    これは、2番目の引数が省略可能でデフォルト値がnilであることを示しま
    す。

  --- Class#method(arg1, *arg2)

    これは、引数を1つ以上指定できることを示します。

    ただし、メソッドの定義により引数の数が制限されることがあります。そ
    のようなメソッドについては引数部分の記述を順次書き換え中です。

  --- Class#method(arg1, &arg2)

# このマニュアルでこの形式は今のところ使われていません。

  --- Class#[](arg)

  --- Class#[]=(arg1, arg2)

    これらは、obj[arg]、obj[arg1] = arg2 のような配列参照／代入形式の
    メソッドです。

  --- Class#+(arg)

  --- Class#-(arg)

    これらは、obj + arg のような演算子形式のメソッドです。

  --- method(arg1, arg2 = Proc.new)

    これはarg2にProcオブジェクトを指定するか、代りにブロックを指定でき
    ることを示します。

    以下のように書くべきかも知れません(そのように書いている箇所もあり
    ます)

    --- method(arg1) {|..| ...}
    하지만
      method(arg1, proc {...})
    と書けるなど、純粋なイテレータ(?)ではないことも明示したいのでもっとよ
    い記述方法がないか検討中です。2つならべて
    --- method(arg1, arg2)
    --- method(arg1) {|..| ...}
    とかか？

  --- method(arg1, arg2 = None)

    Ruby/TkにおいてNoneオブジェクト(TkComm::None)は特殊で、これは
    --- method(arg1)
    --- method(arg1, arg2)
    と2つ並べて書いた方がよいのかもしれません(が、そうはしてません)。

  --- method(arg1, ... argN, other)

    Rubyのメソッド定義形式で表現できない引数形式は、慣習に従った表記を
    用いています(そうしないと、説明しにくい場合にだけこの表記を用いて
    います)。

以下、単なるメモ

・ スクロールバー関連の記述を統一すること。

・ Tclの言語仕様である「すべてが文字列」であることによる不具合について
   触れる。

   普通なら文字列(String)を期待するところが、実際には数値(Fixnum)であっ
   たりすることが、まれにある。

・ あるメソッド(ウィジェットコマンドかオプションかは不問)
   の詳細を知りたいときに、どの manual page を見るべきかを
   指示できないか？

・ RD にコメントが欲しい。記述を隠したい場合がたまにある。        ((# ... #))     <- インライン
        ###             <- 行頭
   なんてのはどうか？

   このマニュアルでは、footnote ((- ... -)) をコメントの代りにしている
   これはこれで推敲中に便利ではある(footnoteは、ペンディングをあらわして
   いる。すべてのfootnoteは最終的に削除される予定)。
