# $Id: tkafter.rd,v 1.10 2000/03/08 15:58:39 arai Exp $
# Class TkAfter is defined in tkafter.rb
=begin
= TkAfter

((-結構記述が怪しい、要再調査。特に引数に関する説明-))

((-IDが2種類あるので明確にする、after_id -> "after#N"、 ID -> "aNNNN"-))

指定時間経過後またはスクリプトがアイドル状態になったときに処理を実行す
るためのクラスです。

以下は5秒間隔で3回時刻を表示する例

  require "tk"

  TkAfter.new(5 * 1000, 3, proc { p Time.now.asctime }).start
  Tk.mainloop

デジタル時計の例

  require "tk"

  v = TkVariable.new(Time.now.asctime)
  TkAfter.new(1 * 1000, -1, proc { v.value = Time.now.asctime }).start

  TkLabel.new {
    textvariable v
    pack
  }
  Tk.mainloop

上記デジタル時計は、(('xclock -digital -update 1')) よりも正確ではあり
ません。しかし、以下よりは((*マシ*))なようです。

  require "tk"

  v = TkVariable.new(Time.now.asctime)
  Thread.new {
    loop do
      v.value = Time.now.asctime
      sleep 1
    end
  }

  TkLabel.new {
    textvariable v
    pack
  }
  Tk.mainloop

=end
###スクリプトが大きすぎるのでコメント
###
###アナログ時計の例
###
###  require "tk"
###
###  s_line = m_line = h_line = nil
###  canvas = TkCanvas.new {
###    width 200
###    height 200
###    s_line = TkcLine.new(self, 0, 0, 0, 0, {"width"=>3})
###    m_line = TkcLine.new(self, 0, 0, 0, 0, {"width"=>4})
###    h_line = TkcLine.new(self, 0, 0, 0, 0, {"width"=>5})
###  }.pack
###
###  sec = {}
###  min = {}
###  hour = {}
###  60.times do |i|
###    dx = Math.cos(2 * Math::PI * (i.to_f-15) / 60)
###    dy = Math.sin(2 * Math::PI * (i.to_f-15) / 60)
###    sec[i] = [100 + dx * 90, 100 + dy * 90]
###    min[i] = [100 + dx * 70, 100 + dy * 70]
###    24.times do |j|
###      dx = Math::cos(2 * Math::PI * ((j%12+i.to_f/60)-3)/12)
###      dy = Math::sin(2 * Math::PI * ((j%12+i.to_f/60)-3)/12)
###      hour[[j, i]] = [100 + dx * 60, 100 + dy * 60]
###    end
###  end
###
###  tick = proc do
###    now = Time.now
###    s_line.coords 100, 100, *sec[now.sec]
###    m_line.coords 100, 100, *min[now.min]
###    h_line.coords 100, 100, *hour[[now.hour, now.min]]
###  end
###
###  tick.call
###  TkAfter.new(1 * 1000, -1, tick).start
###
###  Tk.mainloop
=begin

== スーパークラス:

((<Object>))

== インクルードしているモジュール:

((<TkCore>))

== extendしているモジュール:

((<TkCore>))

== クラスメソッド:

--- TkAfter.callback(arg)
#@todo
    引数((|arg|))で指定したID((-aNNNN-))に対応するコールバック関数を実行し
    합니다.

--- TkAfter.info
#@todo
    実行待ちになっているTkAfterオブジェクトを配列にして返します。

      require "tk"

      TkAfter.new(1 * 1000, 1, proc {puts "do callback (ruby/tk)"}).start
      p TkAfter.info

      Tk.mainloop

      => [#<TkAfter: ...>]
         do callback (ruby/tk)

    Tcl/Tkで直接登録されたコールバック関数があればその((<TkAfter#after_id>))も配列
    に含まれます。

    ((-ちょっと例が複雑？-))

      require "tk"

      TkCore::INTERP._eval "after 1000 {puts {callback executing (tcl/tk)}}"
      TkAfter.new(1 * 1000, 1, proc {puts "callback executing (ruby/tk)"}).start
      p TkAfter.info
      Thread.new {
        sleep 5
        p TkAfter.info
      }

      Tk.mainloop

      => [#<TkAfter: ... >, "after#1"]
         callback executing (tcl/tk)
         callback executing (ruby/tk)
         []

--- TkAfter.new(interval=nil, loop_exec=nil, *procs])
#@todo
    (({TkAfter}))オブジェクトを生成します。引数が与えられた場合、
    ((<TkAfter#set_procs>))を同じ引数で呼び出します。

== メソッド:

--- TkAfter#do_callback(*args)
#@todo
    コールバック関数を引数((|args|))を渡して実行します。

--- TkAfter#set_callback(sleep, args=nil)
#@todo
    コールバック関数を登録します。

--- TkAfter#set_next_callback(*args)
#@todo

--- TkAfter#after_id
#@todo
    TkAfterのコールバックを識別する文字列(Tcl/Tkコマンド(({after}))の戻り
    値)を返します。

--- TkAfter#after_script
#@todo
    コールバック関数を返します。Tclスクリプトです。

--- TkAfter#current_proc
#@todo
    実行待ちの(({Proc}))オブジェクトを返します。

--- TkAfter#current_sleep
#@todo
    設定した実行待ち時間を返します(実行までの残り時間ではありません)。

--- TkAfter#loop_exec
#@todo

--- TkAfter#loop_exec = val
#@todo

--- TkAfter#get_procs
#@todo

--- TkAfter#current_status
#@todo
    コールバック関数の状態を配列にして返します。配列の要素は順に

    *タイマの状態

     ((<TkAfter#running?>))の戻り値。startしていれば(({true}))、停止していれば
     (({false}))。    *待ち時間

     設定した待ち時間。    *(({Proc}))オブジェクト

     登録したコールバック関数。    *引数

     コールバック関数に渡す引数の配列。    *残り実行回数

     コールバック関数の残り実行回数

    입니다.

--- TkAfter#cancel_on_exception?#@todo

--- TkAfter#cancel_on_exception=(mode)
#@todo

--- TkAfter#running?#@todo
    タイマが実行されていない場合、または指定回数に到達した場合に
    (({false})) を返します。それ以外では(({true}))を返します。

--- TkAfter#loop_rest
#@todo
    コールバック関数の残り実行回数を返します。

--- TkAfter#loop_rest=(rest)
#@todo
    コールバック関数の残り実行回数を((|rest|))にします。

--- TkAfter#set_procs(interval, loop_exec, *procs)
#@todo
    ((|interval|))間隔で((|loop_exec|))回実行する(({Proc}))オブジェクト
    ((|procs|))を登録します。(({Proc}))オブジェクトは複数登録できます。

    ((|interval|))は、"idle"、数値または数値を返す(({Proc}))オブジェクトです。    数値はその数値(ミリ秒)間隔でコールバック関数を実行することを意味します。

    ((|loop_exec|))は、コールバック関数((|procs|))の実行回数を数値で指定し
    합니다.-1で、コールバック関数を実行し続けます。

    ((|loop_exec|)) > 0 で、指定回数だけ実行します。指定回数実行後はインス
    タンスメソッド((<TkAfter#running?>))は(({false}))を返すようになります。

--- TkAfter#add_procs(*procs)
#@todo
    コールバック関数に((|procs|))を追加します。((|procs|))は(({Proc}))オブ
    ジェクトまたは((-なに？-))です。

--- TkAfter#set_start_proc(sleep, init_proc, *init_args)
#@todo
    引数((|sleep|))は、数値(ミリ秒)または文字列("idle"))です。

--- TkAfter#start(*init_args)
#@todo
    コールバック関数を((|init_args|))を引数に実行するようスケジュールしま
    す。

    引数の意味は順に

    *最初の待ち時間
    *コールバック関数
    *コールバック関数の引数
    *繰り返し時の待ち時間
    *繰り返し時のコールバック

     省略時は最初のコールバック関数を繰り返します
    *繰り返し時の引数

     省略時は引数なしです。

    입니다.

--- TkAfter#restart(*restart_args)
#@todo
    コールバック関数を再実行します。

--- TkAfter#cancel
--- TkAfter#stop
#@todo
    コールバック関数のスケジュールを停止します。

--- TkAfter#continue(wait=nil)
#@todo
    停止したコールバック関数を再開します。引数((|wait|))を指定することで待
    ち時間を再設定することができます

--- TkAfter#skip
#@todo
    コールバック関数の実行を一度無視します。

--- TkAfter#info
#@todo
    [ID, 種別]である配列を返します。

    IDは、((<TkAfter#after_id>))が返すIDではなく、(({TkAfter}))内部で
    管理している識別名((-aXXXX-))です。

    種別はタイマの種別で、以下の文字列を指定します。

    *"timer"

     指定時間後にコールバックを実行するように指定されていた場合
    *"idle"

     アイドル状態になったときに実行するよう指定されていた場合

== 定数:

--- TkAfter::Tk_CBID
#@todo
    コールバックIDのカウンタです。(({Tk_CBID}))は配列ですが0番目の要素しか
    使われていません。Rubyの定数が値を変更できないためです。

--- TkAfter::Tk_CBTBL
#@todo
    {コールバック関数のID => TkAfterオブジェクト}であるハッシュです。

=end
