# $Id: tkwm.rd,v 1.11 2001/03/18 12:39:31 arai Exp $
# Module Tk::Wm is defined in tk.rb
=begin
= Tk::Wm

ウィンドウマネージャとの通信を行うためのモジュールです。ここで紹介する
メソッドは通常、((<TkRoot>)) や ((<TkToplevel>))のインスタンスメソッド
として使用します。

ウィンドウマネージャの実装によってメソッドの振る舞いが変わることがあり
ます。

== メソッド:

--- Tk::Wm#aspect
--- Tk::Wm#aspect(min_w, min_h, max_w, max_h)
#@todo
    ウィンドウの縦横の大きさの比を設定します。引数には4つの整数を指定し、
    最小の幅／高さの比が((|min_w|))/((|min_h|))になり、最大の比が
    ((|max_w|))/((|max_h|))になります。このときの戻り値は(({nil}))です。

    デフォルトの状態(縦横比を固定しない)に戻すにはすべての引数に(({nil}))
    を指定します。

    引数を省略すると現在の設定を配列で返します。縦横比が設定されていない場
    合は空配列(({[]}))を返します。

      require "tk"
      p Tk.root.aspect
      p Tk.root.aspect 2, 1, 10, 1
      p Tk.root.aspect
      # Tk.mainloop
      p Tk.root.aspect nil, nil, nil, nil
      p Tk.root.aspect

      => []
         nil
         [2, 1, 10, 1]
         nil
         []

--- Tk::Wm#client(name=None)
#@todo
    スクリプトを実行しているホスト名が((|name|))であることをウィンドウマネー
    ジャに教えます((-？本当？属性(({WM_CLIENT_MACHINE}))を調べない
    と・・・-))。このときの戻り値は空文字列(({""}))です。

    引数に(({nil}))を指定すると、設定を取り消します。

    引数を省略すると現在の設定を返します。

      require "tk"
      p Tk.root.client
        Tk.root.client "foobar"
      p Tk.root.client
        Tk.root.client nil
      p Tk.root.client

      => ""
         "foobar"
         ""

--- Tk::Wm#colormapwindows(*args)
#@todo

--- Tk::Wm#wm_command(value=None)
#@todo

--- Tk::Wm#deiconify
#@todo
    ウィンドウを見える状態にします。((<Tk::Wm#withdraw>))、((<Tk::Wm#iconify>))

--- Tk::Wm#focusmodel(model=None)
#@todo
    ((|model|))が"active"である場合、たとえ((<フォーカス>))が他のアプリケー
    ション上にあっても入力フォーカスを要求します((-実際にやってみると入力
    フォーカスが得られなくなった-))

    ((|model|))が"passive"である場合、ウィンドウ自信は入力フォーカスを要求
    せずウィンドウマネージャの制御に任せます。Tcl/Tkはこのモードであること
    を想定しています。((-たぶん、だからactiveにすると実際には入力フォーカ
    スが得られなかったんだと思う。あーでも、ウィンドウマネージャのせいかも
    しんない。なんだかよくわからん-))

    引数を省略すると現在の設定を返します。

    フォーカスモデルのデフォルトは、"passive"です。

      require "tk"
      p Tk.root.focusmodel
      p Tk.root.focusmodel "active"
      p Tk.root.focusmodel
      Tk.root.focus
      Tk.mainloop

--- Tk::Wm#frame
#@todo
    ウィンドウのフレーム(ウィンドウマネージャが付けるタイトルバーの部分)の
    ((<リソースID>))を返します。((<TkWinfo.id>))

      require "tk"
      p Tk.root.frame
      # Tk.root.overrideredirect true
      Tk.after 1000, proc {
        p Tk.root.frame
        # p Tk.root.id
        exit
      }
      Tk.mainloop

      => "0x0"
         "0xc001dd"

--- Tk::Wm#geometry(geom=nil)
#@todo
    ウィンドウの((<ジオメトリ>))を設定します。    引数が省略された場合は現在のジオメトリを返します。

    ((|geom|))には、"幅 x 高さ [+-] X位置 [+-] Y位置" の形式の文字列を指定します。

      require "tk"
      p Tk.root.geometry("100x100+0+0")
      Tk.after 1000, proc {
        p Tk.root.geometry
        exit
      }
      Tk.mainloop

      => ""
         "100x100+0+0"

--- Tk::Wm#grid
--- Tk::Wm#grid(base_width, base_height, width_inc, height_inc)
#@todo
    ウィンドウをリサイズするときの増減を設定します。((|base_width|))、
    ((|base_height|))には、基本の大きさ(デフォルトでは200x200)
    (((<TkWinfo.reqheight>)), ((<TkWinfo.reqwidth>)))が何グリッドであるか
    を指定します((-ウソ。よくわからない-))。((|width_inc|))、
    ((|height_inc|))には、グリッドの単位(リサイズ時の増減)をピクセル単位で
    指定します。

    設定時の戻り値は(({nil}))です。

    デフォルトの状態(グリッド指定なし)に戻すにはすべての引数に(({nil}))を
    指定します。

    引数を省略すると現在の設定を配列で返します。グリッドが設定されていなけ
    れば空配列(({[]}))を返します。

      require "tk"
      p Tk.root.grid 4, 4, 50, 50
      p Tk.root.grid
      # Tk.mainloop
      p Tk.root.grid nil, nil, nil, nil
      p Tk.root.grid

      => nil
         [4, 4, 50, 50]
         nil
         []

--- Tk::Wm#group(leader=None)
#@todo
    引数を指定するとウィンドウ((|leader|))と同じグループになります。グルー
    プリーダがアイコン化されたときに同じグループに属するウィンドウもアイコ
    ン化されます(ウィンドウマネージャによっては非表示になったり、何もなら
    ない場合があります)。

    引数に(({nil}))を指定するとグループ化を解除します。    引数が省略された場合は現在の設定値を返します。

      require "tk"
      top = TkToplevel.new
      p top.group Tk.root
      p top.group
      p top.group nil
      p top.group
      Tk.mainloop

      => nil
         #<TkRoot: @path=".">
         nil
         nil

--- Tk::Wm#iconbitmap(bitmap=None)
#@todo
    アイコンに表示するビットマップを((|bitmap|))に設定します。

    引数に(({nil}))を指定するとアイコンのビットマップの設定を取り消します。    引数が省略された場合は現在の設定値を返します。    ((-TkBitmapImageは使えないのか？-))

      require "tk"
      Tk.root.iconify
      p Tk.root.iconbitmap "question"
      p Tk.root.iconbitmap
      Tk.mainloop

      => ""
         "question"

--- Tk::Wm#iconify
#@todo
    ウィンドウをアイコン状態にします。((<Tk::Wm#deiconify>))、((<Tk::Wm#withdraw>))

--- Tk::Wm#iconmask(bitmap=None)
#@todo
    アイコンのマスクを((|bitmap|))で設定します。    引数に(({nil}))を指定すると設定を取り消します。    引数が省略された場合は現在の設定値を返します。

--- Tk::Wm#iconname(str=None)
#@todo
    アイコンに表示する文字列を((|str|))にします。    引数に(({nil}))を指定すると設定を取り消します。    引数が省略された場合は現在の設定値を返します。

--- Tk::Wm#iconposition(x=nil, y=nil)
#@todo
    アイコンの位置を指定します。

      require "tk"
      Tk.root.iconify
      Tk.root.iconbitmap "question"
      p Tk.root.iconposition
      Tk.root.iconposition 100, 100
      p Tk.root.iconposition
      Tk.mainloop

      => []
         [100, 100]

--- Tk::Wm#iconwindow(icon=nil)
#@todo
    ウィンドウ((|icon|))をアイコンにします。このときの戻り値は(({nil}))です。

    引数に(({nil}))を指定すると設定を取り消します。    引数が省略された場合は現在の設定値を返します。

    以下は、ボタンをルートウィジェットのアイコンにします。ボタンを押すとア
    イコン化を解除します。

      require "tk"
      icon = TkToplevel.new
      TkButton.new(icon) { text "Icon"; command { Tk.root.deiconify } }.pack
      p Tk.root.iconwindow icon
      p Tk.root.iconwindow
      Tk.mainloop

      => nil
         #<TkToplevel: @screen=nil, @path=".w0000", @classname=nil>

--- Tk::Wm#maxsize
--- Tk::Wm#maxsize(width, height)
#@todo
    ウィンドウの最大サイズを設定します。引数が省略された場合、現在の設定値を
    配列で返します。

    ウィンドウの最大サイズのデフォルト値はスクリーンのサイズです。

      require "tk"
      p Tk.root.maxsize
      p Tk.root.minsize
      Tk.mainloop
      p Tk.root.maxsize(200,300)
      p Tk.root.minsize(20,30)
      p Tk.root.maxsize
      p Tk.root.minsize
      Tk.mainloop

      => [1265, 994]
         [1, 1]
         nil
         nil
         [200, 300]
         [20, 30]

--- Tk::Wm#minsize
--- Tk::Wm#minsize(width, height)
#@todo
    ウィンドウの最小サイズを設定します。引数が省略された場合、現在の設定値を
    配列で返します。

    ウィンドウの最小サイズのデフォルト値は1x1です。

--- Tk::Wm#overrideredirect(bool=None)
#@todo
    引数((|bool|))に(({true}))を指定するとウィンドウをウィンドウマネージャ
    の管理下に置きません。デフォルトは(({false}))です。引数を省略したとき
    は現在の設定値を返します。

      require "tk"
      p Tk.root.overrideredirect
      p Tk.root.overrideredirect true
      p Tk.root.overrideredirect
      Tk.mainloop

      => false
         ""
         true

--- Tk::Wm#positionfrom(who=None)
#@todo
    ((|who|))は、"program", "user" またはこれらの短縮名です。"user"の場合
    ウィンドウの配置はユーザの指定(((<Tk::Wm#geometry>))による指定も含みます)に従
    います((-本当に？-))。

    引数に(({nil}))を指定すると設定を取り消します。    引数を省略すると現在の設定を返します。

      require "tk"
      p Tk.root.positionfrom
      Tk.root.geometry "+0+0"
      p Tk.root.positionfrom
      p Tk.root.positionfrom "prog"
      p Tk.root.positionfrom
      Tk.mainloop

      => ""
         "user"
         ""
         "program"

--- Tk::Wm#protocol(name=nil, cmd=nil)
#@todo
    ウィンドウマネージャから((|name|))で指定したメッセージを受け取ったときに
    ((<Proc>))オブジェクト((|cmd|))を実行するようにします。

    ((|cmd|))に空文字列(({""}))を指定すると設定を取り消します。

    ((|cmd|))を省略した場合、((|name|))に設定している((<Proc>))オブジェク
    トを返します。

    すべての引数を省略した場合、設定されているプロトコル名の配列を返します。

      require "tk"
      p Tk.root.protocol "WM_DELETE_WINDOW", proc {puts "foo"}
      p Tk.root.protocol "WM_TAKE_FOCUS",    proc {puts "bar"}
      p Tk.root.protocol "WM_DELETE_WINDOW"
      p Tk.root.protocol

      p Tk.root.protocol "WM_DELETE_WINDOW", ""
      p Tk.root.protocol "WM_DELETE_WINDOW"
      p Tk.root.protocol
      Tk.mainloop

      => ""
         ""
         #<Proc:0x4013685c>
         ["WM_TAKE_FOCUS", "WM_DELETE_WINDOW"]
         ""
         nil
         ["WM_TAKE_FOCUS"]

    ((-プロトコル名の一覧を書くこと-))

--- Tk::Wm#resizable
--- Tk::Wm#resizable(width, height)
#@todo
    ウィンドウ(({self}))の幅と高さがユーザにより変更可能かどうかを設定しま
    す。((|width|)), ((|height|)) は(({true}))/(({false}))で指定します。

    引数を省略した場合、幅/高さが変更可能かどうかを示す配列
    (('[width, height]')) を返します。この配列の要素は
    (({true}))/(({false}))です。

--- Tk::Wm#sizefrom(who=None)
#@todo
    ((|who|))は、"program", "user" またはこれらの短縮名です。"user"の場合
    ウィンドウのサイズはユーザの指定(((<Tk::Wm#geometry>))による指定も含みます)に
    従います((-本当に？-))。

    引数に(({nil}))を指定すると設定を取り消します。    引数を省略すると現在の設定を返します。

      require "tk"
      p Tk.root.sizefrom
      Tk.root.geometry "100x100"
      Tk.after 1000, proc {
        p Tk.root.sizefrom
        p Tk.root.sizefrom "prog"
        p Tk.root.sizefrom
      }
      Tk.mainloop

      => ""
         ""
         ""
         "program"

--- Tk::Wm#state
#@todo
    ウィンドウ(({self}))の状態を"normal", "iconic", "withdraw", "icon"の何
    れかで返します。

--- Tk::Wm#title(str=None)
#@todo
    ((|str|))が指定された場合、ウィンドウ(({self}))の((<タイトル>))を
    ((|str|))にします。このときのメソッドの戻り値は空文字列(({""}))です。

    引数が省略された場合、現在のウィンドウのタイトルを返します。ウィンドウ
    タイトルのデフォルトは"tk"または((<TkToplevel>))の場合は((<パス>))名で
    す。((<TkCore.appname>))でもタイトルは変更しますが、(({title}))メソッ
    ドによる指定の方が優先されます。

      require "tk"
      Tk.appname "bar"
      p Tk.root.title
      p Tk.root.title "foo"
      p Tk.appname
      p TkWinfo.appname(Tk.root)
      p Tk.root.title
      Tk.mainloop

      => "bar"
         ""
         "bar"
         "bar"
         "foo"

--- Tk::Wm#transient(master=None)
#@todo
    ウィンドウ(({self}))を((|master|))ウィンドウの
    ((<トランジェントウィンドウ>))にします。

    引数に(({nil}))を指定すると設定を取り消します。    引数を省略すると現在の設定を返します。

      require "tk"
      top = TkToplevel.new
      p top.transient Tk.root
      p top.transient
      Tk.mainloop

      => nil
         #<TkRoot: @path=".">

--- Tk::Wm#withdraw
#@todo
    ウィンドウ(({self}))を見えなくします。((<Tk::Wm#deiconify>))、((<Tk::Wm#iconify>))

=end
