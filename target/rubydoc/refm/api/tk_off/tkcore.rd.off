# $Id: tkcore.rd,v 1.15 2001/03/18 12:37:29 arai Exp $
# Module TkCore is defined in tk.rb
=begin
= TkCore

このモジュールのインスタンスメソッドは、普通、モジュール((<Tk>))のモ
ジュールメソッドとして使用されます。

== インクルードしているモジュール:

((<TkComm>))

== extendしているモジュール:

((<TkComm>))

== クラスメソッド:

--- TkCore.callback(arg)
#@todo

== メソッド:

--- TkCore#callback_break
#@todo
    例外((<TkCallbackBreak>))を発生させます。

--- TkCore#callback_continue
#@todo
    例外((<TkCallbackContinue>))を発生させます。

--- TkCore#after(ms, cmd=Proc.new)
#@todo
    ((|ms|))ミリ秒後に、コールバック関数((|cmd|))を実行します。((|ms|))が
    文字列(({"idle"}))である場合、スクリプトが入力待ちなどアイドル状態になっ
    たときに((|cmd|))を実行します。

    コールバック関数の実行回数を指定するなど、より複雑なタイマ操作を行いた
    い場合は((<TkAfter>))を使用してください。

--- TkCore#after_idle(cmd=Proc.new)
#@todo
    ((<TkCore#after>))(({('idle', cmd)})) と同じです。

--- TkCore#clock_clicks(ms=nil)
#@todo

--- TkCore#clock_format(clk, form=nil)
#@todo

--- TkCore#clock_formatGMT(clk, form=nil)
#@todo

--- TkCore#clock_scan(str, base=nil)
#@todo

--- TkCore#clock_scanGMT(str, base=nil)
#@todo

--- TkCore#clock_seconds
#@todo
    (({Time.now.to_i})) のTcl版です。このメソッドはあまり必要ないでしょう。

--- TkCore#scaling
--- TkCore#scaling(scale)
#@todo
    ((<ルートウィジェット>))が表示されるディスプレイのスケールを参照／設定
    합니다.スケールはポイント(1/72インチ)あたりのピクセル数です。

      require 'tk'
      print Tk.scaling * 72, " dpi monitor\n"
      print "adapt to 100 dpi monitor\n"
      p Tk.scaling(100.0/72)

--- TkCore#scaling_displayof(win)
--- TkCore#scaling_displayof(win, scale)
#@todo
    ((|win|))を表示しているディスプレイのスケールを参照／設定します。

--- TkCore#appname(name=None)
#@todo
    アプリケーション名を((|name|))にします。大文字で始まるアプリケーション
    名は許されません((-とマニュアルに書いているが指定はできるみたい-))。

    引数を省略するとアプリケーション名を返します。

    アプリケーション名は、((<TkCore#appsend>))で使用されます。

    アプリケーション名は常に一意になるように調整されます。指定したアプリケー
    ション名が既に存在する場合、アプリケーション名に" #N"の形式で通番が付
    けられます。

    アプリケーション名のデフォルトは"tk"です。

--- TkCore#appsend(interp, async, *args)
#@todo

--- TkCore#rb_appsend(interp, async, *args)
#@todo

--- TkCore#appsend_displayof(interp, async, *args)
#@todo

--- TkCore#rb_appsend_displayof(interp, async, *args)
#@todo

--- TkCore#info(*args)
#@todo
    Tclインタプリタの内部情報を返します。

    第1引数で情報の種類を指定します。これは以下のいずれかの文字列です。残
    りの引数は第1引数によってそれぞれ異なります。(詳細はinfo(n)を参照して
    ください)

      *"args"
      *"body"
      *"cmdcount"
      *"commands"
      *"complete"
      *"default"
      *"exists"
      *"globals"
      *"hostname"
      *"level"
      *"library"
      *"loaded"
      *"locals"
      *"nameofexecutable"
      *"patchlevel"
      *"procs"
      *"script"
      *"tclversion"
      *"vars"

--- TkCore#mainloop
#@todo
    Ruby/TKのメインループを実行します。イベントの監視とコールバック関数の
    実行はすべてこのメソッドの内部で行われます。従って、Ruby/Tkスクリプト
    の最後はこのメソッドの呼び出しになります。

--- TkCore#event_generate(window, context, keys=nil)
#@todo
    ((<イベント>))((|context|))を((|window|))で発生させます。

      require "tk"
      b = TkButton.new {
        text "button1"
        command { puts "push!" }
        focus
      }.pack
      TkButton.new {
        text "button2"
        command {
          Tk.event_generate(b, "Key-space")
        }
      }.pack

      Tk.mainloop

    ((|context|)) に"<仮想イベント名>"という文字列か((<TkVirtualEvent>))の
    インスタンスを指定することで((<仮想イベント>))を発生させることもできま
    す。

    省略可能な引数((|keys|))には以下をキーにしたハッシュを指定します。

     *"above"
     *"borderwidth"
     *"button"
     *"count"
     *"detail"
     *"focus"
     *"height"
     *"keycode"
     *"keysym"
     *"mode"
     *"override"
     *"place"
     *"root"
     *"rootx"
     *"rooty"
     *"sendevent"
     *"serial"
     *"state"
     *"subwindow"
     *"time"
     *"width"
     *"when"

      指定したイベントをどのタイミングで発生させるかを以下のいずれかで指示します。      *"now"

       即座にイベントを発生させます(デフォルト)
      *"tail"

       他のイベントがキューに溜っていればイベントキューの最後に指定したイベ
       ントを置きます。      *"head"

       他のイベントがキューに溜っていればイベントキューの先頭に指定したイベ
       ントを置きます。      *"mark"

       他のイベントがキューに溜っていればイベントキューの先頭に指定したイベ
       ントを置きます。ただし、キュー内に"mark"したイベントがあればそのイベ
       ントよりも後に置かれます。     *"x"
     *"y"

--- TkCore#messageBox(keys)
#@todo
    引数((|keys|))には以下をキーにしたハッシュを指定します。

     *"default"
     *"icon"
     *"message"
     *"parent"
     *"title"
     *"type"

--- TkCore#getOpenFile(keys=nil)
--- TkCore#getSaveFile(keys=nil)
#@todo
    ロード／セーブ用にファイルを選択するダイアログボックスです。

    引数((|keys|))には以下をキーにしたハッシュを指定します。

     *"defaultextension"
     *"filetypes"
     *"initialdir"
     *"initialfile"
     *"parent"
     *"title"

    選択したファイル名を返します。ファイル名選択がキャンセルされた場合は空
    文字列(({""}))を返します。

--- TkCore#chooseColor(keys=nil)
#@todo
    色を選択するためのダイアログボックスです。

    引数((|keys|))には以下をキーにしたハッシュを指定します。

     *"initialcolor"
     *"parent"
     *"title"

    選択した色を"#RRGGBB"の形式で表した文字列で返します。色の選択がキャン
    セルされた場合は空文字列(({""}))を返します。

--- TkCore#chooseDirectory(keys = nil)
#@todo

--- TkCore#tk_call(*args)
#@todo
    引数((|args|))を((<TkComm#_get_eval_string>))メソッドでTcl文字列に変換
    し、Tcl/Tkコマンドとして実行します。

== 定数:

--- TkCore::INTERP
#@todo
    Tcl/Tkインタプリタ(((<TclTkIp>))のインスタンス)です。

=end
