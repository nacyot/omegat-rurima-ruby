# $Id: tkscrollable.rd,v 1.11 2001/03/18 12:39:31 arai Exp $
# Module Tk::Scrollable is defined in tk.rb
=begin
= Tk::Scrollable

スクロールバー(((<TkScrollbar>)))との連動を行うためのメソッドが定義さ
れたモジュールです。

スクロールが可能なウィジェットはこのモジュールをインクルードします。

== メソッド:

--- Tk::Scrollable#xscrollcommand(cmd=Proc.new)
--- Tk::Scrollable#yscrollcommand(cmd=Proc.new)
#@todo
    (({Tk::Scrollable}))を(({include}))しているウィジェットは、自身が
    スクロールされるときに、その表示位置を引数にコールバック関数
    ((|cmd|))を実行します。主に表示位置に応じてスクロールバーを移動さ
    せるために使用します。

    ((<TkListbox>))の場合、マウスボタン2をドラッグすれば
    (({xscrollcommand}))、(({yscrollcommand}))に指定したブロックが実行
    덮어쓰기 됩니다.

      require "tk"

      xscrol = yscrol = nil

      list = TkListbox.new {
        ('a'..'z').each {|v|
          insert 'end', (v..'z').to_a.join
        }

        xscrollcommand {|arg| xscrol.set *arg; p arg}
        yscrollcommand {|arg| yscrol.set *arg; p arg}
        grid 'column'=>0, 'row'=>0, 'sticky'=>'nsew'
        focus
      }

      xscrol = TkScrollbar.new {
        orient "horizontal"
        command {|arg| list.xview *arg; p args}
        grid 'column'=>0, 'row'=>1, 'sticky'=>'ew'
      }

      yscrol = TkScrollbar.new {
        orient "vertical"
        command {|arg| list.yview *arg; p arg}
        grid 'column'=>1, 'row'=>0, 'sticky'=>'ns'
      }
      TkGrid.columnconfigure Tk.root, 0, 'weight'=>100
      TkGrid.rowconfigure    Tk.root, 0, 'weight'=>100

      Tk.mainloop

    ((<TkScrollbar#set>))も参照してください。((-ブロックに渡す引数の形式に
    ついて書くこと-))

    上記例は複雑ですが、スクロールバーの指定の仕方は(特別な事をしない
    限りは)ほぼ決まっているので、以下のようなメソッドを作ると抽象度が
    増して以外と楽になります(何より、余計なローカル変数の定義が必要な
    くなります)。

--- Tk::Scrollable#xview(*index)
--- Tk::Scrollable#yview(*index)
#@todo
    ((-見直すこと-))
    ウィジェットの表示領域を変更します。主にスクロールバー
    ((<TkScrollbar>))との連動のために((<TkScrollbar#command>))のブロッ
    クで使用します。

    引数は、以下のいずれかの形式です。

    *なし

     現在の位置を2つの比率(0.0〜1.0)で表した配列で返します。最初の要素
     は表示位置の左端(上端)が全体の何%位置にあるかを示し、2番目の要素
     は表示位置の右端(下端)が全体の何%の位置にあるかを示します。

     例えば、(('[0.2, 0.7]'))では全体の20%の位置が左端、全体の
     30%(100-70)の位置が右端として表示されています。したがって、実際に
     表示されている領域は全体の50%(70-20)です(下図)。

        +--------全体のサイズ---------+
              +--表示部分----+
        +-----+--------------+--------+
        |     |              |        |
        +-----+--------------+--------+
        0 .1 .2 .3 .4 .5 .6 .7 .8 .9  1.0

    *((*位置*))

     ((*位置*))が左端になるようにスクロールします。     (((*位置*))の指定方法はウィジェットによって異なります)

    *"moveto" 比率

     比率は、0.0 〜 1.0までの数値で全体のうち何%目が左端になるかを
     指定します。

     ((<TkScrollbar#command>))は、この形式の配列をブロックの引数として
     渡します。

    *"scroll", 方向, 単位

     方向(-1:左、1:右)に応じて単位("units":文字、"page":((-？？？-)))だけ
     スクロールします。

     ((<TkScrollbar#command>))は、この形式の配列をブロックの引数として
     渡します。

--- Tk::Scrollable#xscrollbar(bar=nil)
--- Tk::Scrollable#yscrollbar(bar=nil)
#@todo
    ウィジェットとスクロールバーの連動の指定は、
    ((<Tk::Scrollable#xscrollcommand>))、((<Tk::Scrollable#xview>))、
    ((<TkScrollbar#command>))、((<TkScrollbar#set>))を組み合わせる事で
    行いますが、このメソッドはこれを簡略化するためにあります。

    ((<Tk::Scrollable#xscrollcommand>))にあるスクロールバー付きリスト
    ボックスの例はこのメソッドを使う事で以下のように書き直すことができ
    합니다.

        require "tk"

        TkListbox.new {
          ('a'..'z').each {|v|
            insert 'end', (v..'z').to_a.join
          }

          xscrollbar TkScrollbar.new
          yscrollbar TkScrollbar.new
          xscrollbar.grid 'column'=>0, 'row'=>1, 'sticky'=>'ew'
          yscrollbar.grid 'column'=>1, 'row'=>0, 'sticky'=>'ns'
          grid 'column'=>0, 'row'=>0, 'sticky'=>'nsew'
          focus
        }

        TkGrid.columnconfigure Tk.root, 0, 'weight'=>100
        TkGrid.rowconfigure    Tk.root, 0, 'weight'=>100

        Tk.mainloop

=end
