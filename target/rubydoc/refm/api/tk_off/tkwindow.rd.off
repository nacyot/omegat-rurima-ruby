# $Id: tkwindow.rd,v 1.17 2001/03/18 12:39:31 arai Exp $
# Class TkWindow is defined in tk.rb
=begin
= TkWindow

すべてのウィジェットのスーパークラスです。

== スーパークラス:

((<TkObject>))

== extendしているモジュール:

((<TkBindCore>))

== クラスメソッド:

--- TkWindow.new(parent=nil, keys=nil)
--- TkWindow.new(parent=nil, keys=nil) {|win| ... }
#@todo
    親ウィジェットが((|parent|))であるウィジェットを生成します。((|parent|))を
    省略するとルートウィジェット((<TkRoot>))が親ウィジェットになります。

    ((|keys|)) は、(({{option=>value...}}))であるハッシュで、((<オプション>))
    を指定します。((|keys|))に指定できるオプションはメソッドとしても実
    装されているので

      TkLabel.new(nil, "text"=>"foo").pack

    이 예제는
      label = TkLabel.new
      label.text "foo"
      label.pack
    と書くことができます。((({pack}))はオプションではありません)

    ブロックを指定すると生成したウィジェットオブジェクトを引数にブロックを
    실행합니다.また、そのブロック内のコンテキストでは(({self}))は生成した
    ウィジェットオブジェクトになります。

    上記の例は以下のように書くことも出来ます。

      TkLabel.new {
        text "foo"
        pack
      }

    ブロックを使うと、以下のようにウィジェットの親子関係を視覚的に明示する
    ことができます。

      require "tk"
      TkFrame.new {
        TkLabel.new(self) {
          text "foo"
        }.pack
      }.pack
      Tk.mainloop

    ただし、ブロック内では(({self}))が置き換わるのでインスタンスメソッドと
    Rubyの関数やローカル変数などの名前が衝突する可能性があります。内容によっ
    てはかえって可読性が悪くなる場合があることに気をつけなければなりません。

      require "tk"

      text = "foo"
      p text                # <- 当然これはローカル変数

      TkLabel.new {
        text "bar"
        p text              # <- これはローカル変数
        p self.text         # <- これは TkLabel#text
        raise           # <- 例外ではなくTkWindow#raise
      }.pack

      Tk.mainloop

== privateメソッド:

--- TkWindow#create_self
#@todo
    Tcl/Tkのレベルでウィジェットを生成します。    (({TkWindow#initialize}))から呼ばれる初期化のためのメソッドです。

    TkWindowのサブクラスは、そのクラスに応じたウィジェット生成のためにこの
    メソッドを再定義しなければなりません。(このマニュアルでは、サブクラス
    の(({create_self}))についての記述は省略しています)

    普通、

      tk_call 'Tcl/Tkコマンド', path

    といった形式で再定義されます。((-tk.rb中ではTkWindowのサブクラスはこの
    メソッドをprivateメソッドにしてない。なんで？-))

== メソッド:

--- TkWindow#pack(keys=nil)
#@todo
    ウィジェットをpackします。packされたウィジェットは、
    ((|keys|))({name=>value...}のハッシュです)で指定した振舞に従って親ウィ
    ジェットに適宜詰め込まれて配置されます。(({self}))を返します。

      Tk.pack self, keys
    や
      TkPack.configure self, keys

    와 같습니다.((<TkPack>))参照

--- TkWindow#unpack
--- TkWindow#pack_forget
#@todo
    packで配置したウィジェットを取り下げます(非表示になります)。    (({self}))を返します。

--- TkWindow#pack_config(slot, value=None)
#@todo

--- TkWindow#pack_info
#@todo
    packで配置したウィジェットの配置情報をハッシュで返します。

--- TkWindow#pack_propagate(mode = nil)
#@todo

--- TkWindow#pack_slaves
#@todo
    (({self}))ウィジェット内にpackで配置したウィジェットの配列を返しま
    す。

--- TkWindow#grid(keys=nil)
#@todo
    ((|keys|))で指定した格子状のマス目に従って、ウィジェットを配置します。    (({self}))を返します。

      Tk.grid self, keys
    や
      TkGrid.configure self, keys

    와 같습니다.((<TkGrid>))参照

--- TkWindow#ungrid
--- TkWindow#grid_forget
#@todo
    gridで配置したウィジェットを取り下げます(非表示になります)。    (({self}))を返します。

--- TkWindow#grid_bbox(*args)
#@todo

--- TkWindow#grid_config(slot, value=None)
#@todo

--- TkWindow#grid_columnconfig(index, keys)
#@todo

--- TkWindow#grid_rowconfig(index, keys)
#@todo

--- TkWindow#grid_columnconfiginfo(index, slot=nil)
#@todo

--- TkWindow#grid_rowconfiginfo(index, slot=nil)
#@todo

--- TkWindow#grid_info
#@todo

--- TkWindow#grid_location(x, y)
#@todo

--- TkWindow#grid_propagate(mode=nil)
#@todo

--- TkWindow#grid_remove
#@todo

--- TkWindow#grid_slaves(args)
#@todo

--- TkWindow#place(keys=nil)
#@todo
    ((|keys|))で指定した位置にウィジェットを配置します。    (({self}))を返します。

    ((|keys|))は、以下のキーを持つハッシュです。

    *"in"
    *"x"
    *"relx"
    *"y"
    *"rely"
    *"anchor"
    *"width"
    *"relwidth"
    *"height"
    *"relheight"
    *"bordermode"

--- TkWindow#unplace
--- TkWindow#place_forget
#@todo
    placeで配置したウィジェットを取り下げます(非表示になります)。    (({self}))を返します。

--- TkWindow#place_config(keys)
#@todo
    placeで配置したウィジェットを((|keys|))の指定で再配置します
    ((-ホントに再配置？-))

--- TkWindow#place_config(slot, value=None)
#@todo

--- TkWindow#place_configinfo(slot = nil)
#@todo

--- TkWindow#place_info
#@todo
    placeで配置したウィジェットの配置情報をハッシュで返します。

--- TkWindow#place_slaves
#@todo
    (({self}))ウィジェット内にplaceで配置したウィジェットの配列を返します。

--- TkWindow#focus(force = false)
#@todo
    ((<入力フォーカス>))を(({self}))に設定します。((|force|))が真の場合他
    のアプリケーションが入力フォーカスを持っている場合にも横取りすることが
    できます。(({self}))を返します。

--- TkWindow#grab(arg = nil)
#@todo
    ウィジェットへのグラブに関する操作を行います。ウィジェットをグラブすると、
    他のウィジェットで((<イベント>))が発生しなくなります。

    *引数なし
      selfウィジェットをグラブします。空文字列を返します。    *"global"
      他のアプリケーションでもイベントを発生させません。    *"current"
      現在グラブされているウィジェットを返します。    *"status"
      グラブの状態を返します。    *"release"
      グラブを解放します。(({nil}))を返します。

--- TkWindow#lower(below=None)
#@todo
    ウィジェットを((|below|))ウィジェットの下に置きます。((|below|))を省略する
    と一番下にウィジェットを置きます。    (({self}))を返します。

--- TkWindow#raise(above=None)
#@todo
    ウィジェットを((|above|))ウィジェットの上に置きます。((|above|))を省略する
    と一番上(手前)にウィジェットを置きます。    (({self}))を返します。

    ((*注意*))

    selfがTkWindowのインスタンスであるコンテキストでは、例外を発生させるの
    に((<Kernel#raise>))が使えません。Ruby/Tkプログラミングで例外を発生さ
    せる場合は、((<Kernel#fail>))を使用するのが無難です。

--- TkWindow#command(cmd=Proc.new)
#@todo
    引数で指定したProcオブジェクトをコマンドとして登録します。

      TkButton.new {
        text "button"
        command { puts "button" }
        pack
      }
      Tk.mainloop

--- TkWindow#colormodel(model=None)
#@todo
    (このメソッドは、TkバージョンX.X以降では使用できません)((-Tk8.0で確認-))

    Ruby/Tkウィジェットのカラーモデルをカラーか白黒かに設定します。    引数を省略するとそのウィジェットのカラーモデルを返します。

    ((|model|))に指定できるのは以下のいずれかです。      *"color"
      *"monochrome"

    (({self}))を返します。

--- TkWindow#destroy
#@todo
    ウィジェットを完全に消去します。

--- TkWindow#wait
--- TkWindow#wait_visibility
#@todo
    ウィジェットの可視状態が変化するまで待ちます。

--- TkWindow#wait_destroy
#@todo
    ウィジェットが((<TkWindow#destroy>))されるまで待ちます。

--- TkWindow#bindtags(taglist=nil)
#@todo
    ウィジェット(({self}))の((<タグリスト>))を((|taglist|))に設定します。    タグリストはイベントの伝搬を示す配列でその要素は

    *ウィジェットオブジェクト
    *ウィジェットクラス
    *((<TkBindTag>))オブジェクト
    *文字列 "all"

    のいずれかです。ウィジェット(({self}))で((<イベント>))が発生すると
    タグリストの各要素を順に検索し、発生したイベントに対応する
    ((<イベントコールバック関数>))をすべて実行します。

    引数を指定しなければそのウィジェットのタグリスト(配列)を返します。

    デフォルトではウィジェットはそのタグリストとして

    *そのウィジェット自身((({self})))
    *そのウィジェットのクラス
    *((<TkRoot>))ウィジェット(または((<TkToplevel>))ウィジェット)
    *"all"タグ

    を要素に持ちます。

      require "tk"
      b1 = TkButton.new
      p b1.bindtags

      TkToplevel.new {
        TkButton.new(self) {
          p bindtags
        }
      }

      => [#<TkButton: @path=".w0000">, TkButton, #<TkRoot: @path=".">, "all"]
         [#<TkButton: @path=".w0002.w0003">, TkButton, \
          #<TkToplevel: @screen=nil, @path=".w0002", @classname=nil>, "all"]

    以下は、タグリストの定義の例です。

      require "tk"
      b1 = TkButton.new.pack
      b1.bindtags [b1, Tk.root, "all"]
      p b1.bindtags
      Tk.mainloop

      => [#<TkButton: @path=".w0000">, #<TkRoot: @path=".">, "all"]

    このようにタグリストからウィジェットクラスの定義を省いた場合、ボタンを
    左クリックしても、ボタンが押された状態になりません。これはこの動作を行
    う((<イベントコールバック関数>))がボタンウィジェットクラスに対して登録
    されているからです。

    デフォルトでは"all"タグには

       require "tk"
       p Tk.bindinfo "all"

       => ["Shift-Key-Tab", "Key-Tab", "Key-F10", "Alt-Key"]

    これらのキーイベントに対する動作が定義されています。したがって明示的に
    タグリストから"all"タグを除かない限り、すべてのウィジェットにはこれら
    のキーに対する動作が定義されていることになります。

    ((*注意*))

    タグリストの要素には、文字列を指定することも出来ます。ただし、文字列'all'
    ((<ウィジェットパス>))、((<ウィジェットクラス名>))は特別扱いされます。

    ウィジェットのパス名をタグに指定すると、ウィジェット自身を指定したのと
    同じになります。同様に((<ウィジェットクラス名>))(TkButtonクラスなら"Button") 
    はウィジェットクラスを指定したのと同じになります。文字列でタグを定義する
    場合これらと衝突しないようにしなければなりません((({ruby-1.4.4}))以降で
    標準添付される(({tk.rb}))には、このようなタグを定義するためのクラス
    ((<TkBindTag>))が追加されました)

      require "tk"
      newtag = TkBindTag.new
      TkButton.new {
        bindtags [path, "Button", newtag]
        p bindtags
      }

      => [#<TkButton: @path=".w0000">, TkButton, #<TkBindTag: btag00000>]

=end
