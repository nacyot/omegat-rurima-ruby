# $Id: tkfont.rd,v 1.9 2000/02/15 18:07:59 arai Exp $
# Class TkFont is defined in tkfont.rb
=begin
= TkFont


== インクルードしているモジュール:

((<Tk>))

== extendしているモジュール:

((<TkCore>))

== クラスメソッド:

--- TkFont.new(ltn=DEFAULT_LATIN_FONT_NAME, knj=nil, keys=nil)
#@todo

        require 'tk'

        %w(helvetica courier lucida).each {|font|
           fn = TkFont.new("-*-#{font}-*-r-*-24-*")
           TkLabel.new(nil, "text" => font,
                            "font" => fn).pack
        }
        Tk.mainloop

--- TkFont.families(window=nil)
#@todo
    フォントファミリの一覧を配列にして返します。    ((-((|window|))の意味がよくわからん-))

        require 'tk'
        puts *TkFont.families
        => helvetica
           courier
           lucida
            ::
            ::

--- TkFont.names
#@todo
    現在定義されているフォント名の一覧を配列にして返します。

        require 'tk'
        TkFont.new
        puts *TkFont.names

        => @font0000c
           @font0000k
           @font0000l

--- TkFont.create_copy(font)
#@todo

--- TkFont.get_obj(name)
#@todo

--- TkFont.init_widget_font(path, *args)
#@todo

--- TkFont.used_on(path=nil)
#@todo

--- TkFont.failsafe(font)
#@todo

=end
== privateメソッド:

--- TkFont#_get_font_info_from_hash(font)
#@todo
=end
###--- TkFont#create_latinfont_tk4x(font)
###
###--- TkFont#create_kanjifont_tk4x(font)
###
###--- TkFont#create_compoundfont_tk4x(ltn, knj, keys)
###
###--- TkFont#create_latinfont_tk8x(font)
###
###--- TkFont#create_kanjifont_tk80(font)
###
###--- TkFont#create_kanjifont_tk8x(font)
###
###--- TkFont#create_compoundfont_tk8x(ltn, knj, keys)
###
###--- TkFont#actual_core_tk4x(font, window=nil, option=nil)
###
###--- TkFont#actual_core_tk8x(font, window=nil, option=nil)
###
###--- TkFont#configure_core_tk4x(font, slot, value=None)
###
###--- TkFont#configinfo_core_tk4x(font, option=nil)
###
###--- TkFont#configure_core_tk8x(font, slot, value=None)
###
###--- TkFont#configinfo_core_tk8x(font, option=nil)
###
###--- TkFont#delete_core_tk4x
###
###--- TkFont#delete_core_tk8x
###
###--- TkFont#latin_replace_core_tk4x(ltn)
###
###--- TkFont#kanji_replace_core_tk4x(knj)
###
###--- TkFont#latin_replace_core_tk8x(ltn)
###
###--- TkFont#kanji_replace_core_tk8x(knj)
###
###--- TkFont#measure_core_tk4x(window, text)
###
###--- TkFont#measure_core_tk8x(window, text)
###
###--- TkFont#metrics_core_tk4x(font, window, option=nil)
###
###--- TkFont#metrics_core_tk8x(font, window, option=nil)
=begin

--- TkFont#create_asciifont(font)
--- TkFont#create_latinfont(font)
#@todo

--- TkFont#create_kanjifont(font)
#@todo

--- TkFont#create_compoundfont(ltn, knj, keys)
#@todo

--- TkFont#actual_core(font, window=nil, option=nil)
#@todo

    指定した ((|font|)) の実際に使用されるオプション(((<フォントオプション>))
    参照) を配列で返します。((|option|)) が指定されていれば
    そのオプションの値だけを返します。((|window|)) が指定さ
    れていれば、そのウィンドウが表示されるディスプレイで使わ
    れるフォントの属性を返します。

    tk4.x では、常に配列

        [['family',[]], ['size',[]], ['weight',[]], ['slant',[]], 
         ['underline',[]], ['overstrike',[]], ['charset',[]], ['pointadjust',[]]]

    を返します。

--- TkFont#configinfo_core(font, option=nil)
#@todo

--- TkFont#configure_core(font, slot, value=None)
#@todo

--- TkFont#delete_core
#@todo

--- TkFont#latin_replace_core(ltn)
#@todo

--- TkFont#kanji_replace_core(knj)
#@todo

--- TkFont#measure_core(window, text)
#@todo

--- TkFont#metrics_core(font, window, option=nil)
#@todo
== メソッド:

--- TkFont#call_font_configure(path, *args)
#@todo

--- TkFont#used
#@todo

--- TkFont#id
#@todo

--- TkFont#font
#@todo

--- TkFont#ascii_font
--- TkFont#latin_font
#@todo

--- TkFont#kanji_font
#@todo

--- TkFont#actual(option=nil)
#@todo

    フォントの属性(((<フォントオプション>))参照)を配列で返します。    ((|option|)) が指定されていればそのオプションの値だけを返します。

--- TkFont#actual_displayof(window, option=nil)
#@todo

    (({actual()})) と同じですが、指定した ((|window|)) ウィ
    ンドウが表示されるディスプレイで使われるフォントオプショ
    ンの値だけを返します。

--- TkFont#ascii_actual(option=nil)
--- TkFont#latin_actual(option=nil)
#@todo

--- TkFont#ascii_actual_displayof(window, option=nil)
--- TkFont#latin_actual_displayof(window, option=nil)
#@todo

--- TkFont#kanji_actual(option=nil)
#@todo

--- TkFont#kanji_actual_displayof(window, option=nil)
#@todo

--- TkFont#[](slot)
#@todo

--- TkFont#[]=(slot, val)
#@todo

--- TkFont#configure(slot, value=None)
#@todo

--- TkFont#configinfo(slot=nil)
#@todo

--- TkFont#delete
#@todo

--- TkFont#ascii_configure(slot, value=None)
--- TkFont#latin_configure(slot, value=None)
#@todo

--- TkFont#ascii_configinfo(slot=nil)
--- TkFont#latin_configinfo(slot=nil)
#@todo

--- TkFont#kanji_configure(slot, value=None)
#@todo

--- TkFont#kanji_configinfo(slot=nil)
#@todo

--- TkFont#replace(ltn, knj)
#@todo

--- TkFont#ascii_replace(ltn)
--- TkFont#latin_replace(ltn)
#@todo

--- TkFont#kanji_replace(knj)
#@todo

--- TkFont#measure(text)
#@todo

    フォント (({self})) で ((|text|)) を表示したときの表示幅
    をピクセル数で返します。((|text|)) 中のタブや改行は特別には
    解釈されません((-タブや改行はスペースと同じとして扱うわけでは
    ないらしい。独自の幅を持っていると思えば良い？-))

        require 'tk'
        fn = TkFont.new
        p fn.measure("foobar")
        p fn.measure("foobar ")
        p fn.measure("foobar\t")
        p fn.measure("foobar\n")

        => 35
           39
           42
           46

--- TkFont#measure_displayof(window, text)
#@todo

--- TkFont#metrics(option=nil)
#@todo

    フォントメトリック情報を配列で返します。

        require 'tk'
        p TkFont.new.metrics
        => [["ascent", 11], ["descent", 3], ["linespace", 14], ["fixed", 0]]

    ((|option|)) を指定するとその要素の値だけを返します。

        require 'tk'
        p TkFont.new.metrics("ascent")
        => 11

    : ascent
      フォントの基準位置からの上側の高さをピクセル値で返します。    : descent
      フォントの基準位置からの下側の高さをピクセル値で返します。    : linespace
      行間(基準位置から基準位置まで)の幅をピクセル値で返しま
      す。普通 ascent + descent と同じかより大きな値になります。    : fixed
      固定幅フォント(すべての文字が等幅なフォント)なら 1、
      プロポーショナルフォント(文字によって幅が異なる)なら 0 を
      になります。

--- TkFont#metrics_displayof(window, option=nil)
#@todo

--- TkFont#ascii_metrics(option=nil)
--- TkFont#latin_metrics(option=nil)
#@todo

--- TkFont#latin_metrics_displayof(window, option=nil)
#@todo

--- TkFont#kanji_metrics(option=nil)
#@todo

--- TkFont#kanji_metrics_displayof(window, option=nil)
#@todo

--- TkFont#reset_pointadjust
#@todo
== 定数

--- TkFont::Tk_FontID
#@todo

--- TkFont::Tk_FontNameTBL
#@todo

--- TkFont::Tk_FontUseTBL
#@todo

--- TkFont::DEFAULT_LATIN_FONT_NAME
#@todo

--- TkFont::DEFAULT_KANJI_FONT_NAME
#@todo

== フォント記述

標準オプション ((<TkObject#font>)) などでフォントを記述するとき
以下にあげる形式のいずれかで指定できます。

: TkFont オブジェクト

  TkFont クラスのインスタンス

  예:

        require 'tk'
        obj = TkFont.new("family"=>"courier", "size"=>16)
        TkLabel.new(nil, "text" => "foo", "font" => obj).pack
        Tk.mainloop

: フォント名

  Tcl/Tk で定義されたフォント名。  ((-TkFont オブジェクトはフォント名として /^@font\d+[clk]$/ 
  の形式の文字列を使用している-))

: システムフォント

  プラットフォーム固有のフォント名。((<X Window System>)) では
  ((<XLFD>)) を指定します。

: 配列

  以下の形式の配列
    [family, size, style1, ... styleN]
  あるいは文字列
    "family size style1 ... styleN"
  size や style は省略可。

  style には以下のいずれかの文字列が指定できます(それぞれの
  意味は((<フォントオプション>))を参照。

    normal bold roman italic underline overstrike

  예:
      require 'tk'
      TkLabel.new(nil, "text" => "foo",
                  "font" => ["courier", 16, "italic"]).pack
      TkLabel.new(nil, "text" => "foo",
                  "font" => "courier 16 italic").pack
      Tk.mainloop

: XLFD

  以下の形式(((<X Window System>)) のフォント記述形式)の文字列

    -foundry-family-weight-slant-set_width-style-pixels-
       points-x_res-y_res-spacing-width-registry-encoding


  예:
      require 'tk'
      TkLabel.new(nil, "text" => "foo",
                  "font" => "-*-fixed-*-24-*").pack
      Tk.mainloop

: フォントオプション形式の配列

  フォントオプションのキー(キーは "-" で始める必要があります)
  と値の組を並べた配列

        ["-family", family, "-size", size, "-weight", weight, 
         "-slant", slant,   "-underline", bool, "-overstrike", bool]

  あるいは文字列

        "-family family, -size size -weight weight
        -slant slant -underline bool -overstrike bool"

  各キーに指定できる値については((<フォントオプション>))参照。

  예:
      require 'tk'
      TkLabel.new(nil, "text" => "foo",
                  "font" => ["-weight", "bold"]).pack
      TkLabel.new(nil, "text" => "foo",
                  "font" => "-underline 1").pack
      Tk.mainloop

== フォントオプション

: -family name

  フォントファミリーの名前を指定します。Tkでは必ず以下のファミリーを
  指定できることが保証されています((-WindowsやMacでも？-))
  フォントファミリの指定はアルファベットの大小を区別しません。

    : Courier
      monospaced typewriter font
    : Times
      serifed newspaper font
    : Helvetica
      sans-serif European font

: -size size

  指定した ((|size|)) の値が正の数ならポイント数で、負の数な
  らピクセル数でサイズ指定したことになります。  0 (デフォルト)ならデフォルトのサイズ(プラットフォーム依存)になります。  サイズは整数でなければなりません。

        require 'tk'

        TkLabel.new(nil, "text" => "foobar ほげほげ",
                    "font" => TkFont.new("size"=>24)).pack
        Tk.mainloop

: -weight

  フォントの濃さを指定します。"normal" (デフォルト)なら、通常のフォント
  "bold" ならボールド体のフォントになります。

        require 'tk'

        TkLabel.new(nil, "text" => "foobar ほげほげ",
                    "font" => TkFont.new("weight"=>"bold")).pack
        Tk.mainloop

: -slant slant

  フォントを傾けるかどうかの指定です。"roman" (デフォルト)なら
  傾きなし、"italic" を指定すると傾きのあるフォントになります。

        require 'tk'

        TkLabel.new(nil, "text" => "foobar ほげほげ",
                    "font" => TkFont.new("slant"=>"italic")).pack
        Tk.mainloop

: -underline bool

  フォントに下線をつけるかどうかの指定です。bool には真偽値
  (true/false あるいは数値で 真:1 か 偽:0)を指定します。デフォ
  ルトは false です。

        require 'tk'

        TkLabel.new(nil, "text" => "foobar ほげほげ",
                    "font" => TkFont.new("underline"=>true)).pack
        Tk.mainloop

: -overstrike bool

  フォントに取り消し線(文字の中央に一本線をつける)かどうかの
  指定です。bool には真偽値(true/false あるいは数値で 真:1 
  か 偽: 0)を指定します。기본 설정은 false입니다.

        require 'tk'

        TkLabel.new(nil, "text" => "foobar ほげほげ",
                    "font" => TkFont.new("overstrike"=>true)).pack
        Tk.mainloop

=end
