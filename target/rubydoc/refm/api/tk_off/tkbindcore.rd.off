# $Id: tkbindcore.rd,v 1.6 2001/03/18 12:36:35 arai Exp $
# Module TkBindCore is defined in tk.rb
=begin
= TkBindCore

== メソッド:

--- TkBindCore#bind(context, cmd=Proc.new, args=nil)
#@todo
    ((|context|))で指定したイベントに対して((|cmd|))を登録します。    ((|args|)) を省略すると((|cmd|))の実行時にイベントクラス
    ((<TkComm::Event>))のインスタンスが((|cmd|))の引数に渡されます。((|args|)) を指定
    すると引き数に渡す情報を押下したキーコードなどに限定することができます。

    ((|context|))は、以下のうちのいずれかです。

    *TkVirtualEventのインスタンス
    *任意の1文字(対応するキーまたはマウスボタン)
    *((<キーシンボル>))("Return", "Up" など)
    *"ButtonPress" または、 "Button"
    *"ButtonRelease"
    *"Circulate"
    *"Colormap"
    *"Configure"
    *"Destroy"
    *"Enter"
    *"Deactivate"
    *"Expose"
    *"FocusIn"
    *"FocusOut"
    *"Gravity"
    *"KeyPress" または、"Key"
    *"KeyRelease"
    *"Leave"
    *"Map"
    *"Motion"
    *"Property"
    *"Reparent"
    *"Unmap"
    *"Visibility"
    *"Activate"

    これらの組合せを配列または、(TkVirtualEventを指定しなければ)コンマで区
    切った文字列で指定すると指定したイベントの一連の流れに対してコールバッ
    ク関数を登録することができます。(このようなイベントのことを
    ((<イベントシーケンス>))と呼びます)。

    例えば、(('["Escape", "a"]'))や(('"Escape,a"'))は、((%ESC%))キーを押
    した後に((%a%))キーを押すことを意味します。

      require "tk"
      Tk.root.bind(['Escape','Key'], proc {|e| p e.keysym})
      p Tk.root.bindinfo
      Tk.mainloop

      => ["Key-Escape,Key"] # <- イベントシーケンスのbindinfoでの表記
         "a"            # <- ESC a を押したときに表示される

    "KeyPress"イベントや、"ButtonPress"イベントには、より細かく"-キーコー
    ド((-キーシンボル?-))"や"-マウスボタン番号"を付加できます。

      bind "Key-comma", proc {|e| p e}
      bind "ButtonPress-1", proc {|e| p e}

    また、以下の修飾文字列をイベント文字列の前に付加できます。

    *"Control-"
    *"Shift-"
    *"Lock-"
    *"Button1-" または、"B1-"
    *"Button2-" または、"B2-"
    *"Button3-" または、"B3-"
    *"Button4-" または、"B4-"
    *"Button5-" または、"B5-"
    *"Mod1-" または、"M1-"
    *"Mod2-" または、"M2-"
    *"Mod3-" または、"M3-"
    *"Mod4-" または、"M4-"
    *"Mod5-" または、"M5-"
    *"Meta-" または、"M-"
    *"Alt-"
    *"Double-"
    *"Triple-"

    例えば、((%SHIFT%))+((%META%))+"((%,%))"は以下です。

      bind "Shift-Meta-Key-comma", proc {|e| p e}

    マウスボタン1を押した状態でのドラッグは以下です。

      bind "B1-Motion", proc {|e| p e}

    ((|args|))は、以下の何れかを空白で区切った文字列です。

    *"%#"
     - ((<TkComm::Event#serial>))
    *"%a"
    *"%b"
     - ((<TkComm::Event#num>))
    *"%c"
    *"%d"
    *"%f"
     - ((<TkComm::Event#focus>))
    *"%h"
     - ((<TkComm::Event#height>))
    *"%k"
     - ((<TkComm::Event#keycode>))
    *"%m"
    *"%o"
    *"%p"
    *"%s"
     - ((<TkComm::Event#state>))
    *"%t"
     - ((<TkComm::Event#time>))
    *"%w"
     - ((<TkComm::Event#width>))
    *"%x"
     - ((<TkComm::Event#x>))
    *"%y"
     - ((<TkComm::Event#y>))
    *"%A"
     - ((<TkComm::Event#char>))
    *"%B"
    *"%E"
     - ((<TkComm::Event#send_event>))
    *"%K"
     - ((<TkComm::Event#keysym>))
    *"%N"
     - ((<TkComm::Event#keysym_num>))
    *"%R"
    *"%S"
    *"%T"
     - ((<TkComm::Event#type>))
    *"%W"
     - ((<TkComm::Event#widget>))
    *"%X"
     - ((<TkComm::Event#x_root>))
    *"%Y'
     - ((<TkComm::Event#y_root>))

    マウスボタン1をクリックしたときにマウスカーソルの位置を表示す
    る例です。

      require "tk"
      Tk.root.bind("1", proc {|x, y| p [x, y]}, "%X %Y")
      Tk.mainloop

    もちろん、((|args|))を指定しなくても以下で同じことができます。    ((<TkComm::Event>))

      require "tk"
      Tk.root.bind("1", proc {|e| p [e.x_root, e.y_root]})
      Tk.mainloop

--- TkBindCore#bind_append(context, cmd=Proc.new, args=nil)
#@todo
    ((<TkBindCore#bind>))と同じですが、すでに同じ((|context|))にコールバッ
    ク関数が登録されていれば、((|cmd|))を追加で登録します。

    コールバック関数の実行順序は登録順です(コールバック関数の実行順序に関
    しては、((<TkWindow#bindtags>))も参照してください)。

--- TkBindCore#bind_remove(context)
#@todo
    ((|context|))に登録されたコールバック関数を取り除きます。

--- TkBindCore#bindinfo(context=nil)
#@todo
    イベント((|context|))に登録されたイベントコールバックの情報を配列にし
    て返します。返される配列の要素は((<TkBindCore#bind>)) の第2,3引数の配列です。

      require "tk"
      cursor_pos1 = proc {|x,y| printf("X=%d Y=%d\n", x, y)}
      cursor_pos2 = proc {|x,y| printf("x=%d y=%d\n", x, y)}
      Tk.root.bind       ('Button-1', cursor_pos1, "%X %Y")
      Tk.root.bind_append('Button-1', cursor_pos2, "%x %y")
      p Tk.root.bindinfo('Button-1')

      => [[#<Proc:0x401354e8>, "%X %Y"], [#<Proc:0x40132ef0>, "%x %y"]]

    ((|context|))を省略した場合、コールバック関数が登録されている
    イベントの種類を配列にして返します。

      require "tk"
      cursor_pos = proc {|x,y| printf("X=%d Y=%d\n", x, y)}
      Tk.root.bind('Button-1', cursor_pos, "%X %Y")
      Tk.root.bind('Button-2', cursor_pos, "%X %Y")
      p Tk.root.bindinfo

      => ["Button-2", "Button-1"]

=end
