# $Id: tklistbox.rd,v 1.15 2001/03/18 12:39:30 arai Exp $
# Class TkListbox is defined in tk.rb
=begin
= TkListbox

リストボックスウィジェットのクラスです。
リストボックスウィジェットは項目の一覧を表すウィジェットです。

  require "tk"
  list = TkListbox.new { setgrid 'yes'; pack }
  list.insert 'end', "abc"
  list.insert 'end', "def"
  list.insert 'end', "123"
  list.insert 'end', "456"
  Tk.mainloop

メソッドの説明の中で((*位置*))は、以下のいずれかを指します。

*数字

 数字で指定した要素位置(上端は0)

*"@x,y"

 x、y は数字です。 数字で指定したピクセル位置(入力欄の左上端は0から始まる)

*"active"

 アクティブ(カーソル位置のこと)である要素の位置

*"end"

 最後の要素の位置

*"anchor"

 ???

== スーパークラス:

((<TkTextWin>))

== インクルードしているモジュール:

((<Tk::Scrollable>))

== メソッド:

--- TkListbox#activate(y)
#@todo
    ((|y|))で指定した((*位置*))の要素をアクティブにします。そのリスト
    ボックスに((<入力フォーカス>))があれば、アクティブな行には下線が引
    かれます。

     require "tk"
     TkListbox.new {
       insert 'end', "foo"
       insert 'end', "bar"
       insert 'end', "baz"
       activate 1
       #focus
       pack
     }
     Tk.mainloop

--- TkListbox#curselection
#@todo
    ((<選択>))された要素の要素番号を配列にして返します(要素番号は上端が0)

--- TkListbox#get(index)
--- TkListbox#get(first, last)
#@todo
    引数が1つの場合、指定した((*位置*))の要素を文字列で返します。    引数が2つの場合、指定した範囲の要素を文字列の配列で返します。

--- TkListbox#nearest(y)
#@todo
    ((|y|))で指定したY座標に近い要素の要素番号を返します。

--- TkListbox#size
#@todo
    要素の数を返します。

--- TkListbox#selection_anchor(index)
#@todo
    ((|index|))で指定した((*位置*))の要素を((<アンカー>))にします。

--- TkListbox#selection_clear(first, last=None)
#@todo
    ((|first|))、((|last|))で指定した((*位置*))の範囲の要素が((<選択>))さ
    れていれば非選択にします。((|last|))を省略した場合、((|first|))の((*位
    置*))の要素を非選択にします。

--- TkListbox#selection_includes(index)
#@todo
    (({index}))で指定した((*位置*))の要素が((<選択>))されているかどうかを
    真偽値(({true}))/(({false}))で返します。

      require "tk"
      l = TkListbox.new {
        100.times {|i| insert "end", i}
      }.pack
      p l.selection_set(0)
      p l.selection_includes(0)
      Tk.mainloop

--- TkListbox#selection_set(first, last=None)
#@todo
    ((|first|))、((|last|))で指定した((*位置*))の範囲の要素を((<選択>))し
    합니다.((|last|))を省略した場合、((|first|))の((*位置*))の要素を選択し
    합니다.

--- TkListbox#itemcget(index, key)
#@todo

--- TkListbox#itemconfigure(index, key, val=None)
#@todo

--- TkListbox#itemconfiginfo(index, key=nil)
#@todo

== 標準オプション:

((<TkObject#background>))

((<TkObject#borderwidth>))

((<TkObject#cursor>))

((<TkObject#exportselection>))

((<TkObject#font>))

((<TkObject#foreground>))

((<TkObject#highlightbackground>))

((<TkObject#highlightcolor>))

((<TkObject#highlightthickness>))

((<TkObject#relief>))

((<TkObject#selectbackground>))

((<TkObject#selectborderwidth>))

((<TkObject#selectborderwidth>))

((<TkObject#setgrid>))

((<TkObject#takefocus>))

### ((<TkObject#xscrollcommand>))

### ((<TkObject#yscrollcommand>))

== オプション:

--- TkListbox#height
#@todo
    指定した要素の数をリストボックスの高さにします。0を指定した場合
    すべての要素が収まるように自動的に高さが調整されます(この場合、参照結
    果も0になります)。

      require "tk"
      TkListbox.new {
       height 0
       insert "end", "a"
       insert "end", "b"
       insert "end", "c"
       p height
      }.pack
      Tk.mainloop

--- TkListbox#selectmode
#@todo
    行を((<選択>))するときの振る舞いを以下の何れかで指定します。

    *"single"
     *1度に1行しか選択できません(他の行を選択すると新しく選択しなおします)。    *"browse"(デフォルト)
     *1度に1行しか選択できません(他の行を選択すると新しく選択しなおします)。     *ボタン1をドラッグすることで選択項目を変更できます。    *"multiple"
     *1度に複数の行を選択できます
     *選択した行をクリックするとその行は非選択状態になります
    *"extended"
     *マウスボタン1をクリックするとその行は選択状態になり((<アンカー>))になります。     *((%Ctrl%))キーを押しながらマウスボタン1をクリックすることで1度に複数の行を選択できます。     *((%SHIFT%))キーを押しながらマウスボタン1をクリックすることで((<アンカー>))からクリックした行までをすべて選択します。

    ((-もっと詳細に-))

    以下で、各モードの動作の違いを確認してみてください。

      require "tk"

      list = TkListbox.new {
        ("a".."z").each {|c| insert 'end', c}
      }.pack 'fill'=>'both', 'expand'=>true

      mode_var = TkVariable.new("browse")       # default mode

      TkLabel.new {
        text "select one of below modes"
      }.pack 'fill'=>'x'

      %w(single browse multiple extended).each {|mode|
        TkRadioButton.new {
          text mode
          variable mode_var
          value mode
          command {
            list.selectmode mode
          }
        }.pack 'side'=>'left', 'fill'=>'x', 'expand'=>true
      }
      Tk.mainloop

--- TkListbox#width
#@todo
    幅を文字数で指定します。0を指定した場合すべての要素の文字列が収
    まるように自動的に幅が調整されます(この場合、参照結果も0になります)。

      require "tk"
      TkListbox.new {
       width 0
       insert "end", "a" * 10
       insert "end", "b"
       insert "end", "c"
       p width
      }.pack
      Tk.mainloop

    フォントが固定幅ではない場合、文字"0"の幅を基準にします。

=end
