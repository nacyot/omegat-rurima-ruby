# $Id: tkcomposite.rd,v 1.10 2000/01/22 08:52:56 arai Exp $
# Module TkComposite is defined in tk.rb
=begin
= TkComposite

((-[ruby-list:5610]の説明を参考にした-))

このモジュールをインクルードすることによって複数のウィジェットを1つに
まとめて操作することができます。このようなウィジェット(クラス)のことを
コンポジットウィジェット(クラス)と呼びます。

ラベル付きエントリクラスの例

  require "tk"

  class TkLabeledEntry < TkEntry
    include TkComposite

    def initialize_composite(*args)
      @label = TkLabel.new(@frame)        # @frameは既に作成されている
      @entry = TkEntry.new(@frame)
      @label.pack('side'=>'left')
      @entry.pack('side'=>'left')
      @path = @entry.path                 # TkEntryのメソッドを継承するため

      delegate('DEFAULT', @entry, @label)
      delegate('text', @label)
    end
    def textvariable(var)
      @label.textvariable var
    end
  end

  TkLabeledEntry.new {
    text "foobar"
    self.value = "hoge"
    pack
  }

  Tk.mainloop

(({@path}))は、デフォルトではフレームウィジェット(({@frame}))のウィジェッ
トパスになっていますが、((<TkEntry>))から継承したメソッドの効果を
(({@entry}))ウィジェットに適用するために(({@entry}))のパスに書き換えて
います。(これは、ほとんどのメソッドが(({@path}))に対しての操作として実
装されているためです)

== インクルードしているモジュール:

((<Tk>))

== extendしているモジュール:

((<Tk>))

== privateメソッド:

--- TkComposite#initialize_composite(*args)
#@todo
    (({TkComposite}))ウィジェットをインクルードしたクラスは初期化のために
    このメソッドを再定義します。(initializeメソッドを再定義してはいけませ
    ん)オブジェクト生成時に(({new}))(厳密には(({initialize})))メソッドから
    呼ばれます。

    ((|args|))には、(({new}))の第2引数以降が渡されます。(第1引数の親ウィ
    ジェットは省かれます)

    このメソッドが呼び出される時点で、インスタンス変数(({@frame}))には、
    ((<TkFrame>))オブジェクトが作成されています。普通、このフレームを親ウィ
    ジェットに合成する内部ウィジェットを配置します。

== メソッド:

--- TkComposite#epath
#@todo
    コンポジットウィジェットのウィジェットパスを返します。このパスは実際に
    はデフォルトで作成されるフレームウィジェットを指しています。

--- TkComposite#delegate(option, *wins)
#@todo
    オプションメソッド((|option|))が呼ばれたときに、その呼び出しを
    ((|wins|))で指定した内部ウィジェットに渡すよう設定します。

    特別なオプション(({'DEFAULT'}))を指定することで残りすべてのオプション
    を((|wins|))に渡すことができます。

--- TkComposite#configure(slot, value=None)
--- TkComposite#configure(hash)
#@todo
    使い方は((<TkObject#configure>))と同じです。((<TkComposite#delegate>))での指定に従っ
    て内部ウィジェットのオプションを設定します。

=end
